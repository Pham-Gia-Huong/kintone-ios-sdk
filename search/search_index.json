{
    "docs": [
        {
            "location": "/",
            "text": "Home\n\n\n\n\nkintone-java-sdk is the SDK of kintone REST API client on Java\n\n\n\n\nGetting Started\n\n\n\n\nQuickstart\n\n\n\n\nReference\n\n\n\n\nAuthentication\n\n\nConnection\n\n\nRecord\n\n\nRecord\n\n\nRecordModel\n\n\nFieldModel\n\n\nCommentModel\n\n\n\n\n\n\nBulkRequest\n\n\nBulkRequest\n\n\nBulkRequestModel\n\n\n\n\n\n\nApp\n\n\nApp\n\n\nAppModel\n\n\nBasic\n\n\nResponse\n\n\n\n\n\n\nForm\n\n\nForm\n\n\nFormFields\n\n\nFormFields\n\n\nInput\n\n\nInput\n\n\nLookup\n\n\nMember\n\n\nSelection\n\n\nTime\n\n\n\n\n\n\nRelated_record\n\n\nSystem\n\n\n\n\n\n\nFormLayout\n\n\n\n\n\n\nGeneral\n\n\nView\n\n\n\n\n\n\nKintoneAPIException\n\n\nFile\n\n\nFile\n\n\nFileModel\n\n\n\n\n\n\nMember\n\n\n\n\nLicense\n\n\nApache License 2.0\n\n\nCopyright\n\n\nCopyright(c) Cybozu, Inc.",
            "title": "Home"
        },
        {
            "location": "/#home",
            "text": "kintone-java-sdk is the SDK of kintone REST API client on Java",
            "title": "Home"
        },
        {
            "location": "/#getting-started",
            "text": "Quickstart",
            "title": "Getting Started"
        },
        {
            "location": "/#reference",
            "text": "Authentication  Connection  Record  Record  RecordModel  FieldModel  CommentModel    BulkRequest  BulkRequest  BulkRequestModel    App  App  AppModel  Basic  Response    Form  Form  FormFields  FormFields  Input  Input  Lookup  Member  Selection  Time    Related_record  System    FormLayout    General  View    KintoneAPIException  File  File  FileModel    Member",
            "title": "Reference"
        },
        {
            "location": "/#license",
            "text": "Apache License 2.0",
            "title": "License"
        },
        {
            "location": "/#copyright",
            "text": "Copyright(c) Cybozu, Inc.",
            "title": "Copyright"
        },
        {
            "location": "/getting-started/quickstart/",
            "text": "Quickstart\n\n\nRequirement\n\n\n\n\nJava SE\n (Version 8 or later)\n\n\nmaven\n (Version 3.5.4 or later)\n\n\nkintone-java-sdk\n\n\n\n\nCode example\n\n\n\n\nGet record sample\n\n\n Source code \n\n\nimport com.cybozu.kintone.client.authentication.*;\nimport com.cybozu.kintone.client.connection.*;\nimport com.cybozu.kintone.client.model.record.*;\nimport com.cybozu.kintone.client.module.record.*;\n\nString USERNAME = \"cybozu\";\nString PASSWORD = \"cybozu\";\n\n// Init authenticationAuth\nAuth kintoneAuthWithPassword = new Auth();\nkintoneAuthWithPassword.setPasswordAuth(USERNAME, PASSWORD);\n\n// Init Connection without \"guest space ID\"\nConnection kintoneOnDemoDomain = new Connection(\"sample.domain.dot\", kintoneAuthWithPassword);\n\n// Init Record Module\nRecord kintoneRecordManager = new Record(kintoneOnDemoDomain);\n\n// execute GET RECORD API\nInteger appID = 1;\nInteger recordID = 1;\n\ntry {\n  GetRecordResponse response = kintoneRecordManager.getRecord(appID, recordID);\n} catch (Exception e) {\n  System.out.println(e.getMessage());\n}\n\n\n\n\n Response success\n\n\n{\n    \"record\":{\n        // record data should be here\n    }\n}\n\n\n\n\n Response error\n\n\n{\n    id: '{ID}',\n    code: '{CODE}',\n    message: '{Message string}',\n}\n\n\n\n\n\n\n\n\nBulk request sample\n\n\n Source code \n\n\nimport java.util.*;\nimport com.cybozu.kintone.client.authentication.*;\nimport com.cybozu.kintone.client.connection.*;\nimport com.cybozu.kintone.client.constant.*;\nimport com.cybozu.kintone.client.model.record.*;\nimport com.cybozu.kintone.client.model.record.field.*;\nimport com.cybozu.kintone.client.module.record.*;\nimport com.cybozu.kintone.client.model.bulkrequest.*;\nimport com.cybozu.kintone.client.module.bulkrequest.*;\n\nString USERNAME = \"cybozu\";\nString PASSWORD = \"cybozu\";\n\n// Init authenticationAuth\nAuth kintoneAuthWithPassword = new Auth();\nkintoneAuthWithPassword.setPasswordAuth(USERNAME, PASSWORD);\n\n// Init Connection without \"guest space ID\"\nConnection kintoneOnDemoDomain = new Connection(\"sample.domain.dot\", kintoneAuthWithPassword);\n\n// Init BulkRequest Module\nBulkRequest bulkRequestManager = new BulkRequest(kintoneOnDemoDomain);\n\n// update record & delete records with bulk request\nHashMap<String, FieldValue> record1 = new HashMap<String, FieldValue>();\nArrayList<RecordUpdateItem> dataUpdate = new ArrayList<RecordUpdateItem>();\n\nInteger recordID = 1;\nInteger revision = 1;\n\nFieldValue fv1 = new FieldValue();\nfv1.setType(FieldType.NUMBER);\nfv1.setValue(\"2222\");\nrecord1.put(\"FieldCode1\", fv1);\ndataUpdate.add(new RecordUpdateItem(recordID, revision, null, record1));\n\nArrayList<Integer> recordIDsDelete = new ArrayList<Integer>();\nrecordIDsDelete.add(1);\nrecordIDsDelete.add(2);\nrecordIDsDelete.add(3);\n\nInteger appID = 1;\n\nbulkRequest.deleteRecords(appID, recordIDsDelete);\nbulkRequest.updateRecords(appID, dataUpdate);\n\n// execute BulkRequest\ntry {\n  BulkRequestResponse responses = bulkRequestManager.execute();\n\n  // get results\n  ArrayList<Object> results = responses.getResults();\n  HashMap result1 = (HashMap)results.get(0);\n  UpdateRecordsResponse result2 = (UpdateRecordsResponse)results.get(1);\n\n  // data Response of the delete request\n  System.out.println(\"delete request: \" + result1.toString());\n\n  // data Response of the update request\n  ArrayList<RecordUpdateResponseItem> result21 = result2.getRecords();\n  System.out.println(\"update request ID: \" + result21.get(0).getID());\n  System.out.println(\"update request Revison: \" + result21.get(0).getRevision());\n} catch (Exception e) {\n  System.out.println(e.getMessage());\n}\n\n\n\n\n Response success\n\n\n{\n    \"record\":{\n        // record data should be here\n    }\n}\n\n\n\n\n Response error\n\n\n{\n    id: '{ID}',\n    code: '{CODE}',\n    message: '{Message string}',\n}",
            "title": "Quickstart"
        },
        {
            "location": "/getting-started/quickstart/#quickstart",
            "text": "",
            "title": "Quickstart"
        },
        {
            "location": "/getting-started/quickstart/#requirement",
            "text": "Java SE  (Version 8 or later)  maven  (Version 3.5.4 or later)  kintone-java-sdk",
            "title": "Requirement"
        },
        {
            "location": "/getting-started/quickstart/#code-example",
            "text": "Get record sample   Source code   import com.cybozu.kintone.client.authentication.*;\nimport com.cybozu.kintone.client.connection.*;\nimport com.cybozu.kintone.client.model.record.*;\nimport com.cybozu.kintone.client.module.record.*;\n\nString USERNAME = \"cybozu\";\nString PASSWORD = \"cybozu\";\n\n// Init authenticationAuth\nAuth kintoneAuthWithPassword = new Auth();\nkintoneAuthWithPassword.setPasswordAuth(USERNAME, PASSWORD);\n\n// Init Connection without \"guest space ID\"\nConnection kintoneOnDemoDomain = new Connection(\"sample.domain.dot\", kintoneAuthWithPassword);\n\n// Init Record Module\nRecord kintoneRecordManager = new Record(kintoneOnDemoDomain);\n\n// execute GET RECORD API\nInteger appID = 1;\nInteger recordID = 1;\n\ntry {\n  GetRecordResponse response = kintoneRecordManager.getRecord(appID, recordID);\n} catch (Exception e) {\n  System.out.println(e.getMessage());\n}   Response success  {\n    \"record\":{\n        // record data should be here\n    }\n}   Response error  {\n    id: '{ID}',\n    code: '{CODE}',\n    message: '{Message string}',\n}    Bulk request sample   Source code   import java.util.*;\nimport com.cybozu.kintone.client.authentication.*;\nimport com.cybozu.kintone.client.connection.*;\nimport com.cybozu.kintone.client.constant.*;\nimport com.cybozu.kintone.client.model.record.*;\nimport com.cybozu.kintone.client.model.record.field.*;\nimport com.cybozu.kintone.client.module.record.*;\nimport com.cybozu.kintone.client.model.bulkrequest.*;\nimport com.cybozu.kintone.client.module.bulkrequest.*;\n\nString USERNAME = \"cybozu\";\nString PASSWORD = \"cybozu\";\n\n// Init authenticationAuth\nAuth kintoneAuthWithPassword = new Auth();\nkintoneAuthWithPassword.setPasswordAuth(USERNAME, PASSWORD);\n\n// Init Connection without \"guest space ID\"\nConnection kintoneOnDemoDomain = new Connection(\"sample.domain.dot\", kintoneAuthWithPassword);\n\n// Init BulkRequest Module\nBulkRequest bulkRequestManager = new BulkRequest(kintoneOnDemoDomain);\n\n// update record & delete records with bulk request\nHashMap<String, FieldValue> record1 = new HashMap<String, FieldValue>();\nArrayList<RecordUpdateItem> dataUpdate = new ArrayList<RecordUpdateItem>();\n\nInteger recordID = 1;\nInteger revision = 1;\n\nFieldValue fv1 = new FieldValue();\nfv1.setType(FieldType.NUMBER);\nfv1.setValue(\"2222\");\nrecord1.put(\"FieldCode1\", fv1);\ndataUpdate.add(new RecordUpdateItem(recordID, revision, null, record1));\n\nArrayList<Integer> recordIDsDelete = new ArrayList<Integer>();\nrecordIDsDelete.add(1);\nrecordIDsDelete.add(2);\nrecordIDsDelete.add(3);\n\nInteger appID = 1;\n\nbulkRequest.deleteRecords(appID, recordIDsDelete);\nbulkRequest.updateRecords(appID, dataUpdate);\n\n// execute BulkRequest\ntry {\n  BulkRequestResponse responses = bulkRequestManager.execute();\n\n  // get results\n  ArrayList<Object> results = responses.getResults();\n  HashMap result1 = (HashMap)results.get(0);\n  UpdateRecordsResponse result2 = (UpdateRecordsResponse)results.get(1);\n\n  // data Response of the delete request\n  System.out.println(\"delete request: \" + result1.toString());\n\n  // data Response of the update request\n  ArrayList<RecordUpdateResponseItem> result21 = result2.getRecords();\n  System.out.println(\"update request ID: \" + result21.get(0).getID());\n  System.out.println(\"update request Revison: \" + result21.get(0).getRevision());\n} catch (Exception e) {\n  System.out.println(e.getMessage());\n}   Response success  {\n    \"record\":{\n        // record data should be here\n    }\n}   Response error  {\n    id: '{ID}',\n    code: '{CODE}',\n    message: '{Message string}',\n}",
            "title": "Code example"
        },
        {
            "location": "/reference/authentication/",
            "text": "Authentication\n\n\nAuthentication module will be used by \nConnection\n.\nThis module allow we authenticate with kintone app by password authenticator or API token authenticator. This module is also support basic authenticator.\n\n\n\n\nWarning\n\n\n\n\nIf both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used.\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nSample code\n\n\n\n\nInit authentication module\n\n\n Source code \n\n\nlet kintoneAuth = Auth()\n\n\n\n\n\n\nMethods\n\n\nsetPasswordAuth(username, password)\n\n\n\n\nSet password authentication for Authentication module.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nString\n\n\nyes\n\n\nThe username that is able to authenticate on kintone app\n\n\n\n\n\n\npassword\n\n\nString\n\n\nyes\n\n\nThe password that is able to authenticate on kintone app\n\n\n\n\n\n\n\n\nReturn\n\n\nAuth\n\n\nSample code\n\n\n\n\nSet password authentication\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nkintoneAuth.setPasswordAuth(username, password)\n\n\n\n\n\n\nsetApiToken(apiTokenString)\n\n\n\n\nSet Api Token for Authentication module.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiToken\n\n\nString\n\n\nyes\n\n\nThe apiToken that is able to authenticate on kintone app\n\n\n\n\n\n\n\n\nReturn\n\n\nAuth\n\n\n\n\nSet APIToken authentication\n\n\n Source code \n\n\nlet apiToken: String = \"123456789abcdefghijklmnopqrstuvwxyz\"\nkintoneAuth.setApiToken(apiToken)\n\n\n\n\n\n\nsetBasicAuth(username, password)\n\n\n\n\nSet Basic authentication for Authentication module.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nString\n\n\nyes\n\n\nThe username that is able to authenticate on kintone app\n\n\n\n\n\n\npassword\n\n\nString\n\n\nyes\n\n\nThe password that is able to authenticate on kintone app\n\n\n\n\n\n\n\n\nReturn\n\n\nAuth\n\n\nSample code\n\n\n\n\nSet basic authentication\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nkintoneAuth.setBasicAuth(username, password)\n\n\n\n\n\n\ncreateHeaderCredentials()\n\n\n\n\nProvide the list of HTTP Headers which use to authentication in.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\n[HTTPHeader?]\n\n\nSample code\n\n\n\n\nProvide the list of HTTP Headers which use to authentication in\n\n\n Source code \n\n\nlet headers: [HTTPHeader?] = kintoneAuth.createHeaderCredentials()\nvar count = 0\nfor header in headers {\n    print(\"Key[\" + count.description + \"]: \" + (header?.getKey())!)\n    print(\"Value[\" + count.description + \"]: \" + (header?.getValue())!)\n    count += 1\n}",
            "title": "Authentication"
        },
        {
            "location": "/reference/authentication/#authentication",
            "text": "Authentication module will be used by  Connection .\nThis module allow we authenticate with kintone app by password authenticator or API token authenticator. This module is also support basic authenticator.   Warning   If both the Token and Password Authentication are specified, the Token Authentication will be ignored and the Password authentication will be used.",
            "title": "Authentication"
        },
        {
            "location": "/reference/authentication/#constructor",
            "text": "Parameter  (none)  Sample code   Init authentication module   Source code   let kintoneAuth = Auth()",
            "title": "Constructor"
        },
        {
            "location": "/reference/authentication/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/authentication/#setpasswordauthusername-password",
            "text": "Set password authentication for Authentication module.   Parameter     Name  Type  Required  Description      username  String  yes  The username that is able to authenticate on kintone app    password  String  yes  The password that is able to authenticate on kintone app     Return  Auth  Sample code   Set password authentication   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nkintoneAuth.setPasswordAuth(username, password)",
            "title": "setPasswordAuth(username, password)"
        },
        {
            "location": "/reference/authentication/#setapitokenapitokenstring",
            "text": "Set Api Token for Authentication module.   Parameter     Name  Type  Required  Description      apiToken  String  yes  The apiToken that is able to authenticate on kintone app     Return  Auth   Set APIToken authentication   Source code   let apiToken: String = \"123456789abcdefghijklmnopqrstuvwxyz\"\nkintoneAuth.setApiToken(apiToken)",
            "title": "setApiToken(apiTokenString)"
        },
        {
            "location": "/reference/authentication/#setbasicauthusername-password",
            "text": "Set Basic authentication for Authentication module.   Parameter     Name  Type  Required  Description      username  String  yes  The username that is able to authenticate on kintone app    password  String  yes  The password that is able to authenticate on kintone app     Return  Auth  Sample code   Set basic authentication   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nkintoneAuth.setBasicAuth(username, password)",
            "title": "setBasicAuth(username, password)"
        },
        {
            "location": "/reference/authentication/#createheadercredentials",
            "text": "Provide the list of HTTP Headers which use to authentication in.   Parameter  (none)  Return  [HTTPHeader?]  Sample code   Provide the list of HTTP Headers which use to authentication in   Source code   let headers: [HTTPHeader?] = kintoneAuth.createHeaderCredentials()\nvar count = 0\nfor header in headers {\n    print(\"Key[\" + count.description + \"]: \" + (header?.getKey())!)\n    print(\"Value[\" + count.description + \"]: \" + (header?.getValue())!)\n    count += 1\n}",
            "title": "createHeaderCredentials()"
        },
        {
            "location": "/reference/connection/",
            "text": "Connection\n\n\nConnection\n module will used as a connector to connect to kintone Rest API\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndomain\n\n\nString\n\n\nyes\n\n\nThe Domain name or FQDN\n\n\n\n\n\n\nauth\n\n\nAuth\n\n\nyes\n\n\nThe authentication object\n\n\n\n\n\n\nguestSpaceID\n\n\nInt\n\n\n(optional)\n\n\nThe guest space id. Use this parameter to connect to kintone guest space.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInit Connection module\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, kintoneAuth)\n\n\n// Define connection that included guest space\nlet guestSpaceID: Int = 1\nlet connection = Connection(myDomainName, kintoneAuth, guestSpaceID)\n\n\n\n\n\n\n\nMethods\n\n\nsetHeader(key, value)\n\n\n\n\nSet new header of the \nConnection\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString\n\n\nyes\n\n\nThe header's \nkey\n name\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nyes\n\n\nThe header's value of \nkey\n\n\n\n\n\n\n\n\nReturn\n\n\nConnection\n\n\nSample code\n\n\n\n\nSet header of the Connection\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet key: String = \"X-HTTP-Method-Override\"\nlet value: String = \"GET\"\n\n// Init authenticationAuth\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, kintoneAuth)\nconnection.setHeader(key, value);\n\n\n\n\n\n\nsetProxy(proxyHost, proxyPort)\n\n\n\n\nSet the proxy of the request\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproxyHost\n\n\nString\n\n\nyes\n\n\nThe proxy host name\n\n\n\n\n\n\nproxyPort\n\n\nInt\n\n\nyes\n\n\nThe proxy port number\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nSet the proxy of the request\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet proxyHost: String = \"xxxx\"\nlet proxyPort: Int = 1234\n\n// Init authenticationAuth\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, kintoneAuth)\nconnection.setProxy(proxyHost, proxyPort)",
            "title": "Connection"
        },
        {
            "location": "/reference/connection/#connection",
            "text": "Connection  module will used as a connector to connect to kintone Rest API",
            "title": "Connection"
        },
        {
            "location": "/reference/connection/#constructor",
            "text": "Parameter     Name  Type  Required  Description      domain  String  yes  The Domain name or FQDN    auth  Auth  yes  The authentication object    guestSpaceID  Int  (optional)  The guest space id. Use this parameter to connect to kintone guest space.     Sample code   Init Connection module   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, kintoneAuth)\n\n\n// Define connection that included guest space\nlet guestSpaceID: Int = 1\nlet connection = Connection(myDomainName, kintoneAuth, guestSpaceID)",
            "title": "Constructor"
        },
        {
            "location": "/reference/connection/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/connection/#setheaderkey-value",
            "text": "Set new header of the  Connection   Parameter     Name  Type  Required  Description      key  String  yes  The header's  key  name    value  String  yes  The header's value of  key     Return  Connection  Sample code   Set header of the Connection   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet key: String = \"X-HTTP-Method-Override\"\nlet value: String = \"GET\"\n\n// Init authenticationAuth\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, kintoneAuth)\nconnection.setHeader(key, value);",
            "title": "setHeader(key, value)"
        },
        {
            "location": "/reference/connection/#setproxyproxyhost-proxyport",
            "text": "Set the proxy of the request   Parameter     Name  Type  Required  Description      proxyHost  String  yes  The proxy host name    proxyPort  Int  yes  The proxy port number     Return  (none)  Sample code   Set the proxy of the request   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet proxyHost: String = \"xxxx\"\nlet proxyPort: Int = 1234\n\n// Init authenticationAuth\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, kintoneAuth)\nconnection.setProxy(proxyHost, proxyPort)",
            "title": "setProxy(proxyHost, proxyPort)"
        },
        {
            "location": "/reference/record/",
            "text": "Record\n\n\nProvide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnection\n\n\nConnection\n\n\nyes\n\n\nThe connection module of this SDK.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInit record module\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = \"sample.cybozu.com\"\nlet connection = Connection(myDomainName, kintoneAuth)\n\n// Init Record Module\nlet kintoneRecordManager = Record(connection);\n\n\n\n\n\n\nMethods\n\n\ngetRecord(app, id)\n\n\n\n\nRetrieves details of 1 record from an app.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nid\n\n\nInt\n\n\nyes\n\n\nThe record ID in kintone app\n\n\n\n\n\n\n\n\nReturn\n\n\nGetRecordResponse\n\n\nSample code\n\n\n\n\nGet record\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    print(resultData[\"$id\"]?.getValue())\n\n    for (code, value) in resultData {\n        print(value.getType()!)\n        print(value.getValue())\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetRecords(app, query, fields, totalCount)\n\n\n\n\nRetrieves details of multiple records from an app using a query string.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nquery\n\n\nString\n\n\n(optional)\n\n\nThe query string\n that will specify what records will be responded.\n\n\n\n\n\n\nfields\n\n\nArrayList<String>\n\n\n(optional)\n\n\nList of field codes you want in the response.\n\n\n\n\n\n\ntotalCount\n\n\nBoolean\n\n\n(optional)\n\n\nIf \"true\", the request will retrieve total count of records match with query conditions.\n\n\n\n\n\n\n\n\nReturn\n\n\nGetRecordsResponse\n\n\nSample code\n\n\n\n\nGet records\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get records API\nlet appID: Int = {your_app_id}\nlet query: String? = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\"\nvar response: GetRecordsResponse? = nil\ndo {\n    response = try recordManagement.getRecords(appID, query, nil, true)\n    let records = response?.getRecords()\n\n    for (i, dval) in (records?.enumerated())! {\n        for (code, value) in dval {\n            print(value.getType())\n            print(value.getValue())\n        }\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\naddRecord(app, record)\n\n\n\n\nAdd one record to an app.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nrecord\n\n\nDictionary<String, \nFieldValue\n>\n\n\n(optional)\n\n\nThe record data to be add to kintone app. About the format, please look the sample below or \nreference\n at the end of this page\n\n\n\n\n\n\n\n\nReturn\n\n\nAddRecordResponse\n\n\nSample code\n\n\n\n\nAdd record\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n    print(response?.getId())\n    print(response?.getRevision())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\naddRecords(app, records)\n\n\n\n\nAdd multiple records to an app.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nrecords\n\n\nArray<Dictionary<String, \nFieldValue\n>>\n\n\nyes\n\n\nList of records data to be add to kintone app. About the format, please look the sample below or \nreference\n at the end of this page.\n\n\n\n\n\n\n\n\nReturn\n\n\nAddRecordsResponse\n\n\nSample code\n\n\n\n\nAdd multi records\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: AddRecordsResponse? = nil\ndo {\n    response = try recordManagement.addRecords(appID, addDataList)\n    print(response!.getIDs())\n    print(response!.getRevisions())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nupdateRecordByID(app, id, record, revision)\n\n\n\n\nUpdates details of 1 record in an app by specifying its record number.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nid\n\n\nInt\n\n\nyes\n\n\nThe record ID on kintone app\n\n\n\n\n\n\nrecord\n\n\nDictionary<String, \nFieldValue\n>\n\n\nyes\n\n\nThe record data to be update in  kintone app. About the format, please look the sample below or \nreference\n at the end of this page.\n\n\n\n\n\n\nrevision\n\n\nInt\n\n\n(optional)\n\n\nThe revision number of record\n\n\n\n\n\n\n\n\nReturn\n\n\nUpdateRecordResponse\n\n\nSample code\n\n\n\n\nUpdate record by ID\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar updateData:Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update\")\nupdateData[{your_field_code}] = field\n\n// execute update record API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordByID(appID, updRecID, updateData , nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nupdateRecordByUpdateKey(app, updateKey, record, revision)\n\n\nUpdates details of 1 record in an app by unique key.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nupdateKey\n\n\nRecordUpdateKey\n\n\nyes\n\n\nThe unique key of the record to be updated. About the format, please look the sample below or \nreference\n at the end of this page.\n\n\n\n\n\n\nrecord\n\n\nDictionary<String, \nFieldValue\n>\n\n\nyes\n\n\nThe record data will be added to kintone app. About the format, please look the sample below or \nreference\n at the end of this page.\n\n\n\n\n\n\nrevision\n\n\nInt\n\n\n(optional)\n\n\nThe revision number of record\n\n\n\n\n\n\n\n\nReturn\n\n\nUpdateRecordResponse\n\n\nSample code\n\n\n\n\nUpdate record by UpdateKey\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar updateData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update For Key\")\nupdateData[{your_field_code}] = field\n\n// create update key\nlet updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\")\n\n// execute update record API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordByUpdateKey(appID, updKey, updateData, nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nupdateRecords(app, records)\n\n\n\n\nUpdates details of multiple records in an app, by specifying their record number, or a different unique key.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nrecords\n\n\nArray<\nRecordUpdateItem\n>\n\n\nyes\n\n\nThe record data will be added to kintone app. About the format, please look the sample below or \nreference\n at the end of this page.\n\n\n\n\n\n\n\n\nReturn\n\n\nUpdateRecordsResponse\n\n\nSample code\n\n\n\n\nUpdate multi records\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    for value in (response!.getRecords())! {\n        print(value.getID())\n        print(value.getRevision())\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ndeleteRecords(app, ids)\n\n\n\n\nDeletes multiple records in an app.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nids\n\n\nArray<Int>\n\n\nyes\n\n\nThe list ids of record will be delete.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nDelete multi record\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nlet delRecordID1: Int = {your_record_id1}\nlet delRecordID2: Int = {your_record_id2}\nlet delIdList = [delRecordID1, delRecordID2]\n\ndo {\n    try recordManagement.deleteRecords(appID, delIdList)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ndeleteRecordsWithRevision(app, idsWithRevision)\n\n\n\n\nDeletes multiple records in an app with revision.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nidsWithRevision\n\n\nDictionary<Int, Int>\n\n\nyes\n\n\n(\nkey\n: \nThe Id of record\n, \nvalue\n: \nThe Revision of record.\n)\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nDelete record with revision\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nvar delIdAndRevision: Dictionary<Int, Int> = [:]\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\n\ndo {\n    try recordManagement.deleteRecordsWithRevision(appID, delIdAndRevision)\n} catch {\n   // error handle\n}\n\n\n\n\n\n\nupdateRecordAssignees(app, id, assignees, revision)\n\n\n\n\nUpdate assignees of a record.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nid\n\n\nInt\n\n\nyes\n\n\nThe record ID of kintone app\n\n\n\n\n\n\nassignees\n\n\nArrayList<String>\n\n\nyes\n\n\nThe user code(s) of the assignee(s)\n\n\n\n\n\n\nrevision\n\n\nInt\n\n\n(option)\n\n\nThe revision number of record\n\n\n\n\n\n\n\n\nReturn\n\n\nUpdateRecordResponse\n\n\nSample code\n\n\n\n\nupdate record Assignees\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update assignees API\nlet appID: Int = {your_app_od}\nlet updRecID: Int = {your_record_id}\nlet assignees: [String] = [\"{your_user_code}\"]\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordAssignees(appID, updRecID, assignees, nil)\n    print(response!.getRevision())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nupdateRecordStatus(app, id, action, assignee, revision)\n\n\n\n\nUpdates the Status of a record of an app.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID.\n\n\n\n\n\n\nid\n\n\nInt\n\n\nyes\n\n\nThe record ID on kintone app.\n\n\n\n\n\n\naction\n\n\nString\n\n\nyes\n\n\nThe Action name will be run.\n\n\n\n\n\n\nassignee\n\n\nString\n\n\n(Conditionally required)\n\n\nThe next Assignee. Specify the Assignee's log in name.\nRequired, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists.\n\n\n\n\n\n\nrevision\n\n\nInt\n\n\n(optional)\n\n\nThe revision of record\n\n\n\n\n\n\n\n\nReturn\n\n\nUpdateRecordResponse\n\n\nSample code\n\n\n\n\nUpdate record status\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nlet assignee: String? = \"{your_user_code}\"\nlet status: String = \"{your_status}\"\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordStatus(appID, updRecID, status, assignee, nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nupdateRecordsStatus(app, records)\n\n\n\n\nUpdates the Status of multiple records of an app.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nrecords\n\n\nArray<\nRecordUpdateStatusItem\n>\n\n\nyes\n\n\nThe recod status data. See belowsample codee or \nreference\n at the end of this page to know format.\n\n\n\n\n\n\n\n\nReturn\n\n\nUpdateRecordsResponse\n\n\nSample code\n\n\n\n\nUpdate multi record status\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID1: Int = {your_record_id1}\nlet updRecID2: Int = {your_record_id2}\nlet assignees1: String? = {your_login_code1}\nlet assignees2: String? = {your_login_code2}\nlet status1: String? = {your_update_status1}\nlet status2: String? = {your_update_status2}\nlet item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil)\nlet item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil)\nlet itemList = [item1, item2]\n\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecordsStatus(appID, itemList)\n    for value in (response!.getRecords())! {\n        print(value.getID())\n        print(value.getRevision())\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetComments(app, record, order, offset, limit)\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nrecord\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\norder\n\n\nString\n\n\n(optional)\n\n\nThe sort order of the Comment ID. Please select \nasc\n or \ndesc\n\n\n\n\n\n\noffset\n\n\nInt\n\n\n(optional)\n\n\nThe number of first comments will be ignored.\n\n\n\n\n\n\nlimit\n\n\nInt\n\n\n(optional)\n\n\nThe number of records to retrieve.\n\n\n\n\n\n\n\n\nReturn\n\n\nGetCommentsResponse\n\n\nSample code\n\n\n\n\nGet comments\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    // data Response of the get request\n    for value in (response?.getComments())! {\n        print(value.getId())\n        print(value.getCreatedAt())\n        print(value.getText())\n        print(value.getCreator()?.code)\n        print(value.getMentions())\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\naddComment(app, record, comment)\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nrecord\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\ncomment\n\n\nCommentContent\n\n\nyes\n\n\nAbout the format, please look the sample below or \nreference\n at the end of this page.\n\n\n\n\n\n\n\n\nReturn\n\n\nAddCommentResponse\n\n\nSample code\n\n\n\n\nAdd comment\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n\n    // data Response of the get request\n    print(response?.getId())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ndeleteComment(app, record, comment)\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\nrecord\n\n\nInt\n\n\nyes\n\n\nThe record ID on kintone app\n\n\n\n\n\n\ncomment\n\n\nInt\n\n\nyes\n\n\nThe comment ID on kintone record\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nDelete comment\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appId: Int = {your_app_id}\nlet recordId: Int = {your_record_id}\nlet commentId: Int = {your_comment_Id}\n\ndo {\n    try recordManagement.deleteComment(appId, recordId, commentId)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nReference\n\n\n\n\nGet Record\n \non developer network\n\n\nAdd Record\non developer network\n\n\nUpdate Record\non developer network\n\n\nDelete Record\non developer network\n\n\nGet Comments\non developer network\n\n\nAdd Comment\non developer network\n\n\nDelete Comment\non developer network\n\n\nUpdate Record Status\non developer network\n\n\nUpdate Record Assignees\non developer network",
            "title": "Record"
        },
        {
            "location": "/reference/record/#record",
            "text": "Provide manipulate functions on records: get, update, delete, update the record status & assignees in the kintone app",
            "title": "Record"
        },
        {
            "location": "/reference/record/#constructor",
            "text": "Parameter     Name  Type  Required  Description      connection  Connection  yes  The connection module of this SDK.     Sample code   Init record module   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = \"sample.cybozu.com\"\nlet connection = Connection(myDomainName, kintoneAuth)\n\n// Init Record Module\nlet kintoneRecordManager = Record(connection);",
            "title": "Constructor"
        },
        {
            "location": "/reference/record/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record/#getrecordapp-id",
            "text": "Retrieves details of 1 record from an app.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    id  Int  yes  The record ID in kintone app     Return  GetRecordResponse  Sample code   Get record   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    print(resultData[\"$id\"]?.getValue())\n\n    for (code, value) in resultData {\n        print(value.getType()!)\n        print(value.getValue())\n    }\n} catch {\n    // error handle\n}",
            "title": "getRecord(app, id)"
        },
        {
            "location": "/reference/record/#getrecordsapp-query-fields-totalcount",
            "text": "Retrieves details of multiple records from an app using a query string.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    query  String  (optional)  The query string  that will specify what records will be responded.    fields  ArrayList<String>  (optional)  List of field codes you want in the response.    totalCount  Boolean  (optional)  If \"true\", the request will retrieve total count of records match with query conditions.     Return  GetRecordsResponse  Sample code   Get records   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get records API\nlet appID: Int = {your_app_id}\nlet query: String? = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\"\nvar response: GetRecordsResponse? = nil\ndo {\n    response = try recordManagement.getRecords(appID, query, nil, true)\n    let records = response?.getRecords()\n\n    for (i, dval) in (records?.enumerated())! {\n        for (code, value) in dval {\n            print(value.getType())\n            print(value.getValue())\n        }\n    }\n} catch {\n    // error handle\n}",
            "title": "getRecords(app, query, fields, totalCount)"
        },
        {
            "location": "/reference/record/#addrecordapp-record",
            "text": "Add one record to an app.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    record  Dictionary<String,  FieldValue >  (optional)  The record data to be add to kintone app. About the format, please look the sample below or  reference  at the end of this page     Return  AddRecordResponse  Sample code   Add record   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n    print(response?.getId())\n    print(response?.getRevision())\n} catch {\n    // error handle\n}",
            "title": "addRecord(app, record)"
        },
        {
            "location": "/reference/record/#addrecordsapp-records",
            "text": "Add multiple records to an app.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    records  Array<Dictionary<String,  FieldValue >>  yes  List of records data to be add to kintone app. About the format, please look the sample below or  reference  at the end of this page.     Return  AddRecordsResponse  Sample code   Add multi records   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: AddRecordsResponse? = nil\ndo {\n    response = try recordManagement.addRecords(appID, addDataList)\n    print(response!.getIDs())\n    print(response!.getRevisions())\n} catch {\n    // error handle\n}",
            "title": "addRecords(app, records)"
        },
        {
            "location": "/reference/record/#updaterecordbyidapp-id-record-revision",
            "text": "Updates details of 1 record in an app by specifying its record number.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    id  Int  yes  The record ID on kintone app    record  Dictionary<String,  FieldValue >  yes  The record data to be update in  kintone app. About the format, please look the sample below or  reference  at the end of this page.    revision  Int  (optional)  The revision number of record     Return  UpdateRecordResponse  Sample code   Update record by ID   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar updateData:Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update\")\nupdateData[{your_field_code}] = field\n\n// execute update record API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordByID(appID, updRecID, updateData , nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}",
            "title": "updateRecordByID(app, id, record, revision)"
        },
        {
            "location": "/reference/record/#updaterecordbyupdatekeyapp-updatekey-record-revision",
            "text": "Updates details of 1 record in an app by unique key.  Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    updateKey  RecordUpdateKey  yes  The unique key of the record to be updated. About the format, please look the sample below or  reference  at the end of this page.    record  Dictionary<String,  FieldValue >  yes  The record data will be added to kintone app. About the format, please look the sample below or  reference  at the end of this page.    revision  Int  (optional)  The revision number of record     Return  UpdateRecordResponse  Sample code   Update record by UpdateKey   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar updateData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update For Key\")\nupdateData[{your_field_code}] = field\n\n// create update key\nlet updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\")\n\n// execute update record API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordByUpdateKey(appID, updKey, updateData, nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}",
            "title": "updateRecordByUpdateKey(app, updateKey, record, revision)"
        },
        {
            "location": "/reference/record/#updaterecordsapp-records",
            "text": "Updates details of multiple records in an app, by specifying their record number, or a different unique key.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    records  Array< RecordUpdateItem >  yes  The record data will be added to kintone app. About the format, please look the sample below or  reference  at the end of this page.     Return  UpdateRecordsResponse  Sample code   Update multi records   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    for value in (response!.getRecords())! {\n        print(value.getID())\n        print(value.getRevision())\n    }\n} catch {\n    // error handle\n}",
            "title": "updateRecords(app, records)"
        },
        {
            "location": "/reference/record/#deleterecordsapp-ids",
            "text": "Deletes multiple records in an app.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    ids  Array<Int>  yes  The list ids of record will be delete.     Return  (none)  Sample code   Delete multi record   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nlet delRecordID1: Int = {your_record_id1}\nlet delRecordID2: Int = {your_record_id2}\nlet delIdList = [delRecordID1, delRecordID2]\n\ndo {\n    try recordManagement.deleteRecords(appID, delIdList)\n} catch {\n    // error handle\n}",
            "title": "deleteRecords(app, ids)"
        },
        {
            "location": "/reference/record/#deleterecordswithrevisionapp-idswithrevision",
            "text": "Deletes multiple records in an app with revision.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    idsWithRevision  Dictionary<Int, Int>  yes  ( key :  The Id of record ,  value :  The Revision of record. )     Return  (none)  Sample code   Delete record with revision   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nvar delIdAndRevision: Dictionary<Int, Int> = [:]\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\n\ndo {\n    try recordManagement.deleteRecordsWithRevision(appID, delIdAndRevision)\n} catch {\n   // error handle\n}",
            "title": "deleteRecordsWithRevision(app, idsWithRevision)"
        },
        {
            "location": "/reference/record/#updaterecordassigneesapp-id-assignees-revision",
            "text": "Update assignees of a record.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    id  Int  yes  The record ID of kintone app    assignees  ArrayList<String>  yes  The user code(s) of the assignee(s)    revision  Int  (option)  The revision number of record     Return  UpdateRecordResponse  Sample code   update record Assignees   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update assignees API\nlet appID: Int = {your_app_od}\nlet updRecID: Int = {your_record_id}\nlet assignees: [String] = [\"{your_user_code}\"]\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordAssignees(appID, updRecID, assignees, nil)\n    print(response!.getRevision())\n} catch {\n    // error handle\n}",
            "title": "updateRecordAssignees(app, id, assignees, revision)"
        },
        {
            "location": "/reference/record/#updaterecordstatusapp-id-action-assignee-revision",
            "text": "Updates the Status of a record of an app.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID.    id  Int  yes  The record ID on kintone app.    action  String  yes  The Action name will be run.    assignee  String  (Conditionally required)  The next Assignee. Specify the Assignee's log in name. Required, if the \"Assignee List\" of the current status is set to \"User chooses one assignee from the list to take action\", and a selectable assignee exists.    revision  Int  (optional)  The revision of record     Return  UpdateRecordResponse  Sample code   Update record status   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nlet assignee: String? = \"{your_user_code}\"\nlet status: String = \"{your_status}\"\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordStatus(appID, updRecID, status, assignee, nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}",
            "title": "updateRecordStatus(app, id, action, assignee, revision)"
        },
        {
            "location": "/reference/record/#updaterecordsstatusapp-records",
            "text": "Updates the Status of multiple records of an app.   Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    records  Array< RecordUpdateStatusItem >  yes  The recod status data. See belowsample codee or  reference  at the end of this page to know format.     Return  UpdateRecordsResponse  Sample code   Update multi record status   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID1: Int = {your_record_id1}\nlet updRecID2: Int = {your_record_id2}\nlet assignees1: String? = {your_login_code1}\nlet assignees2: String? = {your_login_code2}\nlet status1: String? = {your_update_status1}\nlet status2: String? = {your_update_status2}\nlet item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil)\nlet item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil)\nlet itemList = [item1, item2]\n\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecordsStatus(appID, itemList)\n    for value in (response!.getRecords())! {\n        print(value.getID())\n        print(value.getRevision())\n    }\n} catch {\n    // error handle\n}",
            "title": "updateRecordsStatus(app, records)"
        },
        {
            "location": "/reference/record/#getcommentsapp-record-order-offset-limit",
            "text": "Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    record  Int  yes  The kintone app ID    order  String  (optional)  The sort order of the Comment ID. Please select  asc  or  desc    offset  Int  (optional)  The number of first comments will be ignored.    limit  Int  (optional)  The number of records to retrieve.     Return  GetCommentsResponse  Sample code   Get comments   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    // data Response of the get request\n    for value in (response?.getComments())! {\n        print(value.getId())\n        print(value.getCreatedAt())\n        print(value.getText())\n        print(value.getCreator()?.code)\n        print(value.getMentions())\n    }\n} catch {\n    // error handle\n}",
            "title": "getComments(app, record, order, offset, limit)"
        },
        {
            "location": "/reference/record/#addcommentapp-record-comment",
            "text": "Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    record  Int  yes  The kintone app ID    comment  CommentContent  yes  About the format, please look the sample below or  reference  at the end of this page.     Return  AddCommentResponse  Sample code   Add comment   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n\n    // data Response of the get request\n    print(response?.getId())\n} catch {\n    // error handle\n}",
            "title": "addComment(app, record, comment)"
        },
        {
            "location": "/reference/record/#deletecommentapp-record-comment",
            "text": "Parameter     Name  Type  Required  Description      app  Int  yes  The kintone app ID    record  Int  yes  The record ID on kintone app    comment  Int  yes  The comment ID on kintone record     Return  (none)  Sample code   Delete comment   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet domain: String = {your_domain}\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(domain, auth)\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appId: Int = {your_app_id}\nlet recordId: Int = {your_record_id}\nlet commentId: Int = {your_comment_Id}\n\ndo {\n    try recordManagement.deleteComment(appId, recordId, commentId)\n} catch {\n    // error handle\n}",
            "title": "deleteComment(app, record, comment)"
        },
        {
            "location": "/reference/record/#reference",
            "text": "Get Record   on developer network  Add Record on developer network  Update Record on developer network  Delete Record on developer network  Get Comments on developer network  Add Comment on developer network  Delete Comment on developer network  Update Record Status on developer network  Update Record Assignees on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/record-model/",
            "text": "Record Model\n\n\nGeneral record response, using for data response from the kintone app\n\n\nGetRecordResponse\n\n\nMethods\n\n\ngetRecord()\n\n\n\n\nget the Record data response.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nDictionary<String, \nFieldValue\n>\n\n\nSample code\n\n\n\n\nget the Record data response.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData: Dictionary<String, FieldValue> = response!.getRecord()!\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nGetRecordsResponse\n\n\nMethods\n\n\ngetRecords()\n\n\n\n\nget the Records data response.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<Dictionary<String, \nFieldValue\n>>\n\n\nSample code\n\n\n\n\nget the Records data response\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get records API\nlet appID: Int = {your_app_id}\nlet query: String? = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\"\nvar response: GetRecordsResponse? = nil\ndo {\n    response = try recordManagement.getRecords(appID, query, nil, true)\n    let records: Array<Dictionary<String, FieldValue>>? = response?.getRecords()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetTotalCount()\n\n\n\n\nget the number of records response.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt\n\n\nSample code\n\n\n\n\nget the number of records response\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get records API\nlet appID: Int = {your_app_id}\nlet query: String? = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\"\nvar response: GetRecordsResponse? = nil\ndo {\n    response = try recordManagement.getRecords(appID, query, nil, true)\n    let count: Int? = response?.getTotalCount()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nAddRecordResponse\n\n\nMethods\n\n\ngetId()\n\n\n\n\nget the the ID of record added.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt\n\n\nSample code\n\n\n\n\nget the the ID of record added\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n    print(response?.getId())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetRevision()\n\n\n\n\nget the revision number of record added.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt\n\n\nSample code\n\n\n\n\nget the revision number of record added\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nAddRecordsResponse\n\n\nMethods\n\n\ngetIDs()\n\n\n\n\nget the array of added records ID.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<Int>\n\n\nSample code\n\n\n\n\nget the array of added records ID\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: AddRecordsResponse? = nil\ndo {\n    response = try recordManagement.addRecords(appID, addDataList)\n    print(response!.getIDs())   \n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetRevisions()\n\n\n\n\nget the array of added records revision number.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<Int>\n\n\nSample code\n\n\n\n\nget the array of added records revision number\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: AddRecordsResponse? = nil\ndo {\n    response = try recordManagement.addRecords(appID, addDataList)\n    print(response!.getRevisions())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nUpdateRecordResponse\n\n\nMethods\n\n\ngetRevision()\n\n\n\n\nget the revision number of record updated.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt\n\n\nSample code\n\n\n\n\nget the revision number of record updated\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar updateData:Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update\")\nupdateData[{your_field_code}] = field\n\n// execute update record API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordByID(appID, updRecID, updateData , nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nUpdateRecordsResponse\n\n\nMethods\n\n\ngetRecords()\n\n\n\n\nget the array of added records ID with revision.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<\nRecordUpdateResponseItem\n>\n\n\nSample code\n\n\n\n\nget the array of added records ID with revision\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    let records: [RecordUpdateResponseItem] = response!.getRecords()!\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nRecordUpdateResponseItem\n\n\nMethods\n\n\ngetID()\n\n\n\n\nget the the ID of record updated.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt\n\n\nSample code\n\n\n\n\nget the the ID of record updated\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    let resultRecords: [RecordUpdateResponseItem] = response!.getRecords()!\n    let resultRecord = resultRecords[0]\n    resultID: Int = resultRecord.getID()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetRevision()\n\n\n\n\nget the revision number of record updated.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt\n\n\nSample code\n\n\n\n\nget the revision number of record updated\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    let resultRecords: [RecordUpdateResponseItem] = response!.getRecords()!\n    let resultRecord = resultRecords[0]\n    resultRevision: Int = resultRecord.getRevision()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nRecordUpdateItem\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nInt\n\n\nThe ID of the record.\n\n\n\n\n\n\nrevision\n\n\nInt\n\n\nThe revision number of the record.\n\n\n\n\n\n\nupdateKey\n\n\nRecordUpdateKey\n\n\nThe unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on.\n\n\n\n\n\n\nrecord\n\n\nDictionary<String, \nFieldValue\n>\n\n\nThe data to update record.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\ninit RecordUpdateItem class\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nRecordUpdateKey\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfield\n\n\nString\n\n\nThe field code of unique key in the kintone app.\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe field value in the record.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\ninit RecordUpdateKey class\n\n\n Source code \n\n\nfield: String = \"{your_field_code}\";\nvalue: String = \"update key value\"\nlet updKey = RecordUpdateKey(field, value)\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nRecordUpdateStatusItem\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nString\n\n\nThe Action name of the action you want.\n\n\n\n\n\n\nassignee\n\n\nString\n\n\n(Optional) The next Assignee. Specify the Assignee's log in name..\n\n\n\n\n\n\nid\n\n\nInt\n\n\nThe record ID.\n\n\n\n\n\n\nrevision\n\n\nInt\n\n\n(Optional) The revision number of the record before updating the status.If the specified revision is not the latest revision, the request will result in an error.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\ninit RecordUpdateStatusItem class\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID1: Int = {your_record_id1}\nlet updRecID2: Int = {your_record_id2}\nlet assignees1: String? = {your_login_code1}\nlet assignees2: String? = {your_login_code2}\nlet status1: String? = {your_update_status1}\nlet status2: String? = {your_update_status2}\nlet item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil)\nlet item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil)\nlet itemList = [item1, item2]\n\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecordsStatus(appID, itemList)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nMethods\n\n\n(none)",
            "title": "Record Model"
        },
        {
            "location": "/reference/record-model/#record-model",
            "text": "General record response, using for data response from the kintone app",
            "title": "Record Model"
        },
        {
            "location": "/reference/record-model/#getrecordresponse",
            "text": "",
            "title": "GetRecordResponse"
        },
        {
            "location": "/reference/record-model/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#getrecord",
            "text": "get the Record data response.   Parameter  (none)  Return  Dictionary<String,  FieldValue >  Sample code   get the Record data response.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData: Dictionary<String, FieldValue> = response!.getRecord()!\n    }\n} catch {\n    // error handle\n}",
            "title": "getRecord()"
        },
        {
            "location": "/reference/record-model/#getrecordsresponse",
            "text": "",
            "title": "GetRecordsResponse"
        },
        {
            "location": "/reference/record-model/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#getrecords",
            "text": "get the Records data response.   Parameter  (none)  Return  Array<Dictionary<String,  FieldValue >>  Sample code   get the Records data response   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get records API\nlet appID: Int = {your_app_id}\nlet query: String? = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\"\nvar response: GetRecordsResponse? = nil\ndo {\n    response = try recordManagement.getRecords(appID, query, nil, true)\n    let records: Array<Dictionary<String, FieldValue>>? = response?.getRecords()\n} catch {\n    // error handle\n}",
            "title": "getRecords()"
        },
        {
            "location": "/reference/record-model/#gettotalcount",
            "text": "get the number of records response.   Parameter  (none)  Return  Int  Sample code   get the number of records response   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get records API\nlet appID: Int = {your_app_id}\nlet query: String? = \"\u30ec\u30b3\u30fc\u30c9\u756a\u53f7 >= 2 order by \u30ec\u30b3\u30fc\u30c9\u756a\u53f7 asc\"\nvar response: GetRecordsResponse? = nil\ndo {\n    response = try recordManagement.getRecords(appID, query, nil, true)\n    let count: Int? = response?.getTotalCount()\n} catch {\n    // error handle\n}",
            "title": "getTotalCount()"
        },
        {
            "location": "/reference/record-model/#addrecordresponse",
            "text": "",
            "title": "AddRecordResponse"
        },
        {
            "location": "/reference/record-model/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#getid",
            "text": "get the the ID of record added.   Parameter  (none)  Return  Int  Sample code   get the the ID of record added   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n    print(response?.getId())\n} catch {\n    // error handle\n}",
            "title": "getId()"
        },
        {
            "location": "/reference/record-model/#getrevision",
            "text": "get the revision number of record added.   Parameter  (none)  Return  Int  Sample code   get the revision number of record added   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}",
            "title": "getRevision()"
        },
        {
            "location": "/reference/record-model/#addrecordsresponse",
            "text": "",
            "title": "AddRecordsResponse"
        },
        {
            "location": "/reference/record-model/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#getids",
            "text": "get the array of added records ID.   Parameter  (none)  Return  Array<Int>  Sample code   get the array of added records ID   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: AddRecordsResponse? = nil\ndo {\n    response = try recordManagement.addRecords(appID, addDataList)\n    print(response!.getIDs())   \n} catch {\n    // error handle\n}",
            "title": "getIDs()"
        },
        {
            "location": "/reference/record-model/#getrevisions",
            "text": "get the array of added records revision number.   Parameter  (none)  Return  Array<Int>  Sample code   get the array of added records revision number   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: AddRecordsResponse? = nil\ndo {\n    response = try recordManagement.addRecords(appID, addDataList)\n    print(response!.getRevisions())\n} catch {\n    // error handle\n}",
            "title": "getRevisions()"
        },
        {
            "location": "/reference/record-model/#updaterecordresponse",
            "text": "",
            "title": "UpdateRecordResponse"
        },
        {
            "location": "/reference/record-model/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#getrevision_1",
            "text": "get the revision number of record updated.   Parameter  (none)  Return  Int  Sample code   get the revision number of record updated   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create add data\nvar updateData:Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update\")\nupdateData[{your_field_code}] = field\n\n// execute update record API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nvar response: UpdateRecordResponse? = nil\ndo {\n    response = try recordManagement.updateRecordByID(appID, updRecID, updateData , nil)\n    print(response?.getRevision())\n} catch {\n    // error handle\n}",
            "title": "getRevision()"
        },
        {
            "location": "/reference/record-model/#updaterecordsresponse",
            "text": "",
            "title": "UpdateRecordsResponse"
        },
        {
            "location": "/reference/record-model/#methods_5",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#getrecords_1",
            "text": "get the array of added records ID with revision.   Parameter  (none)  Return  Array< RecordUpdateResponseItem >  Sample code   get the array of added records ID with revision   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    let records: [RecordUpdateResponseItem] = response!.getRecords()!\n} catch {\n    // error handle\n}",
            "title": "getRecords()"
        },
        {
            "location": "/reference/record-model/#recordupdateresponseitem",
            "text": "",
            "title": "RecordUpdateResponseItem"
        },
        {
            "location": "/reference/record-model/#methods_6",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#getid_1",
            "text": "get the the ID of record updated.   Parameter  (none)  Return  Int  Sample code   get the the ID of record updated   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    let resultRecords: [RecordUpdateResponseItem] = response!.getRecords()!\n    let resultRecord = resultRecords[0]\n    resultID: Int = resultRecord.getID()\n} catch {\n    // error handle\n}",
            "title": "getID()"
        },
        {
            "location": "/reference/record-model/#getrevision_2",
            "text": "get the revision number of record updated.   Parameter  (none)  Return  Int  Sample code   get the revision number of record updated   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n    let resultRecords: [RecordUpdateResponseItem] = response!.getRecords()!\n    let resultRecord = resultRecords[0]\n    resultRevision: Int = resultRecord.getRevision()\n} catch {\n    // error handle\n}",
            "title": "getRevision()"
        },
        {
            "location": "/reference/record-model/#recordupdateitem",
            "text": "",
            "title": "RecordUpdateItem"
        },
        {
            "location": "/reference/record-model/#constructor",
            "text": "Parameter     Name  type  Description      id  Int  The ID of the record.    revision  Int  The revision number of the record.    updateKey  RecordUpdateKey  The unique key of the record to be updated. Required, if id will not be specified. To specify this field, the field must have the \"Prohibit duplicate values\" option turned on.    record  Dictionary<String,  FieldValue >  The data to update record.     Sample code   init RecordUpdateItem class   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecords(appID, updateItemList)\n} catch {\n    // error handle\n}",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-model/#methods_7",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#recordupdatekey",
            "text": "",
            "title": "RecordUpdateKey"
        },
        {
            "location": "/reference/record-model/#constructor_1",
            "text": "Parameter     Name  type  Description      field  String  The field code of unique key in the kintone app.    value  String  The field value in the record.     Sample code   init RecordUpdateKey class   Source code   field: String = \"{your_field_code}\";\nvalue: String = \"update key value\"\nlet updKey = RecordUpdateKey(field, value)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-model/#methods_8",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/record-model/#recordupdatestatusitem",
            "text": "",
            "title": "RecordUpdateStatusItem"
        },
        {
            "location": "/reference/record-model/#constructor_2",
            "text": "Parameter     Name  type  Description      action  String  The Action name of the action you want.    assignee  String  (Optional) The next Assignee. Specify the Assignee's log in name..    id  Int  The record ID.    revision  Int  (Optional) The revision number of the record before updating the status.If the specified revision is not the latest revision, the request will result in an error.     Sample code   init RecordUpdateStatusItem class   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID1: Int = {your_record_id1}\nlet updRecID2: Int = {your_record_id2}\nlet assignees1: String? = {your_login_code1}\nlet assignees2: String? = {your_login_code2}\nlet status1: String? = {your_update_status1}\nlet status2: String? = {your_update_status2}\nlet item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil)\nlet item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil)\nlet itemList = [item1, item2]\n\nvar response: UpdateRecordsResponse? = nil\ndo {\n    response = try recordManagement.updateRecordsStatus(appID, itemList)\n} catch {\n    // error handle\n}",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-model/#methods_9",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/record-field-model/",
            "text": "Field Model\n\n\nFieldValue\n\n\nGeneral Field's value of the kintone app\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\ngetType()\n\n\n\n\nget the type of field.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nFieldType?\n\n\nSample code\n\n\n\n\nget the type of field.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    print(resultData[\"$id\"]?.getValue())\n\n    for (code, value) in resultData {\n        let ft: FieldType? = value.getType()\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetType(type)\n\n\n\n\nset the type of field.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nFieldType\n\n\nThe type of field - kintone-sdk FieldType constants.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the type of field.\n\n\n Source code \n\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetValue()\n\n\n\n\nget the value of field in the record.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nAny?\n\n\nSample code\n\n\n\n\nget the value of field in the record.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    print(resultData[\"$id\"]?.getValue())\n\n    for (code, value) in resultData {\n        let fv: Any? = value.getValue()\n    }\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetValue(value)\n\n\n\n\nset the value of field in the record.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nAny?\n\n\nThe value of field in the record, read more at \nField Type here\n.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the value of field in the record.\n\n\n Source code \n\n\n// create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nSubTableValueItem\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\ngetID()\n\n\n\n\nget the ID of item in table.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget the ID of item in table.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let fv = resultData[\"SubTable field\"]\n    let subTable: [SubTableValueItem] = fv.getValue() as! [SubTableValueItem]\n    let subTableItem: SubTableValueItem = subTable[0]\n    let itemID: Int = subTableItem.getID()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetID(id)\n\n\n\n\nset the ID of table.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nInt\n\n\nThe ID of table .\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the ID of item in table.\n\n\n Source code \n\n\nlet subtableValue = SubTableValueItem()\nlet item = Dictionary<String, FieldValue>()\nlet itemID = 1\nsubtableValue.setID(itemID)\nsubtableValue.setValue(item)\n\n\n\n\n\n\ngetValue()\n\n\n\n\nget the value of field in the record.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nDictionary<String, \nFieldValue\n>?\n\n\nSample code\n\n\n\n\nget the ID of item in table.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let fv = resultData[\"SubTable field\"]\n    let subTable: [SubTableValueItem] = fv.getValue() as! [SubTableValueItem]\n    let item: Dictionary<String, FieldValue>? = subTable[0].getValue()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetValue(value)\n\n\n\n\nset the value of field in the record.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nDictionary<String, \nFieldValue\n>\n\n\nThe row data of table.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nget the ID of item in table.\n\n\n Source code \n\n\nlet subtableValue = SubTableValueItem()\nlet item = Dictionary<String, FieldValue>()\nlet itemID = 1\nsubtableValue.setID(itemID)\nsubtableValue.setValue(item)",
            "title": "Field Model"
        },
        {
            "location": "/reference/record-field-model/#field-model",
            "text": "",
            "title": "Field Model"
        },
        {
            "location": "/reference/record-field-model/#fieldvalue",
            "text": "General Field's value of the kintone app",
            "title": "FieldValue"
        },
        {
            "location": "/reference/record-field-model/#constructor",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-field-model/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-field-model/#gettype",
            "text": "get the type of field.   Parameter  (none)  Return  FieldType?  Sample code   get the type of field.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    print(resultData[\"$id\"]?.getValue())\n\n    for (code, value) in resultData {\n        let ft: FieldType? = value.getType()\n    }\n} catch {\n    // error handle\n}",
            "title": "getType()"
        },
        {
            "location": "/reference/record-field-model/#settypetype",
            "text": "set the type of field.   Parameter     Name  type  Description      type  FieldType  The type of field - kintone-sdk FieldType constants.     Return  (none)  Sample code   set the type of field.   Source code   // create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n} catch {\n    // error handle\n}",
            "title": "setType(type)"
        },
        {
            "location": "/reference/record-field-model/#getvalue",
            "text": "get the value of field in the record.   Parameter  (none)  Return  Any?  Sample code   get the value of field in the record.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    print(resultData[\"$id\"]?.getValue())\n\n    for (code, value) in resultData {\n        let fv: Any? = value.getValue()\n    }\n} catch {\n    // error handle\n}",
            "title": "getValue()"
        },
        {
            "location": "/reference/record-field-model/#setvaluevalue",
            "text": "set the value of field in the record.   Parameter     Name  type  Description      value  Any?  The value of field in the record, read more at  Field Type here .     Return  (none)  Sample code   set the value of field in the record.   Source code   // create add data\nvar addData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value\")\naddData[{your_field_code}] = field\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: AddRecordResponse? = nil\ndo {\n    response = try recordManagement.addRecord(appID, addData)\n} catch {\n    // error handle\n}",
            "title": "setValue(value)"
        },
        {
            "location": "/reference/record-field-model/#subtablevalueitem",
            "text": "",
            "title": "SubTableValueItem"
        },
        {
            "location": "/reference/record-field-model/#constructor_1",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-field-model/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-field-model/#getid",
            "text": "get the ID of item in table.   Parameter  (none)  Return  Int?  Sample code   get the ID of item in table.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let fv = resultData[\"SubTable field\"]\n    let subTable: [SubTableValueItem] = fv.getValue() as! [SubTableValueItem]\n    let subTableItem: SubTableValueItem = subTable[0]\n    let itemID: Int = subTableItem.getID()\n} catch {\n    // error handle\n}",
            "title": "getID()"
        },
        {
            "location": "/reference/record-field-model/#setidid",
            "text": "set the ID of table.   Parameter     Name  type  Description      id  Int  The ID of table .     Return  (none)  Sample code   set the ID of item in table.   Source code   let subtableValue = SubTableValueItem()\nlet item = Dictionary<String, FieldValue>()\nlet itemID = 1\nsubtableValue.setID(itemID)\nsubtableValue.setValue(item)",
            "title": "setID(id)"
        },
        {
            "location": "/reference/record-field-model/#getvalue_1",
            "text": "get the value of field in the record.   Parameter  (none)  Return  Dictionary<String,  FieldValue >?  Sample code   get the ID of item in table.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let fv = resultData[\"SubTable field\"]\n    let subTable: [SubTableValueItem] = fv.getValue() as! [SubTableValueItem]\n    let item: Dictionary<String, FieldValue>? = subTable[0].getValue()\n} catch {\n    // error handle\n}",
            "title": "getValue()"
        },
        {
            "location": "/reference/record-field-model/#setvaluevalue_1",
            "text": "set the value of field in the record.   Parameter     Name  type  Description      value  Dictionary<String,  FieldValue >  The row data of table.     Return  (none)  Sample code   get the ID of item in table.   Source code   let subtableValue = SubTableValueItem()\nlet item = Dictionary<String, FieldValue>()\nlet itemID = 1\nsubtableValue.setID(itemID)\nsubtableValue.setValue(item)",
            "title": "setValue(value)"
        },
        {
            "location": "/reference/record-comment-model/",
            "text": "Comment Model\n\n\nGeneral comment structure of the record on kintone restAPI\n\n\nComment\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\ngetId()\n\n\n\n\nget the Comment ID.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget the Comment ID.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentID: Int? = comment.getId()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetText()\n\n\n\n\nget the comment including the line feed codes.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the comment including the line feed codes.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentText: String? = comment.getText()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetCreatedAt()\n\n\n\n\nget the created date and time of the comment.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nDate?\n\n\nSample code\n\n\n\n\nget the created date and time of the comment.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentCreateAt: Date? = comment.getCreatedAt()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetCreator()\n\n\n\n\nget an object including information of the comment creator.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nMember\n?\n\n\nSample code\n\n\n\n\nget an object including information of the comment creator.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentCreateAt: Member? = comment.getCreator()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetMentions()\n\n\n\n\nget an array including information of mentioned users.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<\nCommentMention\n>?\n\n\nSample code\n\n\n\n\nget an array including information of mentioned users.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentMentions: [CommentMention]? = comment.getMentions()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nCommentContent\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\nsetText(String text)\n\n\n\n\nset the comment including the line feed codes.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\nThe comment including the line feed codes.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the comment including the line feed codes.\n\n\n Source code \n\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetMentions(List<\nCommentMention\n> mentions)\n\n\n\n\nget an array including information of mentioned users.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmentions\n\n\nList<\nCommentMention\n>\n\n\nAn array including information of mentioned users.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nget an array including information of mentioned users.\n\n\n Source code \n\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nCommentMention\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\ngetCode()\n\n\n\n\nget the code of the mentioned user, group or organization.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the code of the mentioned user, group or organization.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentMentions: [CommentMention]? = comment.getMentions()\n    let mention: CommentMention = commentMentions![0]\n    let mentionUserCode: String? = mention.getCode()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetCode(String code)\n\n\n\n\nset the comment including the line feed codes.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nString\n\n\nThe code of the mentioned user, group or organization.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the comment including the line feed codes.\n\n\n Source code \n\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetType()\n\n\n\n\nget the type of the mentioned user, group or organization.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the type of the mentioned user, group or organization.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentMentions: [CommentMention]? = comment.getMentions()\n    let mention: CommentMention = commentMentions![0]\n    let mentionUserType: String? = mention.getType()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetType(String type)\n\n\n\n\nget an array including information of mentioned users.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\ntype\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nString\n\n\nThe type of the mentioned user, group or organization.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nget an array including information of mentioned users.\n\n\n Source code \n\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nGetCommentsResponse\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\ngetComments()\n\n\n\n\nget the comments List on a record.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<\nComment\n>?\n\n\nSample code\n\n\n\n\nget the comments List on a record.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetOlder()\n\n\n\n\nget information of older comments.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget information of older comments.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultOlderFlg: Boolean = response!.getOlder()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\ngetNewer()\n\n\n\n\nget information of newer comments.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget information of newer comments.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultNewerFlg: Boolean = response!.getNewer()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nAddCommentResponse\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\ngetId()\n\n\n\n\nget the ID of comment which have just created.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget the ID of comment which have just created.\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n\n    let resultID: Int? = response!.getId()\n} catch {\n    // error handle\n}",
            "title": "Comment Model"
        },
        {
            "location": "/reference/record-comment-model/#comment-model",
            "text": "General comment structure of the record on kintone restAPI",
            "title": "Comment Model"
        },
        {
            "location": "/reference/record-comment-model/#comment",
            "text": "",
            "title": "Comment"
        },
        {
            "location": "/reference/record-comment-model/#constructor",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-comment-model/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-comment-model/#getid",
            "text": "get the Comment ID.   Parameter  (none)  Return  Int?  Sample code   get the Comment ID.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentID: Int? = comment.getId()\n} catch {\n    // error handle\n}",
            "title": "getId()"
        },
        {
            "location": "/reference/record-comment-model/#gettext",
            "text": "get the comment including the line feed codes.   Parameter  (none)  Return  String?  Sample code   get the comment including the line feed codes.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentText: String? = comment.getText()\n} catch {\n    // error handle\n}",
            "title": "getText()"
        },
        {
            "location": "/reference/record-comment-model/#getcreatedat",
            "text": "get the created date and time of the comment.   Parameter  (none)  Return  Date?  Sample code   get the created date and time of the comment.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentCreateAt: Date? = comment.getCreatedAt()\n} catch {\n    // error handle\n}",
            "title": "getCreatedAt()"
        },
        {
            "location": "/reference/record-comment-model/#getcreator",
            "text": "get an object including information of the comment creator.   Parameter  (none)  Return  Member ?  Sample code   get an object including information of the comment creator.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentCreateAt: Member? = comment.getCreator()\n} catch {\n    // error handle\n}",
            "title": "getCreator()"
        },
        {
            "location": "/reference/record-comment-model/#getmentions",
            "text": "get an array including information of mentioned users.   Parameter  (none)  Return  Array< CommentMention >?  Sample code   get an array including information of mentioned users.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentMentions: [CommentMention]? = comment.getMentions()\n} catch {\n    // error handle\n}",
            "title": "getMentions()"
        },
        {
            "location": "/reference/record-comment-model/#commentcontent",
            "text": "",
            "title": "CommentContent"
        },
        {
            "location": "/reference/record-comment-model/#constructor_1",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-comment-model/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-comment-model/#settextstring-text",
            "text": "set the comment including the line feed codes.   Parameter     Name  type  Description      text  String  The comment including the line feed codes.     Return  (none)  Sample code   set the comment including the line feed codes.   Source code   // create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}",
            "title": "setText(String text)"
        },
        {
            "location": "/reference/record-comment-model/#setmentionslistcommentmention62-mentions",
            "text": "get an array including information of mentioned users.   Parameter     Name  type  Description      mentions  List< CommentMention >  An array including information of mentioned users.     Return  (none)  Sample code   get an array including information of mentioned users.   Source code   // create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}",
            "title": "setMentions(List&lt;CommentMention> mentions)"
        },
        {
            "location": "/reference/record-comment-model/#commentmention",
            "text": "",
            "title": "CommentMention"
        },
        {
            "location": "/reference/record-comment-model/#constructor_2",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-comment-model/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-comment-model/#getcode",
            "text": "get the code of the mentioned user, group or organization.   Parameter  (none)  Return  String?  Sample code   get the code of the mentioned user, group or organization.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentMentions: [CommentMention]? = comment.getMentions()\n    let mention: CommentMention = commentMentions![0]\n    let mentionUserCode: String? = mention.getCode()\n} catch {\n    // error handle\n}",
            "title": "getCode()"
        },
        {
            "location": "/reference/record-comment-model/#setcodestring-code",
            "text": "set the comment including the line feed codes.   Parameter     Name  type  Description      code  String  The code of the mentioned user, group or organization.     Return  (none)  Sample code   set the comment including the line feed codes.   Source code   // create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}",
            "title": "setCode(String code)"
        },
        {
            "location": "/reference/record-comment-model/#gettype",
            "text": "get the type of the mentioned user, group or organization.   Parameter  (none)  Return  String?  Sample code   get the type of the mentioned user, group or organization.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n    let comment: Comment = resultComments![0]\n    let commentMentions: [CommentMention]? = comment.getMentions()\n    let mention: CommentMention = commentMentions![0]\n    let mentionUserType: String? = mention.getType()\n} catch {\n    // error handle\n}",
            "title": "getType()"
        },
        {
            "location": "/reference/record-comment-model/#settypestring-type",
            "text": "get an array including information of mentioned users.   Parameter     Name  type  Description      type  String  The type of the mentioned user, group or organization.     Return  (none)  Sample code   get an array including information of mentioned users.   Source code   // create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n} catch {\n    // error handle\n}",
            "title": "setType(String type)"
        },
        {
            "location": "/reference/record-comment-model/#getcommentsresponse",
            "text": "",
            "title": "GetCommentsResponse"
        },
        {
            "location": "/reference/record-comment-model/#constructor_3",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-comment-model/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-comment-model/#getcomments",
            "text": "get the comments List on a record.   Parameter  (none)  Return  Array< Comment >?  Sample code   get the comments List on a record.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultComments: [Comment]? = response!.getComments()\n} catch {\n    // error handle\n}",
            "title": "getComments()"
        },
        {
            "location": "/reference/record-comment-model/#getolder",
            "text": "get information of older comments.   Parameter  (none)  Return  Boolean  Sample code   get information of older comments.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultOlderFlg: Boolean = response!.getOlder()\n} catch {\n    // error handle\n}",
            "title": "getOlder()"
        },
        {
            "location": "/reference/record-comment-model/#getnewer",
            "text": "get information of newer comments.   Parameter  (none)  Return  Boolean  Sample code   get information of newer comments.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetCommentsResponse? = nil\ndo {\n    response = try recordManagement.getComments(appID, recordID, nil, nil, nil)\n\n    let resultNewerFlg: Boolean = response!.getNewer()\n} catch {\n    // error handle\n}",
            "title": "getNewer()"
        },
        {
            "location": "/reference/record-comment-model/#addcommentresponse",
            "text": "",
            "title": "AddCommentResponse"
        },
        {
            "location": "/reference/record-comment-model/#constructor_4",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/record-comment-model/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/record-comment-model/#getid_1",
            "text": "get the ID of comment which have just created.   Parameter  (none)  Return  Int?  Sample code   get the ID of comment which have just created.   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// create add comment data\nlet mention = CommentMention()\nlet comment = CommentContent()\nmention.setCode(\"cybozu\")\nmention.setType(\"USER\")\nlet mentionList = [mention]\ncomment.setText(\"add comment\")\ncomment.setMentions(mentionList)\n\n// execute get comments API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: AddCommentResponse? = nil\ndo {\n    response = try recordManagement.addComment(appID, recordID, comment)\n\n    let resultID: Int? = response!.getId()\n} catch {\n    // error handle\n}",
            "title": "getId()"
        },
        {
            "location": "/reference/bulk-request/",
            "text": "BulkRequest\n\n\nThe Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API:\n\n\n\n\nAdd Record\n\n\nAdd Records\n\n\nUpdate Record\n\n\nUpdate Records\n\n\nDelete Records\n\n\nUpdate Status\n\n\nUpdate Statuses\n\n\nUpdate Assignees\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnection\n\n\nConnection\n\n\nyes\n\n\nThe connection module of this SDK.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInit bulk request module\n\n\n Source code \n\n\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet myDomainName: String = {your_domain}\nlet appId = 1\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(myDomainName, auth)\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n\n\n\n\n\nMethods\n\n\n\n\nAll below methods (excluded \nexecute()\n method) will add request to queue, you must execute the \nexecute()\n function to get result of BulkRequest.\n\n\n\n\naddRecord(app, record)\n\n\nParameter\n\n\nSee at \nRecord - addRecord\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nadd Record\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create add data\nvar record: [String: FieldValue] = [:]\nlet fv = FieldValue()\nfv.setType(FieldType.SINGLE_LINE_TEXT)\nfv.setValue(\"test\")\nrecord[\"FieldCode1\"] = fv\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: BulkRequestResponse? = nil\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(appId, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\naddRecords(app, records)\n\n\nParameter\n\n\nSee at \nRecord - addRecords\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nadd multiple Records\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecords(appId, addData)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nupdateRecordByID(app, id, record, revision)\n\n\nParameter\n\n\nSee at \nRecord - updateRecordByID\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nupdate Record By ID\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create update data\nvar updateData:Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update\")\nupdateData[{your_field_code}] = field\n\n// execute update record API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nvar response: BulkRequestResponse? = nil\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordByID(appID, updRecID, updateData , nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nupdateRecordByUpdateKey(app, updateKey, record, revision)\n\n\nParameter\n\n\nSee at \nRecord - updateRecordByUpdateKey\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nupdate Record By UpdateKey\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create update data\nvar updateData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update For Key\")\nupdateData[{your_field_code}] = field\n\n// create update key\nlet updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\")\n\n// execute update record API\nlet appID: Int = {your_app_id}\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordByUpdateKey(appID, updKey, updateData, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nupdateRecords(app, records)\n\n\nParameter\n\n\nSee at \nRecord - updateRecords\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nupdate multiple Records\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecords(appID, updateItemList)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\ndeleteRecords(app, ids)\n\n\nParameter\n\n\nSee at \nRecord - deleteRecords\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nBulk Delete Records\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nlet delRecordID1: Int = {your_record_id1}\nlet delRecordID2: Int = {your_record_id2}\nlet delIdList = [delRecordID1, delRecordID2]\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.deleteRecords(appID, delIdList)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\ndeleteRecordsWithRevision(app, idsWithRevision)\n\n\nParameter\n\n\nSee at \nRecord - deleteRecordsWithRevision\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\ndelete Records With Revision\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nvar delIdAndRevision: Dictionary<Int, Int> = [:]\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.deleteRecordsWithRevision(appID, delIdAndRevision)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nupdateRecordAssignees(app, record, assignees, revision)\n\n\nParameter\n\n\nSee at \nRecord - updateRecordAssignees\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nUpdate the Assignees for the record\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute update assignees API\nlet appID: Int = {your_app_od}\nlet updRecID: Int = {your_record_id}\nlet assignees: [String] = [\"{your_user_code}\"]\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordAssignees(appID, updRecID, assignees, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nupdateRecordStatus(app, id, action, assignee, revision)\n\n\nParameter\n\n\nSee at \nRecord - updateRecordStatus\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nUpdate the status of a single record\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nlet assignee: String? = \"{your_user_code}\"\nlet status: String = \"{your_status}\"\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordStatus(appID, updRecID, status, assignee, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nupdateRecordsStatus(app, records)\n\n\nParameter\n\n\nSee at \nRecord - updateRecordsStatus\n\n\nReturn\n\n\nBulkRequest\n\n\nSample code\n\n\n\n\nUpdate the status of multiple records in bulk\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID1: Int = {your_record_id1}\nlet updRecID2: Int = {your_record_id2}\nlet assignees1: String? = {your_login_code1}\nlet assignees2: String? = {your_login_code2}\nlet status1: String? = {your_update_status1}\nlet status2: String? = {your_update_status2}\nlet item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil)\nlet item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil)\nlet itemList = [item1, item2]\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordsStatus(appID, itemList)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nexecute()\n\n\n\n\nExecute the bulk request and get data response\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBulkRequestResponse\n\n\nSample code\n\n\n\n\nExecute bulk request\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.addRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.updateRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.deleteRecords(/*[Args]*/)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\nReference\n\n\n\n\nGet Record\n \non developer network",
            "title": "Bulk Request"
        },
        {
            "location": "/reference/bulk-request/#bulkrequest",
            "text": "The Bulk Request API allows multiple API requests to run on multiple kintone apps. The below API can be used with the Bulk Request API:   Add Record  Add Records  Update Record  Update Records  Delete Records  Update Status  Update Statuses  Update Assignees",
            "title": "BulkRequest"
        },
        {
            "location": "/reference/bulk-request/#constructor",
            "text": "",
            "title": "Constructor"
        },
        {
            "location": "/reference/bulk-request/#parameter",
            "text": "Name  Type  Required  Description      connection  Connection  yes  The connection module of this SDK.",
            "title": "Parameter"
        },
        {
            "location": "/reference/bulk-request/#sample-code",
            "text": "Init bulk request module   Source code   let username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet myDomainName: String = {your_domain}\nlet appId = 1\n\n// Init authenticationAuth\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\n// Init Connection without \"guest space ID\"\nlet connection = Connection(myDomainName, auth)\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#methods",
            "text": "All below methods (excluded  execute()  method) will add request to queue, you must execute the  execute()  function to get result of BulkRequest.",
            "title": "Methods"
        },
        {
            "location": "/reference/bulk-request/#addrecordapp-record",
            "text": "Parameter  See at  Record - addRecord  Return  BulkRequest",
            "title": "addRecord(app, record)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_1",
            "text": "add Record   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create add data\nvar record: [String: FieldValue] = [:]\nlet fv = FieldValue()\nfv.setType(FieldType.SINGLE_LINE_TEXT)\nfv.setValue(\"test\")\nrecord[\"FieldCode1\"] = fv\n\n// execute add record API\nlet appID: Int = {your_app_id}\nvar response: BulkRequestResponse? = nil\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(appId, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#addrecordsapp-records",
            "text": "Parameter  See at  Record - addRecords  Return  BulkRequest",
            "title": "addRecords(app, records)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_2",
            "text": "add multiple Records   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create add data\nvar addData1: Dictionary<String, FieldValue> = [:]\nvar addData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Value1\")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Value2\")\naddData1[{your_field_code}] = field1\naddData2[{your_field_code}] = field2\nvar addDataList = [addData1, addData2]\n\n// execute add records API\nlet appID: Int = 311\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecords(appId, addData)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#updaterecordbyidapp-id-record-revision",
            "text": "Parameter  See at  Record - updateRecordByID  Return  BulkRequest",
            "title": "updateRecordByID(app, id, record, revision)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_3",
            "text": "update Record By ID   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create update data\nvar updateData:Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update\")\nupdateData[{your_field_code}] = field\n\n// execute update record API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nvar response: BulkRequestResponse? = nil\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordByID(appID, updRecID, updateData , nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#updaterecordbyupdatekeyapp-updatekey-record-revision",
            "text": "Parameter  See at  Record - updateRecordByUpdateKey  Return  BulkRequest",
            "title": "updateRecordByUpdateKey(app, updateKey, record, revision)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_4",
            "text": "update Record By UpdateKey   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create update data\nvar updateData: Dictionary<String, FieldValue> = [:]\nvar field = FieldValue()\nfield.setType(FieldType.SINGLE_LINE_TEXT)\nfield.setValue(\"Test Value Update For Key\")\nupdateData[{your_field_code}] = field\n\n// create update key\nlet updKey = RecordUpdateKey(\"{your_field_code}\", \"update key value\")\n\n// execute update record API\nlet appID: Int = {your_app_id}\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordByUpdateKey(appID, updKey, updateData, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#updaterecordsapp-records",
            "text": "Parameter  See at  Record - updateRecords  Return  BulkRequest",
            "title": "updateRecords(app, records)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_5",
            "text": "update multiple Records   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// create update data\nvar recId1: Int = {your_record_id}\nvar recId2: Int = {your_record_id}\nvar updateData1: Dictionary<String, FieldValue> = [:]\nvar updateData2: Dictionary<String, FieldValue> = [:]\nvar field1 = FieldValue()\nvar field2 = FieldValue()\nfield1.setType(FieldType.SINGLE_LINE_TEXT)\nfield1.setValue(\"Test Update Value1 \")\nfield2.setType(FieldType.SINGLE_LINE_TEXT)\nfield2.setValue(\"Test Update Value2\")\nupdateData1[{your_field_code}] = field1\nupdateData2[{your_field_code}] = field2\nvar updateDataItem1 = RecordUpdateItem(recId1, nil, nil, updateData1)\nvar updateDataItem2 = RecordUpdateItem(recId2, nil, nil, updateData2)\nlet updateItemList = [updateDataItem1 , updateDataItem2]\n\n// execute update records API\nlet appID: Int = {your_app_id}\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecords(appID, updateItemList)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#deleterecordsapp-ids",
            "text": "Parameter  See at  Record - deleteRecords  Return  BulkRequest",
            "title": "deleteRecords(app, ids)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_6",
            "text": "Bulk Delete Records   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nlet delRecordID1: Int = {your_record_id1}\nlet delRecordID2: Int = {your_record_id2}\nlet delIdList = [delRecordID1, delRecordID2]\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.deleteRecords(appID, delIdList)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#deleterecordswithrevisionapp-idswithrevision",
            "text": "Parameter  See at  Record - deleteRecordsWithRevision  Return  BulkRequest",
            "title": "deleteRecordsWithRevision(app, idsWithRevision)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_7",
            "text": "delete Records With Revision   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute delete record API\nlet appID: Int = {your_app_id}\nvar delIdAndRevision: Dictionary<Int, Int> = [:]\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\ndelIdAndRevision[{your_record_id}] = {your_revision_id}\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.deleteRecordsWithRevision(appID, delIdAndRevision)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#updaterecordassigneesapp-record-assignees-revision",
            "text": "Parameter  See at  Record - updateRecordAssignees  Return  BulkRequest",
            "title": "updateRecordAssignees(app, record, assignees, revision)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_8",
            "text": "Update the Assignees for the record   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute update assignees API\nlet appID: Int = {your_app_od}\nlet updRecID: Int = {your_record_id}\nlet assignees: [String] = [\"{your_user_code}\"]\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordAssignees(appID, updRecID, assignees, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#updaterecordstatusapp-id-action-assignee-revision",
            "text": "Parameter  See at  Record - updateRecordStatus  Return  BulkRequest",
            "title": "updateRecordStatus(app, id, action, assignee, revision)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_9",
            "text": "Update the status of a single record   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID: Int = {your_record_id}\nlet assignee: String? = \"{your_user_code}\"\nlet status: String = \"{your_status}\"\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordStatus(appID, updRecID, status, assignee, nil)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#updaterecordsstatusapp-records",
            "text": "Parameter  See at  Record - updateRecordsStatus  Return  BulkRequest",
            "title": "updateRecordsStatus(app, records)"
        },
        {
            "location": "/reference/bulk-request/#sample-code_10",
            "text": "Update the status of multiple records in bulk   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\n// execute update status API\nlet appID: Int = {your_app_id}\nlet updRecID1: Int = {your_record_id1}\nlet updRecID2: Int = {your_record_id2}\nlet assignees1: String? = {your_login_code1}\nlet assignees2: String? = {your_login_code2}\nlet status1: String? = {your_update_status1}\nlet status2: String? = {your_update_status2}\nlet item1 = RecordUpdateStatusItem(status1, assignees1, updRecID1, nil)\nlet item2 = RecordUpdateStatusItem(status2, assignees2, updRecID2, nil)\nlet itemList = [item1, item2]\n\nvar response: BulkRequestResponse? = nil\n\ndo {\n    bulkRequestManager = try bulkRequestManager.updateRecordsStatus(appID, itemList)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#execute",
            "text": "Execute the bulk request and get data response   Parameter  (none)  Return  BulkRequestResponse",
            "title": "execute()"
        },
        {
            "location": "/reference/bulk-request/#sample-code_11",
            "text": "Execute bulk request   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.addRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.updateRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.deleteRecords(/*[Args]*/)\n    response = try bulkRequestManager.execute()\n} catch  {\n    // Handle error\n}",
            "title": "Sample code"
        },
        {
            "location": "/reference/bulk-request/#reference",
            "text": "Get Record   on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/bulk-request-model/",
            "text": "Bulk Request Model\n\n\nStore a list of requests and responses for a bulk request.\n\n\nBulkRequestModel\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\naddRequest(bulkRequestItem)\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbulkRequestItem\n\n\nBulkRequestItem\n\n\nThe BulkRequest Item.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nadd Request\n\n\n Source code \n\n\nBulkRequestModel bulkRequestModel = new BulkRequestModel();\n\nInteger appID = 1;\n\nHashMap<String, FieldValue> record = new HashMap<String, FieldValue>();\nFieldValue fv = new FieldValue();\nfv.setType(\"SINGLE_LINE_TEXT\");\nfv.setValue(\"test_value\");\nrecord.put(\"sample_FieldCode\", fv);\n\nAddRecordRequest addRecordRequest = new AddRecordRequest(appID, record);\nBulkRequestItem bulkRequestItem = new BulkRequestItem(\"POST\", \"/k/v1/record.json\", addRecordRequest);\n\nbulkRequestModel.addRequest(bulkRequestItem);\n\n\n\n\n\n\nBulkRequestItem\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\nString\n\n\nThe API method name.\n\n\n\n\n\n\napi\n\n\nString\n\n\nThe path of the API.\n\n\n\n\n\n\npayload\n\n\nAny\n\n\nThe parameters to be passed onto the API.Contents and formats will change depending on the API.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInit Bulk Request Item\n\n\n Source code \n\n\n\nInteger appID = 1;\n\nHashMap<String, FieldValue> record = new HashMap<String, FieldValue>();\nFieldValue fv = new FieldValue();\nfv.setType(\"SINGLE_LINE_TEXT\");\nfv.setValue(\"test_value\");\nrecord.put(\"sample_FieldCode\", fv);\n\nAddRecordRequest addRecordRequest = new AddRecordRequest(appID, record);\nBulkRequestItem bulkRequestItem = new BulkRequestItem(\"POST\", \"/k/v1/record.json\", addRecordRequest);\n\n\n\n\n\n\nBulkRequestResponse\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nMethods\n\n\ngetResults()\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<Any>?\n\n\nSample code\n\n\n\n\nget Results\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.addRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.updateRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.deleteRecords(/*[Args]*/)\n    response = try bulkRequestManager.execute()\n    let results = response.getResults()\n} catch  {\n    // Handle error\n}",
            "title": "Bulk Request Model"
        },
        {
            "location": "/reference/bulk-request-model/#bulk-request-model",
            "text": "Store a list of requests and responses for a bulk request.",
            "title": "Bulk Request Model"
        },
        {
            "location": "/reference/bulk-request-model/#bulkrequestmodel",
            "text": "",
            "title": "BulkRequestModel"
        },
        {
            "location": "/reference/bulk-request-model/#constructor",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/bulk-request-model/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/bulk-request-model/#addrequestbulkrequestitem",
            "text": "Parameter     Name  Type  Description      bulkRequestItem  BulkRequestItem  The BulkRequest Item.     Return  (none)  Sample code   add Request   Source code   BulkRequestModel bulkRequestModel = new BulkRequestModel();\n\nInteger appID = 1;\n\nHashMap<String, FieldValue> record = new HashMap<String, FieldValue>();\nFieldValue fv = new FieldValue();\nfv.setType(\"SINGLE_LINE_TEXT\");\nfv.setValue(\"test_value\");\nrecord.put(\"sample_FieldCode\", fv);\n\nAddRecordRequest addRecordRequest = new AddRecordRequest(appID, record);\nBulkRequestItem bulkRequestItem = new BulkRequestItem(\"POST\", \"/k/v1/record.json\", addRecordRequest);\n\nbulkRequestModel.addRequest(bulkRequestItem);",
            "title": "addRequest(bulkRequestItem)"
        },
        {
            "location": "/reference/bulk-request-model/#bulkrequestitem",
            "text": "",
            "title": "BulkRequestItem"
        },
        {
            "location": "/reference/bulk-request-model/#constructor_1",
            "text": "Parameter     Name  Type  Description      method  String  The API method name.    api  String  The path of the API.    payload  Any  The parameters to be passed onto the API.Contents and formats will change depending on the API.     Sample code   Init Bulk Request Item   Source code   \nInteger appID = 1;\n\nHashMap<String, FieldValue> record = new HashMap<String, FieldValue>();\nFieldValue fv = new FieldValue();\nfv.setType(\"SINGLE_LINE_TEXT\");\nfv.setValue(\"test_value\");\nrecord.put(\"sample_FieldCode\", fv);\n\nAddRecordRequest addRecordRequest = new AddRecordRequest(appID, record);\nBulkRequestItem bulkRequestItem = new BulkRequestItem(\"POST\", \"/k/v1/record.json\", addRecordRequest);",
            "title": "Constructor"
        },
        {
            "location": "/reference/bulk-request-model/#bulkrequestresponse",
            "text": "",
            "title": "BulkRequestResponse"
        },
        {
            "location": "/reference/bulk-request-model/#constructor_2",
            "text": "Parameter  (none)",
            "title": "Constructor"
        },
        {
            "location": "/reference/bulk-request-model/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/bulk-request-model/#getresults",
            "text": "Parameter  (none)  Return  Array<Any>?  Sample code   get Results   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.addRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.updateRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.deleteRecords(/*[Args]*/)\n    response = try bulkRequestManager.execute()\n    let results = response.getResults()\n} catch  {\n    // Handle error\n}",
            "title": "getResults()"
        },
        {
            "location": "/reference/app/",
            "text": "App\n\n\nGets general information of an App, including the name, description, related Space, creator and updater information.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnection\n\n\nConnection\n\n\nyes\n\n\nThe connection module of this SDK.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInit app module\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = \"sample.cybozu.com\"\nlet connection = Connection(myDomainName, kintoneAuth)\n\n// Init App Module\nlet app = App(connection)\n\n\n\n\n\n\nMethods\n\n\ngetApp(appId)\n\n\n\n\nGet single app\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappId\n\n\nInt?\n\n\nyes\n\n\nThe kintone app ID\n\n\n\n\n\n\n\n\nReturn\n\n\nAppModel\n\n\nSample code\n\n\n\n\nget App\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id}\ndo {\n    let response = try app.getApp(appId)\n    print(\"appId : \\(response.getAppId()!)\")\n    print(\"spaceId : \\(response.getSpaceId())\" )\n    print(\"threadId : \\(response.getThreadId())\" )\n    print(\"name : \\(response.getName()!)\")\n    print(\"description : \\(response.getDescription()!)\")\n    print(\"----------------\")\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n    // Handle another error\n}\n\n\n\n\n\n\ngetApps(offset, limit)\n\n\n\n\nGet multiple apps\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noffset\n\n\nInt?\n\n\n(optional)\n\n\nThe offset off data result\n\n\n\n\n\n\nlimit\n\n\nInt?\n\n\n(optional)\n\n\nThe limit number of result\n\n\n\n\n\n\n\n\nReturn\n\n\nArray<\nAppModel\n>\n\n\nSample code\n\n\n\n\nGet Apps\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\ndo {\n    let apps = try app.getApps()\n    var count = 1\n    for appInfo in apps {\n        print(\"App[\\(count)] : \");\n        print(\"appId : \\(appInfo.getAppId()!)\")\n        print(\"spaceId : \\(appInfo.getSpaceId())\" )\n        print(\"threadId : \\(appInfo.getThreadId())\" )\n        print(\"name : \\(appInfo.getName()!)\")\n        print(\"description : \\(appInfo.getDescription()!)\")\n        print(\"----------------\")\n        count = count + 1\n    }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n    // Handle another error\n}\n\n\n\n\n\n\ngetAppsByIDs(ids, offset, limit)\n\n\n\n\nGet multiple apps by list of ids\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nids\n\n\nArray<Int>?\n\n\nyes\n\n\nThe array of app ids\n\n\n\n\n\n\noffset\n\n\nInt?\n\n\n(optional)\n\n\nThe offset off data result\n\n\n\n\n\n\nlimit\n\n\nInt?\n\n\n(optional)\n\n\nThe limit number of result\n\n\n\n\n\n\n\n\nReturn\n\n\nArray<\nAppModel\n>\n\n\nSample code\n\n\n\n\nget Apps By IDs\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nvar appIds: [Int] = [{your_app_id}, {your_app_id}]\nlet limit: Int = {your_limit}\nlet offset : Int = {your_offset}\n\ndo {\n   let apps = try app.getAppsByIDs(appIds, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n    // Handle another error \n}\n\n\n\n\n\n\ngetAppsByCodes(codes, offset, limit)\n\n\n\n\nGet multiple apps by a list of codes\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncodes\n\n\nArray<String>?\n\n\nyes\n\n\nThe array of app codes\n\n\n\n\n\n\noffset\n\n\nInt?\n\n\n(optional)\n\n\nThe offset off data result\n\n\n\n\n\n\nlimit\n\n\nInt?\n\n\n(optional)\n\n\nThe limit number of result\n\n\n\n\n\n\n\n\nReturn\n\n\nArray<\nAppModel\n>\n\n\nSample code\n\n\n\n\nget Apps By Codes\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nvar appCode: [String] = [{your_app_code}, {your_app_code}]\nlet limit: Int = {your_limit}\nlet offset: Int = {your_offset}\n\ndo {\n   let apps = try app.getAppsByCodes(appCode, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"appCode : \\(appInfo.getCode()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error         \n}\n\n\n\n\n\n\ngetAppsByName(name, offset, limit)\n\n\n\n\nGet multiple apps by name\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nyes\n\n\nThe app name\n\n\n\n\n\n\noffset\n\n\nInt\n\n\n(optional)\n\n\nThe offset off data result\n\n\n\n\n\n\nlimit\n\n\nInt\n\n\n(optional)\n\n\nThe limit number of result\n\n\n\n\n\n\n\n\nReturn\n\n\nArray<\nAppModel\n>\n\n\nSample code\n\n\n\n\nget Apps By Name\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appName: String = {your_app_name}\nlet limit: Int = {your_limit}\nlet offset: Int = {your_offset}\n\ndo {\n   let apps = try app.getAppsByName(appName, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"appCode : \\(appInfo.getCode()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error          \n}\n\n\n\n\n\n\ngetAppsBySpaceIDs(spaceIds, offset, limit)\n\n\n\n\nGet multiple apps by list of space's ids\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nspaceIds\n\n\nArray<Int>?\n\n\nyes\n\n\nThe array of space ids\n\n\n\n\n\n\noffset\n\n\nInt\n\n\n(optional)\n\n\nThe offset off data result\n\n\n\n\n\n\nlimit\n\n\nInt\n\n\n(optional)\n\n\nThe limit number of result\n\n\n\n\n\n\n\n\nReturn\n\n\nArray<\nAppModel\n>\n\n\nSample code\n\n\n\n\nget Apps By Space IDs\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet spaceIds: [Int] = [{your_space_id}, {your_space_id}]\nlet limit = {your_litmit}\nlet offset = {your_offset}\n\ndo {\n   let apps = try app.getAppsBySpaceIDs(spaceIds, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\naddPreviewApp(name, space, thread)\n\n\n\n\nCreates a preview App. \n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString?\n\n\nyes\n\n\nThe App name. The maximum length is 64 characters.\n\n\n\n\n\n\nspace\n\n\nInt?\n\n\n(optional)\n\n\nThe Space ID of where the App will be created.\n\n\n\n\n\n\nthread\n\n\nInt?\n\n\n(optional)\n\n\nThe Thread ID of the thread in the Space where the App will be created.\n\n\n\n\n\n\n\n\nReturn\n\n\nAddPreviewAppResponse\n\n\nSample code\n\n\n\n\nCreates a preview App.\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appName: String = {your_app_name}\nlet spaceId = {your_space_id} // Space will add this app\nlet threadId = {your_thread_id} // Thread will add this app\n\ndo {\n   var addPreviewRespones: AddPreviewAppResponse? = nil\n   addPreviewRespones = try app.addPreviewApp(appName, spaceId, threadId)\n   print(addPreviewRespones?.getApp())\n   print(addPreviewRespones?.getRevision())\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\ndeployAppSettings(name, space, thread)\n\n\n\n\nUpdates the settings of a pre-live App to the live App. \n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napps\n\n\nArray<\nAddPreviewAppResponse\n>?\n\n\nyes\n\n\nThe list of Apps to deploy the pre-live settings to the live Apps.\n\n\n\n\n\n\nrevert\n\n\nBool?\n\n\n(optional)\n\n\nThe flag that indicate whether to cancel all changes made to the pre-live settings.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nUpdates the settings of a pre-live App to the live App.\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id}\nlet revision: Int = {your_revision} // Revision of application to deploy\nlet appPreview: AddPreviewAppResponse? = AddPreviewAppResponse(appId, revision)\n\ndo {\n   try app.deployAppSettings([appPreview!], false)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\ngetAppDeployStatus(apps)\n\n\n\n\nGets the deployment status of the App settings for multiple Apps.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napps\n\n\nArray\n?\n\n\nyes\n\n\nThe list of Apps to check the deploy statuses of. The Maximum limit is 300.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nGets the deployment status of the App settings for multiple Apps.\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appIds: [Int] = [{your_app_id}, {your_app_id}]\ndo {\n    var deployStatusReponse: GetAppDeployStatusResponse? = nil\n    deployStatusReponse = try app.getAppDeployStatus(appIds)\n    let listAppsDeployStatus = deployStatusReponse?.getApps()\n    for appDeployStatus in listAppsDeployStatus! {\n        print(appDeployStatus.getApp())\n        print(appDeployStatus.getStatus())\n    }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\ngetFormFields(appId, lang, isPreview)\n\n\n\n\nGet field of form in kintone app\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappId\n\n\nInt\n\n\nyes\n\n\nThe app ID\n\n\n\n\n\n\nlang\n\n\nLanguageSetting\n\n\n(optional)\n\n\nThe language code. Support: \nDEFAULT: Default language setting of system \nJA: Japanese language setting\nZH: Chinese language setting\nEN: English language setting\n\n\n\n\n\n\nisPreview\n\n\nBool?\n\n\n(optional)\n\n\nGet the app form fields with a \npre-live settings\n.\n\n\n\n\n\n\n\n\nReturn\n\n\nFormFields\n\n\nSample code\n\n\n\n\nget FormFields\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\nlet lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA\n\ndo {\n    let resp = try app.getFormFields(appId, lang)\n    print(resp) // FormFields Object\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n// Get a pre-live (preview) form fields\nlet appId: Int = {your_app_id} // Integer\nlet lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA\nlet isPreview: Bool = true\n\ndo {\n    let resp = try app.getFormFields(appId, lang, isPreview)\n    print(resp) // FormFields Object\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\naddFormFields(app, fields, revision)\n\n\n\n\nAdds fields to a form of an App. \n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt?\n\n\nyes\n\n\nThe app ID\n\n\n\n\n\n\nfields\n\n\nDictionary<String, \nField\n>?\n\n\nyes\n\n\nThe formFields which will add to form of kintone app\n\n\n\n\n\n\nrevision\n\n\nInt?\n\n\n(optional)\n\n\nrevision number of the settings that will be deployed.\n\n\n\n\n\n\nReturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasicResponse\n\n\nSample code\n\n\n\n\nAdds fields to a form of an App. \n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // App Id\nlet fieldCode: String = {field_code_string} // Field code of new Field. It must be not as same as any fields in Pre-Live App Setttings\nlet revision: Int = {latest_revision_of_the_settings} // Integer\n\n// Create Radio field instance and set properties\nlet addNewField = RadioButtonField(fieldCode)\nvar optionArray = [String: OptionData]()\noptionArray[\"1\"] = OptionData(\"1\",\"1\")\noptionArray[\"2\"] = OptionData(\"2\",\"2\")\noptionArray[\"3\"] = OptionData(\"3\",\"3\")\naddNewField.setOptions(optionArray)\naddNewField.setNoLabel(false)\naddNewField.setRequired(true)\naddNewField.setLabel(\"Label Radio\")\naddNewField.setAlign(AlignLayout.VERTICAL)\n\n// Add Field object into dictionary with key is Field Code\nvar properties = [String: Field]()\nproperties[fieldCode] = addNewField\n// Another add field here\n\ndo {\n    let response_add = try app.addFormFields(appId, properties, revision)\n    print(response_add) // BasicResponse { revision : <String> }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\nupdateFormFields(app, fields, revision)\n\n\n\n\nUpdates the field settings of fields in a form of an App.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt?\n\n\nyes\n\n\nThe app ID\n\n\n\n\n\n\nfields\n\n\nDictionary<String, \nField\n>?\n\n\nyes\n\n\nThe formFields which will update\n\n\n\n\n\n\nrevision\n\n\nInt?\n\n\n(optional)\n\n\nrevision number of the settings that will be deployed.\n\n\n\n\n\n\nReturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasicResponse\n\n\nSample code\n\n\n\n\nUpdates the field settings of fields in a form of an App.\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\nlet fieldCode: String = {field_code_string} // String | fieldCode of exist fields in Pre-Live App Setttings\nlet revision: Int = {latest_revision_of_the_settings} // Integer\n\n// Create Field Object to Update\nlet updateField = SingleLineTextField(fieldCode)\nupdateField.setDefaultValue(\"Hello Kintone\")\nupdateField.setRequired(true)\n\n// Add Update Field object into dictionary with key is Field Code\nvar properties = [String: Field]()\nproperties[fieldCode] = updateField\n\ndo {\n    let response_update = try app?.updateFormFields(appId, properties, revision)\n    print(response_update) // BasicResponse { revision : <String> }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\ndeleteFormFields(app, fields, revision)\n\n\n\n\nDeletes fields from a form of an App.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt?\n\n\nyes\n\n\nThe app ID\n\n\n\n\n\n\nfields\n\n\nArray\n?\n\n\nyes\n\n\nThe list of field codes of the fields to delete. Up to 100 field codes can be specified.\n\n\n\n\n\n\nrevision\n\n\nInt?\n\n\n(optional)\n\n\nrevision number of the settings that will be deployed.\n\n\n\n\n\n\n\n\nReturn\n\n\nBasicResponse\n\n\nSample code\n\n\n\n\nDeletes fields from a form of an App.\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\nlet fieldCodeArray: [String] = [{field_code_string}] // Array<String> | Array of fieldCodes of exist fields in Pre-Live App Setttings\nlet revision: Int = {latest_revision_of_the_settings} // Integer\n\ndo {\n    let response_delete = try app.deleteFormFields(appId, fieldCodeArray, revision)\n    print(response_delete) // BasicResponse { revision : <String> }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\ngetFormLayout(appId, isPreview)\n\n\n\n\nGet layout of form in kintone app\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappId\n\n\nInt?\n\n\nyes\n\n\nThe kintone app id\n\n\n\n\n\n\nisPreview\n\n\nBool?\n\n\n(optional)\n\n\nGet the app form layout with a \npre-live settings\n.\n\n\n\n\n\n\n\n\nReturn\n\n\nFormLayout\n\n\nSample code\n\n\n\n\nget FormLayout\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\n// Get a pre-live (preview) form fields\nlet appId: Int = {your_app_id}\nlet isPreview: Bool = true\n\ndo {\n   // Get form layout by app id\n   let response_layout = try app.getFormLayout(appId, isPreview)\n   print(response_layout.getLayout()!)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error \n}\n\n\n\n\n\n\nupdateFormLayout(app, layout, revision)\n\n\n\n\nUpdates the field layout info of a form in an App. \n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt?\n\n\nyes\n\n\nThe kintone app id\n\n\n\n\n\n\nlayout\n\n\nArray<\nItemLayout\n>\n\n\nyes\n\n\nA list of field layouts for each row.\n\n\n\n\n\n\nrevision\n\n\nInt?\n\n\n(optional)\n\n\nrevision number of the settings that will be deployed.\n\n\n\n\n\n\n\n\nReturn\n\n\nBasicResponse\n\n\nSample code\n\n\n\n\nget FormLayout\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\ndo {\n  let response = try app.getFormLayout(appId)\n  let response_layout = response.getLayout()!\n  let update_itemlayout = response_layout[0]\n  if update_itemlayout.getType() == LayoutType.ROW {\n    let rowLayout = update_itemlayout as! RowLayout\n    let firstFields = rowLayout.getFields()![0]\n    firstFields.getSize()!.setWidth(\"90\")\n  }\n  let response_update_layout = try app.updateFormLayout(appId, response_layout)\n  print(response_update_layout)\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\ngetGeneralSettings(app, lang, isPreview)\n\n\n\n\nGets the description, name, icon, revision and color theme of an App.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt?\n\n\nyes\n\n\nThe app ID\n\n\n\n\n\n\nlang\n\n\nLanguageSetting\n\n\n(optional)\n\n\nThe language code. Support: \nDEFAULT: Default language setting of system \nJA: Japanese language setting\nZH: Chinese language setting\nEN: English language setting\n\n\n\n\n\n\nisPreview\n\n\nBool?\n\n\n(optional)\n\n\nGet the app form fields with a \npre-live settings\n.\n\n\n\n\n\n\n\n\nReturn\n\n\nGeneralSettings\n\n\nSample code\n\n\n\n\nDeletes fields from a form of an App.\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId = {your_app_id}\n\ndo {\n   let response = try app.getGeneralSettings(appId)\n   print(response)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n// Get a pre-live (preview) general settings\nlet appId = {your_app_id}\nlet lang = {your_language_code} // LanguageSetting( EN | JA | ZH ). Ex: LanguageSetting.JA\nlet isPreview = true\ndo {\n   let response = try app.getGeneralSettings(appId, lang, isPreview)\n   print(response)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\nupdateGeneralSettings(app, GeneralSettings, revision)\n\n\n\n\nUpdates the field layout info of a form in an App. \n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt?\n\n\nyes\n\n\nThe kintone app id\n\n\n\n\n\n\ngeneralSettings\n\n\nGeneralSettings\n\n\n(Conditional)\n\n\nThe description, name, icon, revision and color theme of an App.\n\n\n\n\n\n\nrevision\n\n\nInt?\n\n\n(optional)\n\n\nrevision number of the settings that will be deployed.\n\n\n\n\n\n\n\n\nReturn\n\n\nBasicResponse\n\n\nSample code\n\n\n\n\nget FormLayout\n\n\n Source code \n\n\n// Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id}\nlet revision: Int = {latest_revision_id} // default: -1\ndo {\n   let generalSetting = try app.getGeneralSettings(appId)\n   generalSetting.setDescription(\"Test preview app description\")\n\n// Update current general settings\n   let response = try app.updateGeneralSettings(appId, generalSetting, revision)\n   print(response)\n   // After using this API, use the Deploy App Settings API to deploy the settings to the live App.\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n\n\n\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "App"
        },
        {
            "location": "/reference/app/#app",
            "text": "Gets general information of an App, including the name, description, related Space, creator and updater information.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "App"
        },
        {
            "location": "/reference/app/#constructor",
            "text": "",
            "title": "Constructor"
        },
        {
            "location": "/reference/app/#parameter",
            "text": "Name  Type  Required  Description      connection  Connection  yes  The connection module of this SDK.",
            "title": "Parameter"
        },
        {
            "location": "/reference/app/#sample-code",
            "text": "Init app module   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet kintoneAuth = Auth()\nkintoneAuth.setPasswordAuth(username, password)\n\nlet myDomainName: String = \"sample.cybozu.com\"\nlet connection = Connection(myDomainName, kintoneAuth)\n\n// Init App Module\nlet app = App(connection)",
            "title": "Sample code"
        },
        {
            "location": "/reference/app/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app/#getappappid",
            "text": "Get single app",
            "title": "getApp(appId)"
        },
        {
            "location": "/reference/app/#parameter_1",
            "text": "Name  Type  Required  Description      appId  Int?  yes  The kintone app ID     Return  AppModel  Sample code   get App   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id}\ndo {\n    let response = try app.getApp(appId)\n    print(\"appId : \\(response.getAppId()!)\")\n    print(\"spaceId : \\(response.getSpaceId())\" )\n    print(\"threadId : \\(response.getThreadId())\" )\n    print(\"name : \\(response.getName()!)\")\n    print(\"description : \\(response.getDescription()!)\")\n    print(\"----------------\")\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n    // Handle another error\n}",
            "title": "Parameter"
        },
        {
            "location": "/reference/app/#getappsoffset-limit",
            "text": "Get multiple apps   Parameter     Name  Type  Required  Description      offset  Int?  (optional)  The offset off data result    limit  Int?  (optional)  The limit number of result     Return  Array< AppModel >  Sample code   Get Apps   Source code   // Init App Module\nlet app = App(connection)\n\ndo {\n    let apps = try app.getApps()\n    var count = 1\n    for appInfo in apps {\n        print(\"App[\\(count)] : \");\n        print(\"appId : \\(appInfo.getAppId()!)\")\n        print(\"spaceId : \\(appInfo.getSpaceId())\" )\n        print(\"threadId : \\(appInfo.getThreadId())\" )\n        print(\"name : \\(appInfo.getName()!)\")\n        print(\"description : \\(appInfo.getDescription()!)\")\n        print(\"----------------\")\n        count = count + 1\n    }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n    // Handle another error\n}",
            "title": "getApps(offset, limit)"
        },
        {
            "location": "/reference/app/#getappsbyidsids-offset-limit",
            "text": "Get multiple apps by list of ids   Parameter     Name  Type  Required  Description      ids  Array<Int>?  yes  The array of app ids    offset  Int?  (optional)  The offset off data result    limit  Int?  (optional)  The limit number of result     Return  Array< AppModel >  Sample code   get Apps By IDs   Source code   // Init App Module\nlet app = App(connection)\n\nvar appIds: [Int] = [{your_app_id}, {your_app_id}]\nlet limit: Int = {your_limit}\nlet offset : Int = {your_offset}\n\ndo {\n   let apps = try app.getAppsByIDs(appIds, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n    // Handle another error \n}",
            "title": "getAppsByIDs(ids, offset, limit)"
        },
        {
            "location": "/reference/app/#getappsbycodescodes-offset-limit",
            "text": "Get multiple apps by a list of codes   Parameter     Name  Type  Required  Description      codes  Array<String>?  yes  The array of app codes    offset  Int?  (optional)  The offset off data result    limit  Int?  (optional)  The limit number of result     Return  Array< AppModel >  Sample code   get Apps By Codes   Source code   // Init App Module\nlet app = App(connection)\n\nvar appCode: [String] = [{your_app_code}, {your_app_code}]\nlet limit: Int = {your_limit}\nlet offset: Int = {your_offset}\n\ndo {\n   let apps = try app.getAppsByCodes(appCode, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"appCode : \\(appInfo.getCode()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error         \n}",
            "title": "getAppsByCodes(codes, offset, limit)"
        },
        {
            "location": "/reference/app/#getappsbynamename-offset-limit",
            "text": "Get multiple apps by name   Parameter     Name  Type  Required  Description      name  String  yes  The app name    offset  Int  (optional)  The offset off data result    limit  Int  (optional)  The limit number of result     Return  Array< AppModel >  Sample code   get Apps By Name   Source code   // Init App Module\nlet app = App(connection)\n\nlet appName: String = {your_app_name}\nlet limit: Int = {your_limit}\nlet offset: Int = {your_offset}\n\ndo {\n   let apps = try app.getAppsByName(appName, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"appCode : \\(appInfo.getCode()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error          \n}",
            "title": "getAppsByName(name, offset, limit)"
        },
        {
            "location": "/reference/app/#getappsbyspaceidsspaceids-offset-limit",
            "text": "Get multiple apps by list of space's ids   Parameter     Name  Type  Required  Description      spaceIds  Array<Int>?  yes  The array of space ids    offset  Int  (optional)  The offset off data result    limit  Int  (optional)  The limit number of result     Return  Array< AppModel >  Sample code   get Apps By Space IDs   Source code   // Init App Module\nlet app = App(connection)\n\nlet spaceIds: [Int] = [{your_space_id}, {your_space_id}]\nlet limit = {your_litmit}\nlet offset = {your_offset}\n\ndo {\n   let apps = try app.getAppsBySpaceIDs(spaceIds, offset, limit)\n   var count = 1\n   for appInfo in apps {\n      print(\"App[\\(count)] : \");\n      print(\"appId : \\(appInfo.getAppId()!)\")\n      print(\"spaceId : \\(appInfo.getSpaceId())\" )\n      print(\"threadId : \\(appInfo.getThreadId())\" )\n      print(\"name : \\(appInfo.getName()!)\")\n      print(\"description : \\(appInfo.getDescription()!)\")\n      print(\"----------------\")\n      count = count + 1\n   }\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "getAppsBySpaceIDs(spaceIds, offset, limit)"
        },
        {
            "location": "/reference/app/#addpreviewappname-space-thread",
            "text": "Creates a preview App.",
            "title": "addPreviewApp(name, space, thread)"
        },
        {
            "location": "/reference/app/#parameter_2",
            "text": "Name  Type  Required  Description      name  String?  yes  The App name. The maximum length is 64 characters.    space  Int?  (optional)  The Space ID of where the App will be created.    thread  Int?  (optional)  The Thread ID of the thread in the Space where the App will be created.     Return  AddPreviewAppResponse  Sample code   Creates a preview App.   Source code   // Init App Module\nlet app = App(connection)\n\nlet appName: String = {your_app_name}\nlet spaceId = {your_space_id} // Space will add this app\nlet threadId = {your_thread_id} // Thread will add this app\n\ndo {\n   var addPreviewRespones: AddPreviewAppResponse? = nil\n   addPreviewRespones = try app.addPreviewApp(appName, spaceId, threadId)\n   print(addPreviewRespones?.getApp())\n   print(addPreviewRespones?.getRevision())\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "Parameter"
        },
        {
            "location": "/reference/app/#deployappsettingsname-space-thread",
            "text": "Updates the settings of a pre-live App to the live App.",
            "title": "deployAppSettings(name, space, thread)"
        },
        {
            "location": "/reference/app/#parameter_3",
            "text": "Name  Type  Required  Description      apps  Array< AddPreviewAppResponse >?  yes  The list of Apps to deploy the pre-live settings to the live Apps.    revert  Bool?  (optional)  The flag that indicate whether to cancel all changes made to the pre-live settings.     Return  (none)  Sample code   Updates the settings of a pre-live App to the live App.   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id}\nlet revision: Int = {your_revision} // Revision of application to deploy\nlet appPreview: AddPreviewAppResponse? = AddPreviewAppResponse(appId, revision)\n\ndo {\n   try app.deployAppSettings([appPreview!], false)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "Parameter"
        },
        {
            "location": "/reference/app/#getappdeploystatusapps",
            "text": "Gets the deployment status of the App settings for multiple Apps.",
            "title": "getAppDeployStatus(apps)"
        },
        {
            "location": "/reference/app/#parameter_4",
            "text": "Name  Type  Required  Description      apps  Array ?  yes  The list of Apps to check the deploy statuses of. The Maximum limit is 300.     Return  (none)  Sample code   Gets the deployment status of the App settings for multiple Apps.   Source code   // Init App Module\nlet app = App(connection)\n\nlet appIds: [Int] = [{your_app_id}, {your_app_id}]\ndo {\n    var deployStatusReponse: GetAppDeployStatusResponse? = nil\n    deployStatusReponse = try app.getAppDeployStatus(appIds)\n    let listAppsDeployStatus = deployStatusReponse?.getApps()\n    for appDeployStatus in listAppsDeployStatus! {\n        print(appDeployStatus.getApp())\n        print(appDeployStatus.getStatus())\n    }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "Parameter"
        },
        {
            "location": "/reference/app/#getformfieldsappid-lang-ispreview",
            "text": "Get field of form in kintone app   Parameter     Name  Type  Required  Description      appId  Int  yes  The app ID    lang  LanguageSetting  (optional)  The language code. Support:  DEFAULT: Default language setting of system  JA: Japanese language setting ZH: Chinese language setting EN: English language setting    isPreview  Bool?  (optional)  Get the app form fields with a  pre-live settings .     Return  FormFields  Sample code   get FormFields   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\nlet lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA\n\ndo {\n    let resp = try app.getFormFields(appId, lang)\n    print(resp) // FormFields Object\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n// Get a pre-live (preview) form fields\nlet appId: Int = {your_app_id} // Integer\nlet lang: LanguageSetting = {language_code} // LanguageSetting .Ex: LanguageSetting.JA\nlet isPreview: Bool = true\n\ndo {\n    let resp = try app.getFormFields(appId, lang, isPreview)\n    print(resp) // FormFields Object\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "getFormFields(appId, lang, isPreview)"
        },
        {
            "location": "/reference/app/#addformfieldsapp-fields-revision",
            "text": "Adds fields to a form of an App.    Parameter     Name  Type  Required  Description      app  Int?  yes  The app ID    fields  Dictionary<String,  Field >?  yes  The formFields which will add to form of kintone app    revision  Int?  (optional)  revision number of the settings that will be deployed.    Return        BasicResponse  Sample code   Adds fields to a form of an App.    Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // App Id\nlet fieldCode: String = {field_code_string} // Field code of new Field. It must be not as same as any fields in Pre-Live App Setttings\nlet revision: Int = {latest_revision_of_the_settings} // Integer\n\n// Create Radio field instance and set properties\nlet addNewField = RadioButtonField(fieldCode)\nvar optionArray = [String: OptionData]()\noptionArray[\"1\"] = OptionData(\"1\",\"1\")\noptionArray[\"2\"] = OptionData(\"2\",\"2\")\noptionArray[\"3\"] = OptionData(\"3\",\"3\")\naddNewField.setOptions(optionArray)\naddNewField.setNoLabel(false)\naddNewField.setRequired(true)\naddNewField.setLabel(\"Label Radio\")\naddNewField.setAlign(AlignLayout.VERTICAL)\n\n// Add Field object into dictionary with key is Field Code\nvar properties = [String: Field]()\nproperties[fieldCode] = addNewField\n// Another add field here\n\ndo {\n    let response_add = try app.addFormFields(appId, properties, revision)\n    print(response_add) // BasicResponse { revision : <String> }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "addFormFields(app, fields, revision)"
        },
        {
            "location": "/reference/app/#updateformfieldsapp-fields-revision",
            "text": "Updates the field settings of fields in a form of an App.   Parameter     Name  Type  Required  Description      app  Int?  yes  The app ID    fields  Dictionary<String,  Field >?  yes  The formFields which will update    revision  Int?  (optional)  revision number of the settings that will be deployed.    Return        BasicResponse  Sample code   Updates the field settings of fields in a form of an App.   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\nlet fieldCode: String = {field_code_string} // String | fieldCode of exist fields in Pre-Live App Setttings\nlet revision: Int = {latest_revision_of_the_settings} // Integer\n\n// Create Field Object to Update\nlet updateField = SingleLineTextField(fieldCode)\nupdateField.setDefaultValue(\"Hello Kintone\")\nupdateField.setRequired(true)\n\n// Add Update Field object into dictionary with key is Field Code\nvar properties = [String: Field]()\nproperties[fieldCode] = updateField\n\ndo {\n    let response_update = try app?.updateFormFields(appId, properties, revision)\n    print(response_update) // BasicResponse { revision : <String> }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "updateFormFields(app, fields, revision)"
        },
        {
            "location": "/reference/app/#deleteformfieldsapp-fields-revision",
            "text": "Deletes fields from a form of an App.   Parameter     Name  Type  Required  Description      app  Int?  yes  The app ID    fields  Array ?  yes  The list of field codes of the fields to delete. Up to 100 field codes can be specified.    revision  Int?  (optional)  revision number of the settings that will be deployed.     Return  BasicResponse  Sample code   Deletes fields from a form of an App.   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\nlet fieldCodeArray: [String] = [{field_code_string}] // Array<String> | Array of fieldCodes of exist fields in Pre-Live App Setttings\nlet revision: Int = {latest_revision_of_the_settings} // Integer\n\ndo {\n    let response_delete = try app.deleteFormFields(appId, fieldCodeArray, revision)\n    print(response_delete) // BasicResponse { revision : <String> }\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "deleteFormFields(app, fields, revision)"
        },
        {
            "location": "/reference/app/#getformlayoutappid-ispreview",
            "text": "Get layout of form in kintone app   Parameter     Name  Type  Required  Description      appId  Int?  yes  The kintone app id    isPreview  Bool?  (optional)  Get the app form layout with a  pre-live settings .     Return  FormLayout  Sample code   get FormLayout   Source code   // Init App Module\nlet app = App(connection)\n\n// Get a pre-live (preview) form fields\nlet appId: Int = {your_app_id}\nlet isPreview: Bool = true\n\ndo {\n   // Get form layout by app id\n   let response_layout = try app.getFormLayout(appId, isPreview)\n   print(response_layout.getLayout()!)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error \n}",
            "title": "getFormLayout(appId, isPreview)"
        },
        {
            "location": "/reference/app/#updateformlayoutapp-layout-revision",
            "text": "Updates the field layout info of a form in an App.    Parameter     Name  Type  Required  Description      app  Int?  yes  The kintone app id    layout  Array< ItemLayout >  yes  A list of field layouts for each row.    revision  Int?  (optional)  revision number of the settings that will be deployed.     Return  BasicResponse  Sample code   get FormLayout   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id} // Integer\ndo {\n  let response = try app.getFormLayout(appId)\n  let response_layout = response.getLayout()!\n  let update_itemlayout = response_layout[0]\n  if update_itemlayout.getType() == LayoutType.ROW {\n    let rowLayout = update_itemlayout as! RowLayout\n    let firstFields = rowLayout.getFields()![0]\n    firstFields.getSize()!.setWidth(\"90\")\n  }\n  let response_update_layout = try app.updateFormLayout(appId, response_layout)\n  print(response_update_layout)\n} catch let error as KintoneAPIException {\n    print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "updateFormLayout(app, layout, revision)"
        },
        {
            "location": "/reference/app/#getgeneralsettingsapp-lang-ispreview",
            "text": "Gets the description, name, icon, revision and color theme of an App.   Parameter     Name  Type  Required  Description      app  Int?  yes  The app ID    lang  LanguageSetting  (optional)  The language code. Support:  DEFAULT: Default language setting of system  JA: Japanese language setting ZH: Chinese language setting EN: English language setting    isPreview  Bool?  (optional)  Get the app form fields with a  pre-live settings .     Return  GeneralSettings  Sample code   Deletes fields from a form of an App.   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId = {your_app_id}\n\ndo {\n   let response = try app.getGeneralSettings(appId)\n   print(response)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}\n\n// Get a pre-live (preview) general settings\nlet appId = {your_app_id}\nlet lang = {your_language_code} // LanguageSetting( EN | JA | ZH ). Ex: LanguageSetting.JA\nlet isPreview = true\ndo {\n   let response = try app.getGeneralSettings(appId, lang, isPreview)\n   print(response)\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "getGeneralSettings(app, lang, isPreview)"
        },
        {
            "location": "/reference/app/#updategeneralsettingsapp-generalsettings-revision",
            "text": "Updates the field layout info of a form in an App.    Parameter     Name  Type  Required  Description      app  Int?  yes  The kintone app id    generalSettings  GeneralSettings  (Conditional)  The description, name, icon, revision and color theme of an App.    revision  Int?  (optional)  revision number of the settings that will be deployed.     Return  BasicResponse  Sample code   get FormLayout   Source code   // Init App Module\nlet app = App(connection)\n\nlet appId: Int = {your_app_id}\nlet revision: Int = {latest_revision_id} // default: -1\ndo {\n   let generalSetting = try app.getGeneralSettings(appId)\n   generalSetting.setDescription(\"Test preview app description\")\n\n// Update current general settings\n   let response = try app.updateGeneralSettings(appId, generalSetting, revision)\n   print(response)\n   // After using this API, use the Deploy App Settings API to deploy the settings to the live App.\n} catch let error as KintoneAPIException {\n   print(error.getErrorResponse()!.getMessage()!)\n} catch {\n   // Handle another error\n}",
            "title": "updateGeneralSettings(app, GeneralSettings, revision)"
        },
        {
            "location": "/reference/app/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/app-model/",
            "text": "AppModel\n\n\nAppModel\n\n\nGets the basic information about the app.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n(none)\n\n\nSample code\n\n\n\n\nInit App Model\n\n\n Source code \n\n\nlet appModel = AppModel()\n\n\n\n\n\n\nMethods\n\n\ngetAppId()\n\n\n\n\nGet the appId\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget App Id\n\n\n Source code \n\n\nlet appId = appModel.getAppId()\n\n\n\n\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nlet code = appModel.getCode()\n\n\n\n\n\n\ngetName()\n\n\n\n\nGet the name\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget Name\n\n\n Source code \n\n\nlet name = appModel.getName()\n\n\n\n\n\n\ngetDescription()\n\n\n\n\nGet the description\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget Description\n\n\n Source code \n\n\nlet description = appModel.getDescription()\n\n\n\n\n\n\ngetSpaceId()\n\n\n\n\nGet the spaceId\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget Space Id\n\n\n Source code \n\n\nlet spaceId = appModel.getSpaceId()\n\n\n\n\n\n\ngetThreadId()\n\n\n\n\nGet the threadId\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget Thread Id\n\n\n Source code \n\n\nlet threadId = appModel.getThreadId()\n\n\n\n\n\n\ngetCreator()\n\n\n\n\nGet the creator\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nMember\n?\n\n\nSample code\n\n\n\n\nget Creator\n\n\n Source code \n\n\nlet member = appModel.getCreator()\n\n\n\n\n\n\ngetModifier()\n\n\n\n\nGet the modifier\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nMember\n?\n\n\nSample code\n\n\n\n\nget Modifier\n\n\n Source code \n\n\nlet member = appModel.getModifier()\n\n\n\n\n\n\ngetCreatedAt()\n\n\n\n\nGet the createdAt\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget Create Date\n\n\n Source code \n\n\nlet date = appModel.getCreatedAt()\n\n\n\n\n\n\ngetModifiedAt()\n\n\n\n\nGet the modifiedAt\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget Modified Date\n\n\n Source code \n\n\nlet date = appModel.getModifiedAt()\n\n\n\n\n\n\nAppDeployStatus\n\n\nGets the basic information about the app.\n\n\n\n\n\n\nThe status of the deployment of App settings.\n\n\n\n\n\n\nConstants\n\n\nStatus\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nvalue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPROCESSING\n\n\nString\n\n\nPROCESSING\n\n\nThe App settings are being deployed.\n\n\n\n\n\n\nSUCCESS\n\n\nString\n\n\nSUCCESS\n\n\nThe App settings have been deployed.\n\n\n\n\n\n\nFAIL\n\n\nString\n\n\nFAIL\n\n\nAn error occurred, and the deployment of App settings failed.\n\n\n\n\n\n\nCANCEL\n\n\nString\n\n\nCANCEL\n\n\nThe deployment of App settings was canceled, due to the deployment of other App settings failing.\n\n\n\n\n\n\n\n\nMethods\n\n\ngetApp()\n\n\n\n\nGet the appId\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget App Id\n\n\n Source code \n\n\nlet appId: Int? = appDeployStatus.getApp()\n\n\n\n\n\n\nsetApp(app)\n\n\n\n\nSet the appId\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp\n\n\nInt?\n\n\nThe kintone app ID\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset App Id\n\n\n Source code \n\n\nappDeployStatus.setApp({app_id})\n\n\n\n\n\n\ngetStatus()\n\n\n\n\nGet the status of the deployment of App settings.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nAppDeployStatus.Status\n?\n\n\nSample code\n\n\n\n\nget status\n\n\n Source code \n\n\nlet status = appDeployStatus.getStatus()\n\n\n\n\n\n\nsetStatus(status)\n\n\n\n\nSet the status of the deployment of App settings.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nAppDeployStatus.Status\n\n\nThe kintone app ID\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the status\n\n\n Source code \n\n\nappDeployStatus.setStatus(AppDeployStatus.Status.FAIL)",
            "title": "App Model"
        },
        {
            "location": "/reference/app-model/#appmodel",
            "text": "",
            "title": "AppModel"
        },
        {
            "location": "/reference/app-model/#appmodel_1",
            "text": "Gets the basic information about the app.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "AppModel"
        },
        {
            "location": "/reference/app-model/#constructor",
            "text": "",
            "title": "Constructor"
        },
        {
            "location": "/reference/app-model/#parameter",
            "text": "(none)",
            "title": "Parameter"
        },
        {
            "location": "/reference/app-model/#sample-code",
            "text": "Init App Model   Source code   let appModel = AppModel()",
            "title": "Sample code"
        },
        {
            "location": "/reference/app-model/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-model/#getappid",
            "text": "Get the appId   Parameter  (none)  Return  Int?  Sample code   get App Id   Source code   let appId = appModel.getAppId()",
            "title": "getAppId()"
        },
        {
            "location": "/reference/app-model/#getcode",
            "text": "Get the code   Parameter  (none)  Return  String?  Sample code   get Code   Source code   let code = appModel.getCode()",
            "title": "getCode()"
        },
        {
            "location": "/reference/app-model/#getname",
            "text": "Get the name   Parameter  (none)  Return  String?  Sample code   get Name   Source code   let name = appModel.getName()",
            "title": "getName()"
        },
        {
            "location": "/reference/app-model/#getdescription",
            "text": "Get the description   Parameter  (none)  Return  String?  Sample code   get Description   Source code   let description = appModel.getDescription()",
            "title": "getDescription()"
        },
        {
            "location": "/reference/app-model/#getspaceid",
            "text": "Get the spaceId   Parameter  (none)  Return  Int?  Sample code   get Space Id   Source code   let spaceId = appModel.getSpaceId()",
            "title": "getSpaceId()"
        },
        {
            "location": "/reference/app-model/#getthreadid",
            "text": "Get the threadId   Parameter  (none)  Return  Int?  Sample code   get Thread Id   Source code   let threadId = appModel.getThreadId()",
            "title": "getThreadId()"
        },
        {
            "location": "/reference/app-model/#getcreator",
            "text": "Get the creator   Parameter  (none)  Return  Member ?  Sample code   get Creator   Source code   let member = appModel.getCreator()",
            "title": "getCreator()"
        },
        {
            "location": "/reference/app-model/#getmodifier",
            "text": "Get the modifier   Parameter  (none)  Return  Member ?  Sample code   get Modifier   Source code   let member = appModel.getModifier()",
            "title": "getModifier()"
        },
        {
            "location": "/reference/app-model/#getcreatedat",
            "text": "Get the createdAt   Parameter  (none)  Return  String?  Sample code   get Create Date   Source code   let date = appModel.getCreatedAt()",
            "title": "getCreatedAt()"
        },
        {
            "location": "/reference/app-model/#getmodifiedat",
            "text": "Get the modifiedAt   Parameter  (none)  Return  String?  Sample code   get Modified Date   Source code   let date = appModel.getModifiedAt()",
            "title": "getModifiedAt()"
        },
        {
            "location": "/reference/app-model/#appdeploystatus",
            "text": "Gets the basic information about the app.    The status of the deployment of App settings.",
            "title": "AppDeployStatus"
        },
        {
            "location": "/reference/app-model/#constants",
            "text": "",
            "title": "Constants"
        },
        {
            "location": "/reference/app-model/#status",
            "text": "Name  Type  value  Description      PROCESSING  String  PROCESSING  The App settings are being deployed.    SUCCESS  String  SUCCESS  The App settings have been deployed.    FAIL  String  FAIL  An error occurred, and the deployment of App settings failed.    CANCEL  String  CANCEL  The deployment of App settings was canceled, due to the deployment of other App settings failing.",
            "title": "Status"
        },
        {
            "location": "/reference/app-model/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-model/#getapp",
            "text": "Get the appId   Parameter  (none)  Return  Int?  Sample code   get App Id   Source code   let appId: Int? = appDeployStatus.getApp()",
            "title": "getApp()"
        },
        {
            "location": "/reference/app-model/#setappapp",
            "text": "Set the appId   Parameter     Name  Type  Description      app  Int?  The kintone app ID     Return  (none)  Sample code   set App Id   Source code   appDeployStatus.setApp({app_id})",
            "title": "setApp(app)"
        },
        {
            "location": "/reference/app-model/#getstatus",
            "text": "Get the status of the deployment of App settings.   Parameter  (none)  Return  AppDeployStatus.Status ?  Sample code   get status   Source code   let status = appDeployStatus.getStatus()",
            "title": "getStatus()"
        },
        {
            "location": "/reference/app-model/#setstatusstatus",
            "text": "Set the status of the deployment of App settings.   Parameter     Name  Type  Description      status  AppDeployStatus.Status  The kintone app ID     Return  (none)  Sample code   set the status   Source code   appDeployStatus.setStatus(AppDeployStatus.Status.FAIL)",
            "title": "setStatus(status)"
        },
        {
            "location": "/reference/app-response/",
            "text": "Response\n\n\nGeneral record response, using for data response from the kintone app\n\n\nBasicResponse\n\n\nMethods\n\n\ngetRevision()\n\n\n\n\nGet a revision number\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget a revision number\n\n\n Source code \n\n\nlet revision: Int? = basicResponse.getRevision()\n\n\n\n\n\n\nAddPreviewAppResponse\n\n\nMethods\n\n\ngetApp()\n\n\n\n\nGet the App ID of the created preview App\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nGet the App ID\n\n\n Source code \n\n\nlet appID: Int? = addPreviewAppResponse.getApp()\n\n\n\n\n\n\ngetRevision()\n\n\n\n\nGet a revision number\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget a revision number\n\n\n Source code \n\n\nlet revision: Int? = addPreviewAppResponse.getRevision()\n\n\n\n\n\n\nGetViewsResponse\n\n\nMethods\n\n\ngetViews()\n\n\n\n\nGet the View information\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nDictionary< String, \nViewModel\n>?\n\n\nSample code\n\n\n\n\nget the View information\n\n\n Source code \n\n\nlet views: [String: ViewModel]? = getViewResponse.getViews()\n\n\n\n\n\n\ngetRevision()\n\n\n\n\nGet a revision number\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget a revision number\n\n\n Source code \n\n\nlet revision: Int? = getViewsResponse.getRevision()\n\n\n\n\n\n\nUpdateViewsResponse\n\n\nMethods\n\n\ngetViews()\n\n\n\n\nGet the View information\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nDictionary< String, \nViewModel\n>?\n\n\nSample code\n\n\n\n\nget the View information\n\n\n Source code \n\n\nlet views: [String: ViewModel]? = updateViewsResponse.getViews()\n\n\n\n\n\n\ngetRevision()\n\n\n\n\nGet a revision number\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget a revision number\n\n\n Source code \n\n\nlet revision: Int? = updateViewsResponse.getRevision()\n\n\n\n\n\n\nGetAppDeployStatusResponse\n\n\nMethods\n\n\ngetApps()\n\n\n\n\nGet the list of objects with data of deploy statuses.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<\nAppModel\n>?\n\n\nSample code\n\n\n\n\nget the list of objects with data of deploy statuses\n\n\n Source code \n\n\nlet apps: [AppDeployStatus]? = getAppDeployStatusResponse.getApps()\n\n\n\n\n\n\nGetAppsResponse\n\n\nMethods\n\n\ngetApps()\n\n\n\n\nGet the list of App Info.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<\nAppDeployStatus\n>?\n\n\nSample code\n\n\n\n\nget the list of App Info\n\n\n Source code \n\n\nlet apps: [AppModel]? = getAppsResponse.getApps()",
            "title": "Response"
        },
        {
            "location": "/reference/app-response/#response",
            "text": "General record response, using for data response from the kintone app",
            "title": "Response"
        },
        {
            "location": "/reference/app-response/#basicresponse",
            "text": "",
            "title": "BasicResponse"
        },
        {
            "location": "/reference/app-response/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-response/#getrevision",
            "text": "Get a revision number   Parameter  (none)  Return  Int?  Sample code   get a revision number   Source code   let revision: Int? = basicResponse.getRevision()",
            "title": "getRevision()"
        },
        {
            "location": "/reference/app-response/#addpreviewappresponse",
            "text": "",
            "title": "AddPreviewAppResponse"
        },
        {
            "location": "/reference/app-response/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-response/#getapp",
            "text": "Get the App ID of the created preview App   Parameter  (none)  Return  Int?  Sample code   Get the App ID   Source code   let appID: Int? = addPreviewAppResponse.getApp()",
            "title": "getApp()"
        },
        {
            "location": "/reference/app-response/#getrevision_1",
            "text": "Get a revision number   Parameter  (none)  Return  Int?  Sample code   get a revision number   Source code   let revision: Int? = addPreviewAppResponse.getRevision()",
            "title": "getRevision()"
        },
        {
            "location": "/reference/app-response/#getviewsresponse",
            "text": "",
            "title": "GetViewsResponse"
        },
        {
            "location": "/reference/app-response/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-response/#getviews",
            "text": "Get the View information   Parameter  (none)  Return  Dictionary< String,  ViewModel >?  Sample code   get the View information   Source code   let views: [String: ViewModel]? = getViewResponse.getViews()",
            "title": "getViews()"
        },
        {
            "location": "/reference/app-response/#getrevision_2",
            "text": "Get a revision number   Parameter  (none)  Return  Int?  Sample code   get a revision number   Source code   let revision: Int? = getViewsResponse.getRevision()",
            "title": "getRevision()"
        },
        {
            "location": "/reference/app-response/#updateviewsresponse",
            "text": "",
            "title": "UpdateViewsResponse"
        },
        {
            "location": "/reference/app-response/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-response/#getviews_1",
            "text": "Get the View information   Parameter  (none)  Return  Dictionary< String,  ViewModel >?  Sample code   get the View information   Source code   let views: [String: ViewModel]? = updateViewsResponse.getViews()",
            "title": "getViews()"
        },
        {
            "location": "/reference/app-response/#getrevision_3",
            "text": "Get a revision number   Parameter  (none)  Return  Int?  Sample code   get a revision number   Source code   let revision: Int? = updateViewsResponse.getRevision()",
            "title": "getRevision()"
        },
        {
            "location": "/reference/app-response/#getappdeploystatusresponse",
            "text": "",
            "title": "GetAppDeployStatusResponse"
        },
        {
            "location": "/reference/app-response/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-response/#getapps",
            "text": "Get the list of objects with data of deploy statuses.   Parameter  (none)  Return  Array< AppModel >?  Sample code   get the list of objects with data of deploy statuses   Source code   let apps: [AppDeployStatus]? = getAppDeployStatusResponse.getApps()",
            "title": "getApps()"
        },
        {
            "location": "/reference/app-response/#getappsresponse",
            "text": "",
            "title": "GetAppsResponse"
        },
        {
            "location": "/reference/app-response/#methods_5",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-response/#getapps_1",
            "text": "Get the list of App Info.   Parameter  (none)  Return  Array< AppDeployStatus >?  Sample code   get the list of App Info   Source code   let apps: [AppModel]? = getAppsResponse.getApps()",
            "title": "getApps()"
        },
        {
            "location": "/reference/app-form/",
            "text": "Form Fields\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nFormFields\n\n\nMethods\n\n\ngetApp()\n\n\n\n\nGet the app\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget App\n\n\n Source code \n\n\nInteger app = formfields.getApp();\n\n\n\n\n\n\ngetRevision()\n\n\n\n\nGet the revision\n\n\n\n\nParameter \n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Revision\n\n\n Source code \n\n\nInteger revision = formfields.getRevision();\n\n\n\n\n\n\ngetProperties()\n\n\n\n\nGet the properties\n\n\n\n\nParameter \n\n\n(none)\n\n\nReturn\n\n\nMap<String, \nField\n>\n\n\nSample code\n\n\n\n\nget Properties\n\n\n Source code \n\n\nMap<String, Field> properties = formfields.getProperties();\n\n\n\n\n\n\nFieldGroup\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetLabel()\n\n\n\n\nGet the label\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Label\n\n\n Source code \n\n\nString label = fieldGroup.getLabel();\n\n\n\n\n\n\ngetNoLabel()\n\n\n\n\nGet the noLabel\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget NoLabel\n\n\n Source code \n\n\nBoolean noLabel = fieldGroup.getNoLabel();\n\n\n\n\n\n\ngetOpenGroup()\n\n\n\n\nGet the openGroup\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget OpenGroup\n\n\n Source code \n\n\nBoolean openGroup = fieldGroup.getOpenGroup();\n\n\n\n\n\n\nFieldMapping\n\n\nMethods\n\n\ngetField()\n\n\n\n\nGet the field\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Field\n\n\n Source code \n\n\nString field = fieldMapping.getField();\n\n\n\n\n\n\ngetRelatedFields()\n\n\n\n\nGet the relatedFields\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Related Fields\n\n\n Source code \n\n\nString relatedFields = fieldMapping.getRelatedFields();\n\n\n\n\n\n\nSubTableField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nField\n\"\n\n\n\n\n\n\nMethods\n\n\n\n\ngetFields()\n\n\n\n\nGet the fields\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nMap<String, \nAbstractInputField\n>\n\n\nSample code\n\n\n\n\nget Fields\n\n\n Source code \n\n\n Map<String, AbstractInputField> fields = subTableField.getFields();\n\n\n\n\n\n\nField\n\n\n\n\nWarning\n\n\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\ngetType()\n\n\n\n\nGet the type\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nLayoutType\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Form"
        },
        {
            "location": "/reference/app-form/#form-fields",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Form Fields"
        },
        {
            "location": "/reference/app-form/#formfields",
            "text": "",
            "title": "FormFields"
        },
        {
            "location": "/reference/app-form/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-form/#getapp",
            "text": "Get the app   Parameter  (none)  Return  Integer  Sample code   get App   Source code   Integer app = formfields.getApp();",
            "title": "getApp()"
        },
        {
            "location": "/reference/app-form/#getrevision",
            "text": "Get the revision   Parameter   (none)  Return  Integer  Sample code   get Revision   Source code   Integer revision = formfields.getRevision();",
            "title": "getRevision()"
        },
        {
            "location": "/reference/app-form/#getproperties",
            "text": "Get the properties   Parameter   (none)  Return  Map<String,  Field >  Sample code   get Properties   Source code   Map<String, Field> properties = formfields.getProperties();",
            "title": "getProperties()"
        },
        {
            "location": "/reference/app-form/#fieldgroup",
            "text": "Warning   extend the abstract class  \" Field \"",
            "title": "FieldGroup"
        },
        {
            "location": "/reference/app-form/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-form/#getlabel",
            "text": "Get the label   Parameter  (none)  Return  String  Sample code   get Label   Source code   String label = fieldGroup.getLabel();",
            "title": "getLabel()"
        },
        {
            "location": "/reference/app-form/#getnolabel",
            "text": "Get the noLabel   Parameter  (none)  Return  Boolean  Sample code   get NoLabel   Source code   Boolean noLabel = fieldGroup.getNoLabel();",
            "title": "getNoLabel()"
        },
        {
            "location": "/reference/app-form/#getopengroup",
            "text": "Get the openGroup   Parameter  (none)  Return  Boolean  Sample code   get OpenGroup   Source code   Boolean openGroup = fieldGroup.getOpenGroup();",
            "title": "getOpenGroup()"
        },
        {
            "location": "/reference/app-form/#fieldmapping",
            "text": "",
            "title": "FieldMapping"
        },
        {
            "location": "/reference/app-form/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-form/#getfield",
            "text": "Get the field   Parameter  (none)  Return  String  Sample code   get Field   Source code   String field = fieldMapping.getField();",
            "title": "getField()"
        },
        {
            "location": "/reference/app-form/#getrelatedfields",
            "text": "Get the relatedFields   Parameter  (none)  Return  String  Sample code   get Related Fields   Source code   String relatedFields = fieldMapping.getRelatedFields();",
            "title": "getRelatedFields()"
        },
        {
            "location": "/reference/app-form/#subtablefield",
            "text": "Warning   extend the abstract class  \" Field \"",
            "title": "SubTableField"
        },
        {
            "location": "/reference/app-form/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-form/#getfields",
            "text": "Get the fields   Parameter  (none)  Return  Map<String,  AbstractInputField >  Sample code   get Fields   Source code    Map<String, AbstractInputField> fields = subTableField.getFields();",
            "title": "getFields()"
        },
        {
            "location": "/reference/app-form/#field",
            "text": "Warning   This class is an abstract class.",
            "title": "Field"
        },
        {
            "location": "/reference/app-form/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-form/#getcode",
            "text": "Get the code   Parameter  (none)  Return  String",
            "title": "getCode()"
        },
        {
            "location": "/reference/app-form/#gettype",
            "text": "Get the type   Parameter  (none)  Return  LayoutType",
            "title": "getType()"
        },
        {
            "location": "/reference/app-form/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields/",
            "text": "Form Fields\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nFormFields\n\n\nMethods\n\n\ngetApp()\n\n\n\n\nGet the app\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget App\n\n\n Source code \n\n\nInteger app = formfields.getApp();\n\n\n\n\n\n\ngetRevision()\n\n\n\n\nGet the revision\n\n\n\n\nParameter \n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Revision\n\n\n Source code \n\n\nInteger revision = formfields.getRevision();\n\n\n\n\n\n\ngetProperties()\n\n\n\n\nGet the properties\n\n\n\n\nParameter \n\n\n(none)\n\n\nReturn\n\n\nMap<String, \nField\n>\n\n\nSample code\n\n\n\n\nget Properties\n\n\n Source code \n\n\nMap<String, Field> properties = formfields.getProperties();\n\n\n\n\n\n\nFieldGroup\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetLabel()\n\n\n\n\nGet the label\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Label\n\n\n Source code \n\n\nString label = fieldGroup.getLabel();\n\n\n\n\n\n\ngetNoLabel()\n\n\n\n\nGet the noLabel\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget NoLabel\n\n\n Source code \n\n\nBoolean noLabel = fieldGroup.getNoLabel();\n\n\n\n\n\n\ngetOpenGroup()\n\n\n\n\nGet the openGroup\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget OpenGroup\n\n\n Source code \n\n\nBoolean openGroup = fieldGroup.getOpenGroup();\n\n\n\n\n\n\nFieldMapping\n\n\nMethods\n\n\ngetField()\n\n\n\n\nGet the field\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Field\n\n\n Source code \n\n\nString field = fieldMapping.getField();\n\n\n\n\n\n\ngetRelatedFields()\n\n\n\n\nGet the relatedFields\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Related Fields\n\n\n Source code \n\n\nString relatedFields = fieldMapping.getRelatedFields();\n\n\n\n\n\n\nSubTableField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nField\n\"\n\n\n\n\n\n\nMethods\n\n\n\n\ngetFields()\n\n\n\n\nGet the fields\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nMap<String, \nAbstractInputField\n>\n\n\nSample code\n\n\n\n\nget Fields\n\n\n Source code \n\n\n Map<String, AbstractInputField> fields = subTableField.getFields();\n\n\n\n\n\n\nField\n\n\n\n\nWarning\n\n\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\ngetType()\n\n\n\n\nGet the type\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nLayoutType\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Form fields"
        },
        {
            "location": "/reference/form-fields/#form-fields",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Form Fields"
        },
        {
            "location": "/reference/form-fields/#formfields",
            "text": "",
            "title": "FormFields"
        },
        {
            "location": "/reference/form-fields/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields/#getapp",
            "text": "Get the app   Parameter  (none)  Return  Integer  Sample code   get App   Source code   Integer app = formfields.getApp();",
            "title": "getApp()"
        },
        {
            "location": "/reference/form-fields/#getrevision",
            "text": "Get the revision   Parameter   (none)  Return  Integer  Sample code   get Revision   Source code   Integer revision = formfields.getRevision();",
            "title": "getRevision()"
        },
        {
            "location": "/reference/form-fields/#getproperties",
            "text": "Get the properties   Parameter   (none)  Return  Map<String,  Field >  Sample code   get Properties   Source code   Map<String, Field> properties = formfields.getProperties();",
            "title": "getProperties()"
        },
        {
            "location": "/reference/form-fields/#fieldgroup",
            "text": "Warning   extend the abstract class  \" Field \"",
            "title": "FieldGroup"
        },
        {
            "location": "/reference/form-fields/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields/#getlabel",
            "text": "Get the label   Parameter  (none)  Return  String  Sample code   get Label   Source code   String label = fieldGroup.getLabel();",
            "title": "getLabel()"
        },
        {
            "location": "/reference/form-fields/#getnolabel",
            "text": "Get the noLabel   Parameter  (none)  Return  Boolean  Sample code   get NoLabel   Source code   Boolean noLabel = fieldGroup.getNoLabel();",
            "title": "getNoLabel()"
        },
        {
            "location": "/reference/form-fields/#getopengroup",
            "text": "Get the openGroup   Parameter  (none)  Return  Boolean  Sample code   get OpenGroup   Source code   Boolean openGroup = fieldGroup.getOpenGroup();",
            "title": "getOpenGroup()"
        },
        {
            "location": "/reference/form-fields/#fieldmapping",
            "text": "",
            "title": "FieldMapping"
        },
        {
            "location": "/reference/form-fields/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields/#getfield",
            "text": "Get the field   Parameter  (none)  Return  String  Sample code   get Field   Source code   String field = fieldMapping.getField();",
            "title": "getField()"
        },
        {
            "location": "/reference/form-fields/#getrelatedfields",
            "text": "Get the relatedFields   Parameter  (none)  Return  String  Sample code   get Related Fields   Source code   String relatedFields = fieldMapping.getRelatedFields();",
            "title": "getRelatedFields()"
        },
        {
            "location": "/reference/form-fields/#subtablefield",
            "text": "Warning   extend the abstract class  \" Field \"",
            "title": "SubTableField"
        },
        {
            "location": "/reference/form-fields/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields/#getfields",
            "text": "Get the fields   Parameter  (none)  Return  Map<String,  AbstractInputField >  Sample code   get Fields   Source code    Map<String, AbstractInputField> fields = subTableField.getFields();",
            "title": "getFields()"
        },
        {
            "location": "/reference/form-fields/#field",
            "text": "Warning   This class is an abstract class.",
            "title": "Field"
        },
        {
            "location": "/reference/form-fields/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields/#getcode",
            "text": "Get the code   Parameter  (none)  Return  String",
            "title": "getCode()"
        },
        {
            "location": "/reference/form-fields/#gettype",
            "text": "Get the type   Parameter  (none)  Return  LayoutType",
            "title": "getType()"
        },
        {
            "location": "/reference/form-fields/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields-input/",
            "text": "Input\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nAttachmentField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetThumbnailSize()\n\n\n\n\nGet the thumbnailSize\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Thumbnail Size\n\n\n Source code \n\n\nInteger thumbnailSize = attachmentField.getThumbnailSize();\n\n\n\n\n\n\nCalculatedField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetExpression()\n\n\n\n\nGet the expression\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Expression\n\n\n Source code \n\n\nString expression = calculatedField.getExpression();\n\n\n\n\n\n\ngetHideExpression()\n\n\n\n\nGet the hideExpression\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Hide Expression\n\n\n Source code \n\n\nBoolean hideExpression = calculatedField.getHideExpression();\n\n\n\n\n\n\ngetDisplayScale()\n\n\n\n\nGet the displayScale\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Display Scale\n\n\n Source code \n\n\nInteger displayScale = calculatedField.getDisplayScale();\n\n\n\n\n\n\ngetUnit()\n\n\n\n\nGet the unit\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Unit\n\n\n Source code \n\n\nString unit = calculatedField.getUnit();\n\n\n\n\n\n\ngetUnitPosition()\n\n\n\n\nGet the unitPosition\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nUnitPosition\n\n\nSample code\n\n\n\n\nget Unit Position\n\n\n Source code \n\n\nUnitPosition unitPosition = calculatedField.getUnitPosition();\n\n\n\n\n\n\ngetFormat()\n\n\n\n\nGet the format\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nNumberFormat\n\n\nSample code\n\n\n\n\nget Format\n\n\n Source code \n\n\nNumberFormat format = calculatedField.getFormat();\n\n\n\n\n\n\nLinkField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = linkField.getDefaultValue();\n\n\n\n\n\n\ngetUnique()\n\n\n\n\nGet the unique\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Unique\n\n\n Source code \n\n\nBoolean unique = linkField.getUnique();\n\n\n\n\n\n\ngetMaxLength()\n\n\n\n\nGet the maxLength\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Max Length\n\n\n Source code \n\n\nInteger maxLength = linkField.getMaxLength();\n\n\n\n\n\n\ngetMinLength()\n\n\n\n\nGet the minLength\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Min Length\n\n\n Source code \n\n\nInteger minLength = linkField.getMinLength();\n\n\n\n\n\n\ngetProtocol()\n\n\n\n\nGet the protocol\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nLinkProtocol\n\n\nSample code\n\n\n\n\nget Protocol\n\n\n Source code \n\n\nLinkProtocol protocol = linkField.getProtocol();\n\n\n\n\n\n\nMultiLineTextField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = multiLineTextField.getDefaultValue();\n\n\n\n\n\n\nNumberField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetDisplayScale()\n\n\n\n\nGet the displayScale\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Display Scale\n\n\n Source code \n\n\nInteger displayScale = numberField.getDisplayScale();\n\n\n\n\n\n\ngetUnit()\n\n\n\n\nGet the unit\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Unit\n\n\n Source code \n\n\nString unit = numberField.getUnit();\n\n\n\n\n\n\ngetUnitPosition()\n\n\n\n\nGet the unitPosition\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nUnitPosition\n\n\nSample code\n\n\n\n\nget Unit Position\n\n\n Source code \n\n\nUnitPosition unitPosition = numberField.getUnitPosition();\n\n\n\n\n\n\ngetDigit()\n\n\n\n\nGet the digit\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Digit\n\n\n Source code \n\n\nBoolean digit = numberField.getDigit();\n\n\n\n\n\n\ngetMaxValue()\n\n\n\n\nGet the maxValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Max Value\n\n\n Source code \n\n\nInteger maxValue = numberField.getMaxValue();\n\n\n\n\n\n\ngetMinValue()\n\n\n\n\nGet the minValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Min Value\n\n\n Source code \n\n\nInteger minValue = numberField.getMinValue();\n\n\n\n\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = numberField.getDefaultValue();\n\n\n\n\n\n\ngetUnique()\n\n\n\n\nGet the unique\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Unique\n\n\n Source code \n\n\nBoolean unique = numberField.getUnique();\n\n\n\n\n\n\nRichTextField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = richTextField.getDefaultValue();\n\n\n\n\n\n\nSingleLineTextField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetMinLength()\n\n\n\n\nGet the minLength\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Min Length\n\n\n Source code \n\n\nInteger minLength = singleLineTextField.getMinLength();\n\n\n\n\n\n\ngetMaxLength()\n\n\n\n\nGet the maxLength\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Max Length\n\n\n Source code \n\n\nInteger maxLength = singleLineTextField.getMaxLength();\n\n\n\n\n\n\ngetExpression()\n\n\n\n\nGet the expression\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Expression\n\n\n Source code \n\n\nString expression = singleLineTextField.getExpression();\n\n\n\n\n\n\ngetHideExpression()\n\n\n\n\nGet the hideExpression\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Hide Expression\n\n\n Source code \n\n\nBoolean hideExpression = singleLineTextField.getHideExpression();\n\n\n\n\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = singleLineTextField.getDefaultValue();\n\n\n\n\n\n\ngetUnique()\n\n\n\n\nGet the unique\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Unique\n\n\n Source code \n\n\nBoolean unique = singleLineTextField.getUnique();\n\n\n\n\n\n\nAbstractInputField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nField\n\"\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetLabel()\n\n\n\n\nGet the label\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\ngetNoLabel()\n\n\n\n\nGet the noLabel\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\ngetRequired()\n\n\n\n\nGet the required\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Input"
        },
        {
            "location": "/reference/form-fields-input/#input",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Input"
        },
        {
            "location": "/reference/form-fields-input/#attachmentfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "AttachmentField"
        },
        {
            "location": "/reference/form-fields-input/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getthumbnailsize",
            "text": "Get the thumbnailSize   Parameter  (none)  Return  Integer  Sample code   get Thumbnail Size   Source code   Integer thumbnailSize = attachmentField.getThumbnailSize();",
            "title": "getThumbnailSize()"
        },
        {
            "location": "/reference/form-fields-input/#calculatedfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "CalculatedField"
        },
        {
            "location": "/reference/form-fields-input/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getexpression",
            "text": "Get the expression   Parameter  (none)  Return  String  Sample code   get Expression   Source code   String expression = calculatedField.getExpression();",
            "title": "getExpression()"
        },
        {
            "location": "/reference/form-fields-input/#gethideexpression",
            "text": "Get the hideExpression   Parameter  (none)  Return  Boolean  Sample code   get Hide Expression   Source code   Boolean hideExpression = calculatedField.getHideExpression();",
            "title": "getHideExpression()"
        },
        {
            "location": "/reference/form-fields-input/#getdisplayscale",
            "text": "Get the displayScale   Parameter  (none)  Return  Integer  Sample code   get Display Scale   Source code   Integer displayScale = calculatedField.getDisplayScale();",
            "title": "getDisplayScale()"
        },
        {
            "location": "/reference/form-fields-input/#getunit",
            "text": "Get the unit   Parameter  (none)  Return  String  Sample code   get Unit   Source code   String unit = calculatedField.getUnit();",
            "title": "getUnit()"
        },
        {
            "location": "/reference/form-fields-input/#getunitposition",
            "text": "Get the unitPosition   Parameter  (none)  Return  UnitPosition  Sample code   get Unit Position   Source code   UnitPosition unitPosition = calculatedField.getUnitPosition();",
            "title": "getUnitPosition()"
        },
        {
            "location": "/reference/form-fields-input/#getformat",
            "text": "Get the format   Parameter  (none)  Return  NumberFormat  Sample code   get Format   Source code   NumberFormat format = calculatedField.getFormat();",
            "title": "getFormat()"
        },
        {
            "location": "/reference/form-fields-input/#linkfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "LinkField"
        },
        {
            "location": "/reference/form-fields-input/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getdefaultvalue",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = linkField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input/#getunique",
            "text": "Get the unique   Parameter  (none)  Return  Boolean  Sample code   get Unique   Source code   Boolean unique = linkField.getUnique();",
            "title": "getUnique()"
        },
        {
            "location": "/reference/form-fields-input/#getmaxlength",
            "text": "Get the maxLength   Parameter  (none)  Return  Integer  Sample code   get Max Length   Source code   Integer maxLength = linkField.getMaxLength();",
            "title": "getMaxLength()"
        },
        {
            "location": "/reference/form-fields-input/#getminlength",
            "text": "Get the minLength   Parameter  (none)  Return  Integer  Sample code   get Min Length   Source code   Integer minLength = linkField.getMinLength();",
            "title": "getMinLength()"
        },
        {
            "location": "/reference/form-fields-input/#getprotocol",
            "text": "Get the protocol   Parameter  (none)  Return  LinkProtocol  Sample code   get Protocol   Source code   LinkProtocol protocol = linkField.getProtocol();",
            "title": "getProtocol()"
        },
        {
            "location": "/reference/form-fields-input/#multilinetextfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "MultiLineTextField"
        },
        {
            "location": "/reference/form-fields-input/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getdefaultvalue_1",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = multiLineTextField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input/#numberfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "NumberField"
        },
        {
            "location": "/reference/form-fields-input/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getdisplayscale_1",
            "text": "Get the displayScale   Parameter  (none)  Return  Integer  Sample code   get Display Scale   Source code   Integer displayScale = numberField.getDisplayScale();",
            "title": "getDisplayScale()"
        },
        {
            "location": "/reference/form-fields-input/#getunit_1",
            "text": "Get the unit   Parameter  (none)  Return  String  Sample code   get Unit   Source code   String unit = numberField.getUnit();",
            "title": "getUnit()"
        },
        {
            "location": "/reference/form-fields-input/#getunitposition_1",
            "text": "Get the unitPosition   Parameter  (none)  Return  UnitPosition  Sample code   get Unit Position   Source code   UnitPosition unitPosition = numberField.getUnitPosition();",
            "title": "getUnitPosition()"
        },
        {
            "location": "/reference/form-fields-input/#getdigit",
            "text": "Get the digit   Parameter  (none)  Return  Boolean  Sample code   get Digit   Source code   Boolean digit = numberField.getDigit();",
            "title": "getDigit()"
        },
        {
            "location": "/reference/form-fields-input/#getmaxvalue",
            "text": "Get the maxValue   Parameter  (none)  Return  Integer  Sample code   get Max Value   Source code   Integer maxValue = numberField.getMaxValue();",
            "title": "getMaxValue()"
        },
        {
            "location": "/reference/form-fields-input/#getminvalue",
            "text": "Get the minValue   Parameter  (none)  Return  Integer  Sample code   get Min Value   Source code   Integer minValue = numberField.getMinValue();",
            "title": "getMinValue()"
        },
        {
            "location": "/reference/form-fields-input/#getdefaultvalue_2",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = numberField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input/#getunique_1",
            "text": "Get the unique   Parameter  (none)  Return  Boolean  Sample code   get Unique   Source code   Boolean unique = numberField.getUnique();",
            "title": "getUnique()"
        },
        {
            "location": "/reference/form-fields-input/#richtextfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "RichTextField"
        },
        {
            "location": "/reference/form-fields-input/#methods_5",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getdefaultvalue_3",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = richTextField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input/#singlelinetextfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "SingleLineTextField"
        },
        {
            "location": "/reference/form-fields-input/#methods_6",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getminlength_1",
            "text": "Get the minLength   Parameter  (none)  Return  Integer  Sample code   get Min Length   Source code   Integer minLength = singleLineTextField.getMinLength();",
            "title": "getMinLength()"
        },
        {
            "location": "/reference/form-fields-input/#getmaxlength_1",
            "text": "Get the maxLength   Parameter  (none)  Return  Integer  Sample code   get Max Length   Source code   Integer maxLength = singleLineTextField.getMaxLength();",
            "title": "getMaxLength()"
        },
        {
            "location": "/reference/form-fields-input/#getexpression_1",
            "text": "Get the expression   Parameter  (none)  Return  String  Sample code   get Expression   Source code   String expression = singleLineTextField.getExpression();",
            "title": "getExpression()"
        },
        {
            "location": "/reference/form-fields-input/#gethideexpression_1",
            "text": "Get the hideExpression   Parameter  (none)  Return  Boolean  Sample code   get Hide Expression   Source code   Boolean hideExpression = singleLineTextField.getHideExpression();",
            "title": "getHideExpression()"
        },
        {
            "location": "/reference/form-fields-input/#getdefaultvalue_4",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = singleLineTextField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input/#getunique_2",
            "text": "Get the unique   Parameter  (none)  Return  Boolean  Sample code   get Unique   Source code   Boolean unique = singleLineTextField.getUnique();",
            "title": "getUnique()"
        },
        {
            "location": "/reference/form-fields-input/#abstractinputfield",
            "text": "Warning   extend the abstract class  \" Field \"  This class is an abstract class.",
            "title": "AbstractInputField"
        },
        {
            "location": "/reference/form-fields-input/#methods_7",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input/#getlabel",
            "text": "Get the label   Parameter  (none)  Return  String",
            "title": "getLabel()"
        },
        {
            "location": "/reference/form-fields-input/#getnolabel",
            "text": "Get the noLabel   Parameter  (none)  Return  Boolean",
            "title": "getNoLabel()"
        },
        {
            "location": "/reference/form-fields-input/#getrequired",
            "text": "Get the required   Parameter  (none)  Return  Boolean",
            "title": "getRequired()"
        },
        {
            "location": "/reference/form-fields-input/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields-input-lookup/",
            "text": "Lookup\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nLookupField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetLookup()\n\n\n\n\nGet the lookup\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nLookupItem\n\n\nSample code\n\n\n\n\nget Lookup\n\n\n Source code \n\n\nLookupItem lookup = lookupField.getLookup();\n\n\n\n\n\n\nLookupItem\n\n\nMethods\n\n\ngetFieldMapping()\n\n\n\n\nGet the fieldMapping\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<\nFieldMapping\n>\n\n\nSample code\n\n\n\n\nget Field Mapping\n\n\n Source code \n\n\nList<FieldMapping> fieldMapping = lookupItem.getFieldMapping();\n\n\n\n\n\n\ngetFilterCond()\n\n\n\n\nGet the filterCond\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Filter Cond\n\n\n Source code \n\n\nString filterCond = lookupItem.getFilterCond();\n\n\n\n\n\n\ngetLookupPickerFields()\n\n\n\n\nGet the lookupPickerFields\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<String>\n\n\nSample code\n\n\n\n\nget Lookup Picker Fields\n\n\n Source code \n\n\nList<String> lookupPickerFields = lookupItem.getLookupPickerFields();\n\n\n\n\n\n\ngetRelatedApp()\n\n\n\n\nGet the relatedApp\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nRelatedApp\n\n\nSample code\n\n\n\n\nget Related App\n\n\n Source code \n\n\nRelatedApp relatedApp = lookupItem.getRelatedApp();\n\n\n\n\n\n\ngetRelatedKeyField()\n\n\n\n\nGet the relatedKeyField\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Related App\n\n\n Source code \n\n\nString relatedKeyField = lookupItem.getRelatedKeyField();\n\n\n\n\n\n\ngetSort()\n\n\n\n\nGet the sort\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Sort\n\n\n Source code \n\n\nString sort = lookupItem.getSort();\n\n\n\n\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Lookup"
        },
        {
            "location": "/reference/form-fields-input-lookup/#lookup",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Lookup"
        },
        {
            "location": "/reference/form-fields-input-lookup/#lookupfield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "LookupField"
        },
        {
            "location": "/reference/form-fields-input-lookup/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-lookup/#getlookup",
            "text": "Get the lookup   Parameter  (none)  Return  LookupItem  Sample code   get Lookup   Source code   LookupItem lookup = lookupField.getLookup();",
            "title": "getLookup()"
        },
        {
            "location": "/reference/form-fields-input-lookup/#lookupitem",
            "text": "",
            "title": "LookupItem"
        },
        {
            "location": "/reference/form-fields-input-lookup/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-lookup/#getfieldmapping",
            "text": "Get the fieldMapping   Parameter  (none)  Return  List< FieldMapping >  Sample code   get Field Mapping   Source code   List<FieldMapping> fieldMapping = lookupItem.getFieldMapping();",
            "title": "getFieldMapping()"
        },
        {
            "location": "/reference/form-fields-input-lookup/#getfiltercond",
            "text": "Get the filterCond   Parameter  (none)  Return  String  Sample code   get Filter Cond   Source code   String filterCond = lookupItem.getFilterCond();",
            "title": "getFilterCond()"
        },
        {
            "location": "/reference/form-fields-input-lookup/#getlookuppickerfields",
            "text": "Get the lookupPickerFields   Parameter  (none)  Return  List<String>  Sample code   get Lookup Picker Fields   Source code   List<String> lookupPickerFields = lookupItem.getLookupPickerFields();",
            "title": "getLookupPickerFields()"
        },
        {
            "location": "/reference/form-fields-input-lookup/#getrelatedapp",
            "text": "Get the relatedApp   Parameter  (none)  Return  RelatedApp  Sample code   get Related App   Source code   RelatedApp relatedApp = lookupItem.getRelatedApp();",
            "title": "getRelatedApp()"
        },
        {
            "location": "/reference/form-fields-input-lookup/#getrelatedkeyfield",
            "text": "Get the relatedKeyField   Parameter  (none)  Return  String  Sample code   get Related App   Source code   String relatedKeyField = lookupItem.getRelatedKeyField();",
            "title": "getRelatedKeyField()"
        },
        {
            "location": "/reference/form-fields-input-lookup/#getsort",
            "text": "Get the sort   Parameter  (none)  Return  String  Sample code   get Sort   Source code   String sort = lookupItem.getSort();",
            "title": "getSort()"
        },
        {
            "location": "/reference/form-fields-input-lookup/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields-input-member/",
            "text": "Member\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nDepartmentSelectionField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractMemberSelectField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nGroupSelectionField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractMemberSelectField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nMemberSelectEntity\n\n\nMethods\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nString code = memberSelectEntity.getCode();\n\n\n\n\n\n\ngetType()\n\n\n\n\nGet the type\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nMemberSelectEntityType\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nMemberSelectEntityType type = memberSelectEntity.getType();\n\n\n\n\n\n\nUserSelectionField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractMemberSelectField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nAbstractMemberSelectField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class \"\nAbstractInputField\n\"\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<\nMemberSelectEntity\n>\n\n\ngetEntites()\n\n\n\n\nGet the entites\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<\nMemberSelectEntity\n>\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Member"
        },
        {
            "location": "/reference/form-fields-input-member/#member",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Member"
        },
        {
            "location": "/reference/form-fields-input-member/#departmentselectionfield",
            "text": "Warning   extend the abstract class  \" AbstractMemberSelectField \"",
            "title": "DepartmentSelectionField"
        },
        {
            "location": "/reference/form-fields-input-member/#methods",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-member/#groupselectionfield",
            "text": "Warning   extend the abstract class  \" AbstractMemberSelectField \"",
            "title": "GroupSelectionField"
        },
        {
            "location": "/reference/form-fields-input-member/#methods_1",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-member/#memberselectentity",
            "text": "",
            "title": "MemberSelectEntity"
        },
        {
            "location": "/reference/form-fields-input-member/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-member/#getcode",
            "text": "Get the code   Parameter  (none)  Return  String  Sample code   get Code   Source code   String code = memberSelectEntity.getCode();",
            "title": "getCode()"
        },
        {
            "location": "/reference/form-fields-input-member/#gettype",
            "text": "Get the type   Parameter  (none)  Return  MemberSelectEntityType  Sample code   get Code   Source code   MemberSelectEntityType type = memberSelectEntity.getType();",
            "title": "getType()"
        },
        {
            "location": "/reference/form-fields-input-member/#userselectionfield",
            "text": "Warning   extend the abstract class  \" AbstractMemberSelectField \"",
            "title": "UserSelectionField"
        },
        {
            "location": "/reference/form-fields-input-member/#methods_3",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-member/#abstractmemberselectfield",
            "text": "Warning   extend the abstract class \" AbstractInputField \"  This class is an abstract class.",
            "title": "AbstractMemberSelectField"
        },
        {
            "location": "/reference/form-fields-input-member/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-member/#getdefaultvalue",
            "text": "Get the defaultValue   Parameter  (none)  Return  List< MemberSelectEntity >",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-member/#getentites",
            "text": "Get the entites   Parameter  (none)  Return  List< MemberSelectEntity >",
            "title": "getEntites()"
        },
        {
            "location": "/reference/form-fields-input-member/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields-input-selection/",
            "text": "Selection\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nCheckboxField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSelectionField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetAlign()\n\n\n\n\nGet the align\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nAlignLayout\n\n\nSample code\n\n\n\n\nget Align\n\n\n Source code \n\n\nAlignLayout align = checkboxField.getAlign();\n\n\n\n\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<String>\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nList<String> defaultValue = checkboxField.getDefaultValue();\n\n\n\n\n\n\nDropDownField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSelectionField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = dropDownField.getDefaultValue();\n\n\n\n\n\n\nMultipleSelectField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSelectionField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<String>\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nList<String> defaultValue = multipleSelectField.getDefaultValue();\n\n\n\n\n\n\nOptionData\n\n\nMethods\n\n\ngetIndex()\n\n\n\n\nGet the index\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Index\n\n\n Source code \n\n\nInteger index = optionData.getIndex();\n\n\n\n\n\n\ngetLabel()\n\n\n\n\nGet the label\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Label\n\n\n Source code \n\n\nString label = optionData.getLabel();\n\n\n\n\n\n\nRadioButtonField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSelectionField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetAlign()\n\n\n\n\nGet the align\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nAlignLayout\n\n\nSample code\n\n\n\n\nget Align\n\n\n Source code \n\n\nAlignLayout align = radioButtonField.getAlign();\n\n\n\n\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = radioButtonField.getDefaultValue();\n\n\n\n\n\n\nAbstractSelectionField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class \"\nAbstractInputField\n\"\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetOptions()\n\n\n\n\nGet the options\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nMap<String, \nOptionData\n>\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Selection"
        },
        {
            "location": "/reference/form-fields-input-selection/#selection",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Selection"
        },
        {
            "location": "/reference/form-fields-input-selection/#checkboxfield",
            "text": "Warning   extend the abstract class  \" AbstractSelectionField \"",
            "title": "CheckboxField"
        },
        {
            "location": "/reference/form-fields-input-selection/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-selection/#getalign",
            "text": "Get the align   Parameter  (none)  Return  AlignLayout  Sample code   get Align   Source code   AlignLayout align = checkboxField.getAlign();",
            "title": "getAlign()"
        },
        {
            "location": "/reference/form-fields-input-selection/#getdefaultvalue",
            "text": "Get the defaultValue   Parameter  (none)  Return  List<String>  Sample code   get Default Value   Source code   List<String> defaultValue = checkboxField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-selection/#dropdownfield",
            "text": "Warning   extend the abstract class  \" AbstractSelectionField \"",
            "title": "DropDownField"
        },
        {
            "location": "/reference/form-fields-input-selection/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-selection/#getdefaultvalue_1",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = dropDownField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-selection/#multipleselectfield",
            "text": "Warning   extend the abstract class  \" AbstractSelectionField \"",
            "title": "MultipleSelectField"
        },
        {
            "location": "/reference/form-fields-input-selection/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-selection/#getdefaultvalue_2",
            "text": "Get the defaultValue   Parameter  (none)  Return  List<String>  Sample code   get Default Value   Source code   List<String> defaultValue = multipleSelectField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-selection/#optiondata",
            "text": "",
            "title": "OptionData"
        },
        {
            "location": "/reference/form-fields-input-selection/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-selection/#getindex",
            "text": "Get the index   Parameter  (none)  Return  Integer  Sample code   get Index   Source code   Integer index = optionData.getIndex();",
            "title": "getIndex()"
        },
        {
            "location": "/reference/form-fields-input-selection/#getlabel",
            "text": "Get the label   Parameter  (none)  Return  String  Sample code   get Label   Source code   String label = optionData.getLabel();",
            "title": "getLabel()"
        },
        {
            "location": "/reference/form-fields-input-selection/#radiobuttonfield",
            "text": "Warning   extend the abstract class  \" AbstractSelectionField \"",
            "title": "RadioButtonField"
        },
        {
            "location": "/reference/form-fields-input-selection/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-selection/#getalign_1",
            "text": "Get the align   Parameter  (none)  Return  AlignLayout  Sample code   get Align   Source code   AlignLayout align = radioButtonField.getAlign();",
            "title": "getAlign()"
        },
        {
            "location": "/reference/form-fields-input-selection/#getdefaultvalue_3",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = radioButtonField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-selection/#abstractselectionfield",
            "text": "Warning   extend the abstract class \" AbstractInputField \"  This class is an abstract class.",
            "title": "AbstractSelectionField"
        },
        {
            "location": "/reference/form-fields-input-selection/#methods_5",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-selection/#getoptions",
            "text": "Get the options   Parameter  (none)  Return  Map<String,  OptionData >",
            "title": "getOptions()"
        },
        {
            "location": "/reference/form-fields-input-selection/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields-input-time/",
            "text": "Time\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nDateField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetUnique()\n\n\n\n\nGet the unique\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Unique\n\n\n Source code \n\n\nBoolean unique = dateField.getUnique();\n\n\n\n\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = dateField.getDefaultValue();\n\n\n\n\n\n\ngetDefaultNowValue()\n\n\n\n\nGet the defaultNowValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Default Now Value\n\n\n Source code \n\n\nBoolean defaultNowValue = dateField.getDefaultNowValue();\n\n\n\n\n\n\nDateTimeField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetUnique()\n\n\n\n\nGet the unique\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Unique\n\n\n Source code \n\n\nBoolean unique = dateTimeField.getUnique();\n\n\n\n\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = dateTimeField.getDefaultValue();\n\n\n\n\n\n\ngetDefaultNowValue()\n\n\n\n\nGet the defaultNowValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Default Now Value\n\n\n Source code \n\n\nBoolean defaultNowValue = dateTimeField.getDefaultNowValue();\n\n\n\n\n\n\nTimeField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractInputField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetDefaultValue()\n\n\n\n\nGet the defaultValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Default Value\n\n\n Source code \n\n\nString defaultValue = timeField.getDefaultValue();\n\n\n\n\n\n\ngetDefaultNowValue()\n\n\n\n\nGet the defaultNowValue\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Default Now Value\n\n\n Source code \n\n\nBoolean defaultNowValue = timeField.getDefaultNowValue();\n\n\n\n\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Time"
        },
        {
            "location": "/reference/form-fields-input-time/#time",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Time"
        },
        {
            "location": "/reference/form-fields-input-time/#datefield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "DateField"
        },
        {
            "location": "/reference/form-fields-input-time/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-time/#getunique",
            "text": "Get the unique   Parameter  (none)  Return  Boolean  Sample code   get Unique   Source code   Boolean unique = dateField.getUnique();",
            "title": "getUnique()"
        },
        {
            "location": "/reference/form-fields-input-time/#getdefaultvalue",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = dateField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-time/#getdefaultnowvalue",
            "text": "Get the defaultNowValue   Parameter  (none)  Return  Boolean  Sample code   get Default Now Value   Source code   Boolean defaultNowValue = dateField.getDefaultNowValue();",
            "title": "getDefaultNowValue()"
        },
        {
            "location": "/reference/form-fields-input-time/#datetimefield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "DateTimeField"
        },
        {
            "location": "/reference/form-fields-input-time/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-time/#getunique_1",
            "text": "Get the unique   Parameter  (none)  Return  Boolean  Sample code   get Unique   Source code   Boolean unique = dateTimeField.getUnique();",
            "title": "getUnique()"
        },
        {
            "location": "/reference/form-fields-input-time/#getdefaultvalue_1",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = dateTimeField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-time/#getdefaultnowvalue_1",
            "text": "Get the defaultNowValue   Parameter  (none)  Return  Boolean  Sample code   get Default Now Value   Source code   Boolean defaultNowValue = dateTimeField.getDefaultNowValue();",
            "title": "getDefaultNowValue()"
        },
        {
            "location": "/reference/form-fields-input-time/#timefield",
            "text": "Warning   extend the abstract class  \" AbstractInputField \"",
            "title": "TimeField"
        },
        {
            "location": "/reference/form-fields-input-time/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-input-time/#getdefaultvalue_2",
            "text": "Get the defaultValue   Parameter  (none)  Return  String  Sample code   get Default Value   Source code   String defaultValue = timeField.getDefaultValue();",
            "title": "getDefaultValue()"
        },
        {
            "location": "/reference/form-fields-input-time/#getdefaultnowvalue_2",
            "text": "Get the defaultNowValue   Parameter  (none)  Return  Boolean  Sample code   get Default Now Value   Source code   Boolean defaultNowValue = timeField.getDefaultNowValue();",
            "title": "getDefaultNowValue()"
        },
        {
            "location": "/reference/form-fields-input-time/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields-related_record/",
            "text": "Related Record\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nRelatedApp\n\n\nMethods\n\n\ngetApp()\n\n\n\n\nGet the app\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget App\n\n\n Source code \n\n\nString app = relatedApp.getApp();\n\n\n\n\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nString app = relatedApp.getCode();\n\n\n\n\n\n\nReferenceTable\n\n\nMethods\n\n\ngetCondition()\n\n\n\n\nGet the condition\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nFieldMapping\n\n\nSample code\n\n\n\n\nget Condition\n\n\n Source code \n\n\nFieldMapping condition = referenceTable.getCondition();\n\n\n\n\n\n\ngetFilterCond()\n\n\n\n\nGet the filterCond\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget FilterCond\n\n\n Source code \n\n\nString filterCond = referenceTable.getFilterCond();\n\n\n\n\n\n\ngetRelatedApp()\n\n\n\n\nGet the relatedApp\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nRelatedApp\n\n\nSample code\n\n\n\n\nget Related App\n\n\n Source code \n\n\nRelatedApp relatedApp = referenceTable.getRelatedApp();\n\n\n\n\n\n\ngetSize()\n\n\n\n\nGet the size\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInteger\n\n\nSample code\n\n\n\n\nget Size\n\n\n Source code \n\n\nInteger size = referenceTable.getSize();\n\n\n\n\n\n\ngetDisplayFields()\n\n\n\n\nGet the displayFields\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<String>\n\n\nSample code\n\n\n\n\nget Display Fields\n\n\n Source code \n\n\nList<String> displayFields = referenceTable.getDisplayFields();\n\n\n\n\n\n\ngetSort()\n\n\n\n\nGet the sort\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Sort\n\n\n Source code \n\n\nString sort = referenceTable.getSort();\n\n\n\n\n\n\nRelatedRecordsField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetLabel()\n\n\n\n\nGet the label\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Label\n\n\n Source code \n\n\nString label = relatedRecordsField.getLabel();\n\n\n\n\n\n\ngetNoLabel()\n\n\n\n\nGet the noLabel\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget NoLabel\n\n\n Source code \n\n\nBoolean noLabel = relatedRecordsField.getNoLabel();\n\n\n\n\n\n\ngetReferenceTable()\n\n\n\n\nGet the referenceTable\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nReferenceTable\n\n\nSample code\n\n\n\n\nget Reference Table\n\n\n Source code \n\n\nReferenceTable referenceTable = relatedRecordsField.getReferenceTable();\n\n\n\n\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Related_record"
        },
        {
            "location": "/reference/form-fields-related_record/#related-record",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Related Record"
        },
        {
            "location": "/reference/form-fields-related_record/#relatedapp",
            "text": "",
            "title": "RelatedApp"
        },
        {
            "location": "/reference/form-fields-related_record/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-related_record/#getapp",
            "text": "Get the app   Parameter  (none)  Return  String  Sample code   get App   Source code   String app = relatedApp.getApp();",
            "title": "getApp()"
        },
        {
            "location": "/reference/form-fields-related_record/#getcode",
            "text": "Get the code   Parameter  (none)  Return  String  Sample code   get Code   Source code   String app = relatedApp.getCode();",
            "title": "getCode()"
        },
        {
            "location": "/reference/form-fields-related_record/#referencetable",
            "text": "",
            "title": "ReferenceTable"
        },
        {
            "location": "/reference/form-fields-related_record/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-related_record/#getcondition",
            "text": "Get the condition   Parameter  (none)  Return  FieldMapping  Sample code   get Condition   Source code   FieldMapping condition = referenceTable.getCondition();",
            "title": "getCondition()"
        },
        {
            "location": "/reference/form-fields-related_record/#getfiltercond",
            "text": "Get the filterCond   Parameter  (none)  Return  String  Sample code   get FilterCond   Source code   String filterCond = referenceTable.getFilterCond();",
            "title": "getFilterCond()"
        },
        {
            "location": "/reference/form-fields-related_record/#getrelatedapp",
            "text": "Get the relatedApp   Parameter  (none)  Return  RelatedApp  Sample code   get Related App   Source code   RelatedApp relatedApp = referenceTable.getRelatedApp();",
            "title": "getRelatedApp()"
        },
        {
            "location": "/reference/form-fields-related_record/#getsize",
            "text": "Get the size   Parameter  (none)  Return  Integer  Sample code   get Size   Source code   Integer size = referenceTable.getSize();",
            "title": "getSize()"
        },
        {
            "location": "/reference/form-fields-related_record/#getdisplayfields",
            "text": "Get the displayFields   Parameter  (none)  Return  List<String>  Sample code   get Display Fields   Source code   List<String> displayFields = referenceTable.getDisplayFields();",
            "title": "getDisplayFields()"
        },
        {
            "location": "/reference/form-fields-related_record/#getsort",
            "text": "Get the sort   Parameter  (none)  Return  String  Sample code   get Sort   Source code   String sort = referenceTable.getSort();",
            "title": "getSort()"
        },
        {
            "location": "/reference/form-fields-related_record/#relatedrecordsfield",
            "text": "Warning   extend the abstract class  \" Field \"",
            "title": "RelatedRecordsField"
        },
        {
            "location": "/reference/form-fields-related_record/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-related_record/#getlabel",
            "text": "Get the label   Parameter  (none)  Return  String  Sample code   get Label   Source code   String label = relatedRecordsField.getLabel();",
            "title": "getLabel()"
        },
        {
            "location": "/reference/form-fields-related_record/#getnolabel",
            "text": "Get the noLabel   Parameter  (none)  Return  Boolean  Sample code   get NoLabel   Source code   Boolean noLabel = relatedRecordsField.getNoLabel();",
            "title": "getNoLabel()"
        },
        {
            "location": "/reference/form-fields-related_record/#getreferencetable",
            "text": "Get the referenceTable   Parameter  (none)  Return  ReferenceTable  Sample code   get Reference Table   Source code   ReferenceTable referenceTable = relatedRecordsField.getReferenceTable();",
            "title": "getReferenceTable()"
        },
        {
            "location": "/reference/form-fields-related_record/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-fields-system/",
            "text": "System\n\n\nGet a list of fields and their settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nAssigneeField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractProcessManagementField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nCategoryField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemField\n\"\n\n\n\n\n\n\nMethods\n\n\ngetEnabled()\n\n\n\n\nGet the enabled\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nSample code\n\n\n\n\nget Enabled\n\n\n Source code \n\n\nBoolean enabled = categoryField.getEnabled();\n\n\n\n\n\n\nCreatedTimeField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemInfoField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nCreatorField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemInfoField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nModifierField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemInfoField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nRecordNumberField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemInfoField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nStatusField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractProcessManagementField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nUpdatedTimeField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemInfoField\n\"\n\n\n\n\n\n\nMethods\n\n\n(none)\n\n\nAbstractSystemField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nField\n\"\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetLabel()\n\n\n\n\nGet the label\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nAbstractProcessManagementField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemField\n\"\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetEnabled()\n\n\n\n\nGet the enabled\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nAbstractSystemInfoField\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nAbstractSystemField\n\"\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetNoLabel()\n\n\n\n\nGet the noLabel\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBoolean\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "System"
        },
        {
            "location": "/reference/form-fields-system/#system",
            "text": "Get a list of fields and their settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "System"
        },
        {
            "location": "/reference/form-fields-system/#assigneefield",
            "text": "Warning   extend the abstract class  \" AbstractProcessManagementField \"",
            "title": "AssigneeField"
        },
        {
            "location": "/reference/form-fields-system/#methods",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#categoryfield",
            "text": "Warning   extend the abstract class  \" AbstractSystemField \"",
            "title": "CategoryField"
        },
        {
            "location": "/reference/form-fields-system/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#getenabled",
            "text": "Get the enabled   Parameter  (none)  Return  Boolean  Sample code   get Enabled   Source code   Boolean enabled = categoryField.getEnabled();",
            "title": "getEnabled()"
        },
        {
            "location": "/reference/form-fields-system/#createdtimefield",
            "text": "Warning   extend the abstract class  \" AbstractSystemInfoField \"",
            "title": "CreatedTimeField"
        },
        {
            "location": "/reference/form-fields-system/#methods_2",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#creatorfield",
            "text": "Warning   extend the abstract class  \" AbstractSystemInfoField \"",
            "title": "CreatorField"
        },
        {
            "location": "/reference/form-fields-system/#methods_3",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#modifierfield",
            "text": "Warning   extend the abstract class  \" AbstractSystemInfoField \"",
            "title": "ModifierField"
        },
        {
            "location": "/reference/form-fields-system/#methods_4",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#recordnumberfield",
            "text": "Warning   extend the abstract class  \" AbstractSystemInfoField \"",
            "title": "RecordNumberField"
        },
        {
            "location": "/reference/form-fields-system/#methods_5",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#statusfield",
            "text": "Warning   extend the abstract class  \" AbstractProcessManagementField \"",
            "title": "StatusField"
        },
        {
            "location": "/reference/form-fields-system/#methods_6",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#updatedtimefield",
            "text": "Warning   extend the abstract class  \" AbstractSystemInfoField \"",
            "title": "UpdatedTimeField"
        },
        {
            "location": "/reference/form-fields-system/#methods_7",
            "text": "(none)",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#abstractsystemfield",
            "text": "Warning   extend the abstract class  \" Field \"  This class is an abstract class.",
            "title": "AbstractSystemField"
        },
        {
            "location": "/reference/form-fields-system/#methods_8",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#getlabel",
            "text": "Get the label   Parameter  (none)  Return  String",
            "title": "getLabel()"
        },
        {
            "location": "/reference/form-fields-system/#abstractprocessmanagementfield",
            "text": "Warning   extend the abstract class  \" AbstractSystemField \"  This class is an abstract class.",
            "title": "AbstractProcessManagementField"
        },
        {
            "location": "/reference/form-fields-system/#methods_9",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#getenabled_1",
            "text": "Get the enabled   Parameter  (none)  Return  Boolean",
            "title": "getEnabled()"
        },
        {
            "location": "/reference/form-fields-system/#abstractsysteminfofield",
            "text": "Warning   extend the abstract class  \" AbstractSystemField \"  This class is an abstract class.",
            "title": "AbstractSystemInfoField"
        },
        {
            "location": "/reference/form-fields-system/#methods_10",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-fields-system/#getnolabel",
            "text": "Get the noLabel   Parameter  (none)  Return  Boolean",
            "title": "getNoLabel()"
        },
        {
            "location": "/reference/form-fields-system/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/form-layout/",
            "text": "Form Layout\n\n\nGet the layout of a form.\nLength and width of the field,\nThe fields you set on the table and their order,\nPut fields in the Group field and their layout,\nlabel, space, and border settings.\n\n\n\n\n\n\nPermissions to view the App is needed.\n\n\nAPI Tokens cannot be used with this API.\n\n\n\n\n\n\nFormLayout\n\n\nMethods\n\n\ngetRevision()\n\n\n\n\nGet the revision\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Revision\n\n\n Source code \n\n\nString revision = layout.getRevision();\n\n\n\n\n\n\ngetLayout()\n\n\n\n\nGet the layout\n\n\n\n\nParameter \n\n\n(none)\n\n\nReturn\n\n\nList<\nItemLayout\n>\n\n\nSample code\n\n\n\n\nget Layout\n\n\n Source code \n\n\nList<ItemLayout> itemLayoutList = layout.getLayout();\n\n\n\n\n\n\nFieldLayout\n\n\nMethods\n\n\ngetType()\n\n\n\n\nGet the type\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Type\n\n\n Source code \n\n\nString type = fieldLayout.getType();\n\n\n\n\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nString code = fieldLayout.getCode();\n\n\n\n\n\n\ngetElementId()\n\n\n\n\nGet the elementId\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Element Id\n\n\n Source code \n\n\nString elementId = fieldLayout.getElementId();\n\n\n\n\n\n\ngetLabel()\n\n\n\n\nGet the label\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Label\n\n\n Source code \n\n\nString label = fieldLayout.getLabel();\n\n\n\n\n\n\ngetSize()\n\n\n\n\nGet the size\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nFieldSize\n\n\nSample code\n\n\n\n\nget Size\n\n\n Source code \n\n\nFieldSize size = fieldLayout.getSize();\n\n\n\n\n\n\nFieldSize\n\n\nMethods\n\n\ngetWidth()\n\n\n\n\nGet the width\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Width\n\n\n Source code \n\n\nString width = fieldSize.getWidth();\n\n\n\n\n\n\ngetHeight()\n\n\n\n\nGet the height\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Height\n\n\n Source code \n\n\nString height = fieldSize.getHeight();\n\n\n\n\n\n\ngetInnerHeight()\n\n\n\n\nGet the innerHeight\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Inner Height\n\n\n Source code \n\n\nString innerHeight = fieldSize.getInnerHeight();\n\n\n\n\n\n\nGroupLayout\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nItemLayout\n\"\n\n\n\n\n\n\nMethods\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nString code = groupLayout.getCode();\n\n\n\n\n\n\ngetLayout()\n\n\n\n\nGet the layout\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<\nRowLayout\n>\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nList<RowLayout> layout = groupLayout.getLayout();\n\n\n\n\n\n\nRowLayout\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nItemLayout\n\"\n\n\n\n\n\n\nMethods\n\n\ngetFields()\n\n\n\n\nGet the fields\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nList<\nFieldLayout\n>\n\n\nSample code\n\n\n\n\nget Fields\n\n\n Source code \n\n\nString fields = rowLayout.getFields();\n\n\n\n\n\n\nSubTableLayout\n\n\n\n\nWarning\n\n\n\n\nextend the abstract class  \"\nItemLayout\n\"\n\n\n\n\n\n\nMethods\n\n\ngetCode()\n\n\n\n\nGet the code\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nget Code\n\n\n Source code \n\n\nString code = subTableLayout.getCode();\n\n\n\n\n\n\nItemLayout\n\n\n\n\nWarning\n\n\n\n\nThis class is an abstract class.\n\n\n\n\n\n\nMethods\n\n\ngetType()\n\n\n\n\nGet the type\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nLayoutType\n\n\nReference\n\n\n\n\nGet App\non developer network\n\n\nGet Apps\non developer network\n\n\nGet Form fields\non developer network\n\n\nGet Form Layout\non developer network",
            "title": "Form Layout"
        },
        {
            "location": "/reference/form-layout/#form-layout",
            "text": "Get the layout of a form.\nLength and width of the field,\nThe fields you set on the table and their order,\nPut fields in the Group field and their layout,\nlabel, space, and border settings.    Permissions to view the App is needed.  API Tokens cannot be used with this API.",
            "title": "Form Layout"
        },
        {
            "location": "/reference/form-layout/#formlayout",
            "text": "",
            "title": "FormLayout"
        },
        {
            "location": "/reference/form-layout/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-layout/#getrevision",
            "text": "Get the revision   Parameter  (none)  Return  String  Sample code   get Revision   Source code   String revision = layout.getRevision();",
            "title": "getRevision()"
        },
        {
            "location": "/reference/form-layout/#getlayout",
            "text": "Get the layout   Parameter   (none)  Return  List< ItemLayout >  Sample code   get Layout   Source code   List<ItemLayout> itemLayoutList = layout.getLayout();",
            "title": "getLayout()"
        },
        {
            "location": "/reference/form-layout/#fieldlayout",
            "text": "",
            "title": "FieldLayout"
        },
        {
            "location": "/reference/form-layout/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-layout/#gettype",
            "text": "Get the type   Parameter  (none)  Return  String  Sample code   get Type   Source code   String type = fieldLayout.getType();",
            "title": "getType()"
        },
        {
            "location": "/reference/form-layout/#getcode",
            "text": "Get the code   Parameter  (none)  Return  String  Sample code   get Code   Source code   String code = fieldLayout.getCode();",
            "title": "getCode()"
        },
        {
            "location": "/reference/form-layout/#getelementid",
            "text": "Get the elementId   Parameter  (none)  Return  String  Sample code   get Element Id   Source code   String elementId = fieldLayout.getElementId();",
            "title": "getElementId()"
        },
        {
            "location": "/reference/form-layout/#getlabel",
            "text": "Get the label   Parameter  (none)  Return  String  Sample code   get Label   Source code   String label = fieldLayout.getLabel();",
            "title": "getLabel()"
        },
        {
            "location": "/reference/form-layout/#getsize",
            "text": "Get the size   Parameter  (none)  Return  FieldSize  Sample code   get Size   Source code   FieldSize size = fieldLayout.getSize();",
            "title": "getSize()"
        },
        {
            "location": "/reference/form-layout/#fieldsize",
            "text": "",
            "title": "FieldSize"
        },
        {
            "location": "/reference/form-layout/#methods_2",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-layout/#getwidth",
            "text": "Get the width   Parameter  (none)  Return  String  Sample code   get Width   Source code   String width = fieldSize.getWidth();",
            "title": "getWidth()"
        },
        {
            "location": "/reference/form-layout/#getheight",
            "text": "Get the height   Parameter  (none)  Return  String  Sample code   get Height   Source code   String height = fieldSize.getHeight();",
            "title": "getHeight()"
        },
        {
            "location": "/reference/form-layout/#getinnerheight",
            "text": "Get the innerHeight   Parameter  (none)  Return  String  Sample code   get Inner Height   Source code   String innerHeight = fieldSize.getInnerHeight();",
            "title": "getInnerHeight()"
        },
        {
            "location": "/reference/form-layout/#grouplayout",
            "text": "Warning   extend the abstract class  \" ItemLayout \"",
            "title": "GroupLayout"
        },
        {
            "location": "/reference/form-layout/#methods_3",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-layout/#getcode_1",
            "text": "Get the code   Parameter  (none)  Return  String  Sample code   get Code   Source code   String code = groupLayout.getCode();",
            "title": "getCode()"
        },
        {
            "location": "/reference/form-layout/#getlayout_1",
            "text": "Get the layout   Parameter  (none)  Return  List< RowLayout >  Sample code   get Code   Source code   List<RowLayout> layout = groupLayout.getLayout();",
            "title": "getLayout()"
        },
        {
            "location": "/reference/form-layout/#rowlayout",
            "text": "Warning   extend the abstract class  \" ItemLayout \"",
            "title": "RowLayout"
        },
        {
            "location": "/reference/form-layout/#methods_4",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-layout/#getfields",
            "text": "Get the fields   Parameter  (none)  Return  List< FieldLayout >  Sample code   get Fields   Source code   String fields = rowLayout.getFields();",
            "title": "getFields()"
        },
        {
            "location": "/reference/form-layout/#subtablelayout",
            "text": "Warning   extend the abstract class  \" ItemLayout \"",
            "title": "SubTableLayout"
        },
        {
            "location": "/reference/form-layout/#methods_5",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-layout/#getcode_2",
            "text": "Get the code   Parameter  (none)  Return  String  Sample code   get Code   Source code   String code = subTableLayout.getCode();",
            "title": "getCode()"
        },
        {
            "location": "/reference/form-layout/#itemlayout",
            "text": "Warning   This class is an abstract class.",
            "title": "ItemLayout"
        },
        {
            "location": "/reference/form-layout/#methods_6",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/form-layout/#gettype_1",
            "text": "Get the type   Parameter  (none)  Return  LayoutType",
            "title": "getType()"
        },
        {
            "location": "/reference/form-layout/#reference",
            "text": "Get App on developer network  Get Apps on developer network  Get Form fields on developer network  Get Form Layout on developer network",
            "title": "Reference"
        },
        {
            "location": "/reference/app-general/",
            "text": "General\n\n\n\n\nThe description, name, icon, revision and color theme of an App\n\n\n\n\nGeneralSettings\n\n\nThe description, name, icon, revision and color theme of an App.\n\n\nConstants\n\n\nIconTheme\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nvalue\n\n\n\n\n\n\n\n\n\n\nWHITE\n\n\nString\n\n\nWHITE\n\n\n\n\n\n\nRED\n\n\nString\n\n\nRED\n\n\n\n\n\n\nBLUE\n\n\nString\n\n\nBLUE\n\n\n\n\n\n\nGREEN\n\n\nString\n\n\nGREEN\n\n\n\n\n\n\nYELLOW\n\n\nString\n\n\nYELLOW\n\n\n\n\n\n\nBLACK\n\n\nString\n\n\nBLACK\n\n\n\n\n\n\n\n\nMethods\n\n\ngetName()\n\n\n\n\nGet the app name\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget app name\n\n\n Source code \n\n\nlet app = generalSettings.getName()\n\n\n\n\n\n\nsetName(name)\n\n\n\n\nSet the app name\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString?\n\n\nThe kintone app name. The maximum character limit is 64.\n\n\n\n\n\n\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget app name\n\n\n Source code \n\n\nlet generalSettings = GeneralSettings()\nlet appName: String =  {app_name}\ngeneralSettings.setName(appName)\n\n\n\n\n\n\ngetDescription()\n\n\n\n\nGet the app description\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget app description\n\n\n Source code \n\n\nlet description = generalSettings.getDescription()\n\n\n\n\n\n\nsetDescription()\n\n\n\n\nSet the app description\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndescription\n\n\nString?\n\n\nThe App description. The maximum character limit is 10,000. HTML tags can be used.\n\n\n\n\n\n\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nset app description\n\n\n Source code \n\n\nlet generalSettings = GeneralSettings()\ngeneralSettings.setDescription(\"description\")\n\n\n\n\n\n\n\ngetIcon()\n\n\n\n\nGet the App icon.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nIcon\n?\n\n\nSample code\n\n\n\n\nget the App icon\n\n\n Source code \n\n\nlet appIcon = generalSettings.getIcon()\n\n\n\n\n\n\nsetIcon(icon)\n\n\n\n\nSet the App icon\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nicon\n\n\nIcon\n\n\nAn Icon containing information of the App icon.\n\n\n\n\n\n\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nset the app icon\n\n\n Source code \n\n\nlet generalSettings = GeneralSettings()\nlet icon = Icon(\"icon_key\", Icon.IconType.PRESET, nil)\ngeneralSettings.setIcon(icon)\n\n\n\n\n\n\ngetTheme()\n\n\n\n\nGet the Color theme.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nGeneralSettings.IconTheme\n?\n\n\nSample code\n\n\n\n\nget the Color theme\n\n\n Source code \n\n\nlet appIconTheme = generalSettings.getTheme()\n\n\n\n\n\n\nsetTheme(theme)\n\n\n\n\nSet the App icon\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntheme\n\n\nGeneralSettings.IconTheme\n\n\nAn Icon containing information of the App icon.\n\n\n\n\n\n\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nset the app icon\n\n\n Source code \n\n\nlet generalSettings = GeneralSettings()\ngeneralSettings.setTheme(GeneralSettings.IconTheme.WHITE)\n\n\n\n\n\n\nIcon\n\n\nThe App icon.\n\n\nConstants\n\n\nIconType\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nvalue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFILE\n\n\nString\n\n\nFILE\n\n\nAn uploaded image.\n\n\n\n\n\n\nPRESET\n\n\nString\n\n\nPRESET\n\n\nA preset icon within kintone.\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nicontype\n\n\nIcon.IconType\n\n\nThe icon Type.\n\n\n\n\n\n\nFile\n\n\nFile\n?\n\n\nA File containing information of uploaded icon files \nRequired, if the \"icon.type\" parameter is set as \"FILE\".\n\n\n\n\n\n\nkey\n\n\nString?\n\n\nThe key identifier of the icon.\nRequired, if the \"icon.type\" parameter is set as \"PRESET\".\n(Preset icons have key identifiers that can be obtained using theGet General Settings API.)\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInit Icon class\n\n\n Source code \n\n\nlet icon = Icon(\"icon_key\", Icon.IconType.PRESET, nil)\n\n\n\n\n\n\nMethods\n\n\ngetIcontype()\n\n\n\n\nGet icon Type.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nIcon.IconType\n?\n\n\nSample code\n\n\n\n\nget icon Type.\n\n\n Source code \n\n\nlet file = icon.getIcontype()\n\n\n\n\n\n\nsetIcontype()\n\n\n\n\nSet icon Type\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nicontype\n\n\nIcon.IconType\n\n\nThe icon Type.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset icon Type\n\n\n Source code \n\n\nlet icon = Icon(nil, Icon.IconType.FILE, nil)\nicon.setIcontype(Icon.IconType.PRESET)\n\n\n\n\n\n\ngetFile()\n\n\n\n\nGet file data\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nFile\n?\n\n\nSample code\n\n\n\n\nget file data\n\n\n Source code \n\n\nlet file = icon.getFile()\n\n\n\n\n\n\nsetFile()\n\n\n\n\nSet file data\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFile\n\n\nFile\n?\n\n\nA File containing information of uploaded icon files \nRequired, if the \"icon.type\" parameter is set as \"FILE\".\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset file data\n\n\n Source code \n\n\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\nlet icon = Icon(nil, Icon.IconType.FILE, nil)\n\ndo {\n    // execute upload file API\n    let bundle = Bundle(for: type(of: self))\n    let upload_file_path = bundle.url(forResource: \"test\", withExtension: \"txt\")\n    let fileModel = try fileManager.upload(upload_file_path!.absoluteString)\n    icon.setFile(fileModel)\n}\n\n\n\n\n\n\ngetKey()\n\n\n\n\nGet the key identifier of the icon.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the key identifier of the icon\n\n\n Source code \n\n\nlet iconKey = icon.getKey()\n\n\n\n\n\n\nsetKey()\n\n\n\n\nSet the key identifier of the icon\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nString?\n\n\nThe key identifier of the icon.\nRequired, if the \"icon.type\" parameter is set as \"PRESET\".\n(Preset icons have key identifiers that can be obtained using theGet General Settings API.)\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the key identifier of the icon\n\n\n Source code \n\n\nlet icon = Icon(nil, Icon.IconType.FILE, nil)\nlet iconKey: String = {app_icon_key}\nicon.setKey(iconKey)",
            "title": "General"
        },
        {
            "location": "/reference/app-general/#general",
            "text": "The description, name, icon, revision and color theme of an App",
            "title": "General"
        },
        {
            "location": "/reference/app-general/#generalsettings",
            "text": "The description, name, icon, revision and color theme of an App.",
            "title": "GeneralSettings"
        },
        {
            "location": "/reference/app-general/#constants",
            "text": "",
            "title": "Constants"
        },
        {
            "location": "/reference/app-general/#icontheme",
            "text": "Name  Type  value      WHITE  String  WHITE    RED  String  RED    BLUE  String  BLUE    GREEN  String  GREEN    YELLOW  String  YELLOW    BLACK  String  BLACK",
            "title": "IconTheme"
        },
        {
            "location": "/reference/app-general/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-general/#getname",
            "text": "Get the app name   Parameter  (none)  Return  String?  Sample code   get app name   Source code   let app = generalSettings.getName()",
            "title": "getName()"
        },
        {
            "location": "/reference/app-general/#setnamename",
            "text": "Set the app name   Parameter     Name  Type  Description      name  String?  The kintone app name. The maximum character limit is 64.     Return  String?  Sample code   get app name   Source code   let generalSettings = GeneralSettings()\nlet appName: String =  {app_name}\ngeneralSettings.setName(appName)",
            "title": "setName(name)"
        },
        {
            "location": "/reference/app-general/#getdescription",
            "text": "Get the app description   Parameter  (none)  Return  String?  Sample code   get app description   Source code   let description = generalSettings.getDescription()",
            "title": "getDescription()"
        },
        {
            "location": "/reference/app-general/#setdescription",
            "text": "Set the app description   Parameter     Name  Type  Description      description  String?  The App description. The maximum character limit is 10,000. HTML tags can be used.     Return  String?  Sample code   set app description   Source code   let generalSettings = GeneralSettings()\ngeneralSettings.setDescription(\"description\")",
            "title": "setDescription()"
        },
        {
            "location": "/reference/app-general/#geticon",
            "text": "Get the App icon.   Parameter  (none)  Return  Icon ?  Sample code   get the App icon   Source code   let appIcon = generalSettings.getIcon()",
            "title": "getIcon()"
        },
        {
            "location": "/reference/app-general/#seticonicon",
            "text": "Set the App icon   Parameter     Name  Type  Description      icon  Icon  An Icon containing information of the App icon.     Return  String?  Sample code   set the app icon   Source code   let generalSettings = GeneralSettings()\nlet icon = Icon(\"icon_key\", Icon.IconType.PRESET, nil)\ngeneralSettings.setIcon(icon)",
            "title": "setIcon(icon)"
        },
        {
            "location": "/reference/app-general/#gettheme",
            "text": "Get the Color theme.   Parameter  (none)  Return  GeneralSettings.IconTheme ?  Sample code   get the Color theme   Source code   let appIconTheme = generalSettings.getTheme()",
            "title": "getTheme()"
        },
        {
            "location": "/reference/app-general/#setthemetheme",
            "text": "Set the App icon   Parameter     Name  Type  Description      theme  GeneralSettings.IconTheme  An Icon containing information of the App icon.     Return  String?  Sample code   set the app icon   Source code   let generalSettings = GeneralSettings()\ngeneralSettings.setTheme(GeneralSettings.IconTheme.WHITE)",
            "title": "setTheme(theme)"
        },
        {
            "location": "/reference/app-general/#icon",
            "text": "The App icon.",
            "title": "Icon"
        },
        {
            "location": "/reference/app-general/#constants_1",
            "text": "",
            "title": "Constants"
        },
        {
            "location": "/reference/app-general/#icontype",
            "text": "Name  Type  value  Description      FILE  String  FILE  An uploaded image.    PRESET  String  PRESET  A preset icon within kintone.",
            "title": "IconType"
        },
        {
            "location": "/reference/app-general/#constructor",
            "text": "Parameter     Name  Type  Description      icontype  Icon.IconType  The icon Type.    File  File ?  A File containing information of uploaded icon files  Required, if the \"icon.type\" parameter is set as \"FILE\".    key  String?  The key identifier of the icon. Required, if the \"icon.type\" parameter is set as \"PRESET\". (Preset icons have key identifiers that can be obtained using theGet General Settings API.)     Sample code   Init Icon class   Source code   let icon = Icon(\"icon_key\", Icon.IconType.PRESET, nil)",
            "title": "Constructor"
        },
        {
            "location": "/reference/app-general/#methods_1",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-general/#geticontype",
            "text": "Get icon Type.   Parameter  (none)  Return  Icon.IconType ?  Sample code   get icon Type.   Source code   let file = icon.getIcontype()",
            "title": "getIcontype()"
        },
        {
            "location": "/reference/app-general/#seticontype",
            "text": "Set icon Type   Parameter     Name  Type  Description      icontype  Icon.IconType  The icon Type.     Return  (none)  Sample code   set icon Type   Source code   let icon = Icon(nil, Icon.IconType.FILE, nil)\nicon.setIcontype(Icon.IconType.PRESET)",
            "title": "setIcontype()"
        },
        {
            "location": "/reference/app-general/#getfile",
            "text": "Get file data   Parameter  (none)  Return  File ?  Sample code   get file data   Source code   let file = icon.getFile()",
            "title": "getFile()"
        },
        {
            "location": "/reference/app-general/#setfile",
            "text": "Set file data   Parameter     Name  Type  Description      File  File ?  A File containing information of uploaded icon files  Required, if the \"icon.type\" parameter is set as \"FILE\".     Return  (none)  Sample code   set file data   Source code   \n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\nlet icon = Icon(nil, Icon.IconType.FILE, nil)\n\ndo {\n    // execute upload file API\n    let bundle = Bundle(for: type(of: self))\n    let upload_file_path = bundle.url(forResource: \"test\", withExtension: \"txt\")\n    let fileModel = try fileManager.upload(upload_file_path!.absoluteString)\n    icon.setFile(fileModel)\n}",
            "title": "setFile()"
        },
        {
            "location": "/reference/app-general/#getkey",
            "text": "Get the key identifier of the icon.   Parameter  (none)  Return  String?  Sample code   get the key identifier of the icon   Source code   let iconKey = icon.getKey()",
            "title": "getKey()"
        },
        {
            "location": "/reference/app-general/#setkey",
            "text": "Set the key identifier of the icon   Parameter     Name  Type  Description      key  String?  The key identifier of the icon. Required, if the \"icon.type\" parameter is set as \"PRESET\". (Preset icons have key identifiers that can be obtained using theGet General Settings API.)     Return  (none)  Sample code   set the key identifier of the icon   Source code   let icon = Icon(nil, Icon.IconType.FILE, nil)\nlet iconKey: String = {app_icon_key}\nicon.setKey(iconKey)",
            "title": "setKey()"
        },
        {
            "location": "/reference/app-view/",
            "text": "View\n\n\n\n\nView settings of an App\n\n\n\n\nViewModel\n\n\nConstants\n\n\nBuiltinType\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nASSIGNEE\n\n\nString\n\n\nASSIGNEE\n\n\nThe \"Assigned to me\" View.\n(This list is automatically created if the Process Management settings have been enabled in the app.)\n\n\n\n\n\n\n\n\nViewType\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLIST\n\n\nString\n\n\nLIST\n\n\nList View\n\n\n\n\n\n\nCALENDAR\n\n\nString\n\n\nCALENDAR\n\n\nCustom View\n\n\n\n\n\n\nCUSTOM\n\n\nString\n\n\nCUSTOM\n\n\nCustom View\n\n\n\n\n\n\n\n\nMethods\n\n\ngetBuiltinType()\n\n\n\n\nGet the BuiltinType of the built-in View.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBuiltinType\n?\n\n\nSample code\n\n\n\n\nget the BuiltinType of the built-in View\n\n\n Source code \n\n\nlet type = viewModel.getBuiltinType()\n\n\n\n\n\n\nsetName(name)\n\n\n\n\nSet the BuiltinType of the built-in View.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nBuiltinType\n?\n\n\nThe BuiltinType of the built-in View.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the BuiltinType of the built-in View.\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setBuiltinType(ViewModel.BuiltinType.ASSIGNEE)\n\n\n\n\n\n\ngetDate()\n\n\n\n\nGet the field code set for the Date Field.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the field code for the Date Field\n\n\n Source code \n\n\nlet date = viewModel.getDate()\n\n\n\n\n\n\nsetDate(date)\n\n\n\n\nSet the field code set for the Date Field.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndate\n\n\nString?\n\n\nThe field code set for the Date Field.\nResponded for Calendar Views.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the field code set for the Date Field\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setDate(\"field_code\")\n\n\n\n\n\n\ngetFields()\n\n\n\n\nGet the list of field codes for the fields displayed in the View.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray\n?\n\n\nSample code\n\n\n\n\nget the list of field codes for the fields displayed in the View\n\n\n Source code \n\n\nlet fields = viewModel.getFields()\n\n\n\n\n\n\nsetFields(fields)\n\n\n\n\nSet the list of field codes for the fields displayed in the View.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\nArray\n?\n\n\nThe list of field codes for the fields displayed in the View.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the field code set for the Date Field\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setFields([\"field_code1\", \"field_code2\"])\n\n\n\n\n\n\ngetFilterCond()\n\n\n\n\nGet the filter condition as a query.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the filter condition as a query.\n\n\n Source code \n\n\nlet query = viewModel.getFilterCond()\n\n\n\n\n\n\nsetFilterCond(filterCond)\n\n\n\n\nSet the filter condition as a query.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilterCond\n\n\nString?\n\n\nThe filter condition as a query.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the filter condition as a query\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setFilterCond(\"query_text\")\n\n\n\n\n\n\ngetHtml()\n\n\n\n\nGet the HTML code set for the custom View.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the HTML code set for the custom View\n\n\n Source code \n\n\nlet html = viewModel.getHtml()\n\n\n\n\n\n\nsetHtml(html)\n\n\n\n\nSet the HTML code set for the custom View.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhtml\n\n\nString?\n\n\nThe HTML code set for the custom View\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the HTML code set for the custom View\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setHtml(\"html\")\n\n\n\n\n\n\ngetId()\n\n\n\n\nGet the View ID.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget the View ID\n\n\n Source code \n\n\nlet viewId = viewModel.getId()\n\n\n\n\n\n\nsetId(id)\n\n\n\n\nSet the View ID.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nInt?\n\n\nThe View ID\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the View ID\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nlet viewId: Int? = {view_id}\nviewModel.setId(viewId)\n\n\n\n\n\n\ngetIndex()\n\n\n\n\nGet the display order (ascending) of the View.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget the display order (ascending) of the View\n\n\n Source code \n\n\nlet index = viewModel.getIndex()\n\n\n\n\n\n\nsetIndex(index)\n\n\n\n\nSet the display order (ascending) of the View.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nInt?\n\n\nThe display order (ascending) of the View\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the display order (ascending) of the View\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nlet index: Int? = {index_number}\nviewModel.setIndex(index)\n\n\n\n\n\n\ngetName()\n\n\n\n\nGet the name of the View.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nInt?\n\n\nSample code\n\n\n\n\nget the name of the View\n\n\n Source code \n\n\nlet viewName = viewModel.getName()\n\n\n\n\n\n\nsetName(name)\n\n\n\n\nSet the name of the View.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString?\n\n\nThe name of the View\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the name of the View\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setName(\"view_name\")\n\n\n\n\n\n\ngetPager()\n\n\n\n\nGet the pagination settings that corresponded for Custom Views.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nBool?\n\n\nSample code\n\n\n\n\nget the pagination settings that corresponded for Custom Views\n\n\n Source code \n\n\nlet viewPager = viewModel.getPager()\n\n\n\n\n\n\nsetPager(pager)\n\n\n\n\nSet the pagination settings that corresponded for Custom Views.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npager\n\n\nBool?\n\n\nThe pagination settings that corresponded for Custom Views\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the pagination settings that corresponded for Custom Views\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setPager(false)\n\n\n\n\ngetSort()\n\n\n\n\nGet the sort order as a query.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the sort order as a query\n\n\n Source code \n\n\nlet sortOrder = viewModel.getSort()\n\n\n\n\n\n\nsetSort(sort)\n\n\n\n\nSet the sort order as a query.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsort\n\n\nString?\n\n\nThe sort order as a query\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the sort order as a query\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setSort(\"field_code asc\")\n\n\n\n\ngetTitle()\n\n\n\n\nGet the field code set for the Title Field that corresponded for Calendar Views.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString?\n\n\nSample code\n\n\n\n\nget the field code set for the Title Field that corresponded for Calendar Views\n\n\n Source code \n\n\nlet viewTitleField = viewModel.getTitle()\n\n\n\n\n\n\nsetTitle(title)\n\n\n\n\nSet the field code set for the Title Field that corresponded for Calendar Views.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nString?\n\n\nThe field code set for the Title Field that corresponded for Calendar Views\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the field code set for the Title Field that corresponded for Calendar Views\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setTitle(\"field_code\")\n\n\n\n\ngetType()\n\n\n\n\nGet the type of View in type.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\ntype\n? \n\n\nSample code\n\n\n\n\nget the type of View in type\n\n\n Source code \n\n\nlet viewType = viewModel.getType()\n\n\n\n\n\n\nsetType(type)\n\n\n\n\nSet the type of View in type.\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\ntype\n?\n\n\nThe type of View in type\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nset the type of View in type\n\n\n Source code \n\n\nlet viewModel = ViewModel()\nviewModel.setType(ViewModel.ViewType.CUSTOM)",
            "title": "View"
        },
        {
            "location": "/reference/app-view/#view",
            "text": "View settings of an App",
            "title": "View"
        },
        {
            "location": "/reference/app-view/#viewmodel",
            "text": "",
            "title": "ViewModel"
        },
        {
            "location": "/reference/app-view/#constants",
            "text": "",
            "title": "Constants"
        },
        {
            "location": "/reference/app-view/#builtintype",
            "text": "Name  Type  Value  Description      ASSIGNEE  String  ASSIGNEE  The \"Assigned to me\" View. (This list is automatically created if the Process Management settings have been enabled in the app.)",
            "title": "BuiltinType"
        },
        {
            "location": "/reference/app-view/#viewtype",
            "text": "Name  Type  Value  Description      LIST  String  LIST  List View    CALENDAR  String  CALENDAR  Custom View    CUSTOM  String  CUSTOM  Custom View",
            "title": "ViewType"
        },
        {
            "location": "/reference/app-view/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/app-view/#getbuiltintype",
            "text": "Get the BuiltinType of the built-in View.   Parameter  (none)  Return  BuiltinType ?  Sample code   get the BuiltinType of the built-in View   Source code   let type = viewModel.getBuiltinType()",
            "title": "getBuiltinType()"
        },
        {
            "location": "/reference/app-view/#setnamename",
            "text": "Set the BuiltinType of the built-in View.   Parameter     Name  Type  Description      name  BuiltinType ?  The BuiltinType of the built-in View.     Return  (none)  Sample code   set the BuiltinType of the built-in View.   Source code   let viewModel = ViewModel()\nviewModel.setBuiltinType(ViewModel.BuiltinType.ASSIGNEE)",
            "title": "setName(name)"
        },
        {
            "location": "/reference/app-view/#getdate",
            "text": "Get the field code set for the Date Field.   Parameter  (none)  Return  String?  Sample code   get the field code for the Date Field   Source code   let date = viewModel.getDate()",
            "title": "getDate()"
        },
        {
            "location": "/reference/app-view/#setdatedate",
            "text": "Set the field code set for the Date Field.   Parameter     Name  Type  Description      date  String?  The field code set for the Date Field. Responded for Calendar Views.     Return  (none)  Sample code   set the field code set for the Date Field   Source code   let viewModel = ViewModel()\nviewModel.setDate(\"field_code\")",
            "title": "setDate(date)"
        },
        {
            "location": "/reference/app-view/#getfields",
            "text": "Get the list of field codes for the fields displayed in the View.   Parameter  (none)  Return  Array ?  Sample code   get the list of field codes for the fields displayed in the View   Source code   let fields = viewModel.getFields()",
            "title": "getFields()"
        },
        {
            "location": "/reference/app-view/#setfieldsfields",
            "text": "Set the list of field codes for the fields displayed in the View.   Parameter     Name  Type  Description      fields  Array ?  The list of field codes for the fields displayed in the View.     Return  (none)  Sample code   set the field code set for the Date Field   Source code   let viewModel = ViewModel()\nviewModel.setFields([\"field_code1\", \"field_code2\"])",
            "title": "setFields(fields)"
        },
        {
            "location": "/reference/app-view/#getfiltercond",
            "text": "Get the filter condition as a query.   Parameter  (none)  Return  String?  Sample code   get the filter condition as a query.   Source code   let query = viewModel.getFilterCond()",
            "title": "getFilterCond()"
        },
        {
            "location": "/reference/app-view/#setfiltercondfiltercond",
            "text": "Set the filter condition as a query.   Parameter     Name  Type  Description      filterCond  String?  The filter condition as a query.     Return  (none)  Sample code   set the filter condition as a query   Source code   let viewModel = ViewModel()\nviewModel.setFilterCond(\"query_text\")",
            "title": "setFilterCond(filterCond)"
        },
        {
            "location": "/reference/app-view/#gethtml",
            "text": "Get the HTML code set for the custom View.   Parameter  (none)  Return  String?  Sample code   get the HTML code set for the custom View   Source code   let html = viewModel.getHtml()",
            "title": "getHtml()"
        },
        {
            "location": "/reference/app-view/#sethtmlhtml",
            "text": "Set the HTML code set for the custom View.   Parameter     Name  Type  Description      html  String?  The HTML code set for the custom View     Return  (none)  Sample code   set the HTML code set for the custom View   Source code   let viewModel = ViewModel()\nviewModel.setHtml(\"html\")",
            "title": "setHtml(html)"
        },
        {
            "location": "/reference/app-view/#getid",
            "text": "Get the View ID.   Parameter  (none)  Return  Int?  Sample code   get the View ID   Source code   let viewId = viewModel.getId()",
            "title": "getId()"
        },
        {
            "location": "/reference/app-view/#setidid",
            "text": "Set the View ID.   Parameter     Name  Type  Description      id  Int?  The View ID     Return  (none)  Sample code   set the View ID   Source code   let viewModel = ViewModel()\nlet viewId: Int? = {view_id}\nviewModel.setId(viewId)",
            "title": "setId(id)"
        },
        {
            "location": "/reference/app-view/#getindex",
            "text": "Get the display order (ascending) of the View.   Parameter  (none)  Return  Int?  Sample code   get the display order (ascending) of the View   Source code   let index = viewModel.getIndex()",
            "title": "getIndex()"
        },
        {
            "location": "/reference/app-view/#setindexindex",
            "text": "Set the display order (ascending) of the View.   Parameter     Name  Type  Description      index  Int?  The display order (ascending) of the View     Return  (none)  Sample code   set the display order (ascending) of the View   Source code   let viewModel = ViewModel()\nlet index: Int? = {index_number}\nviewModel.setIndex(index)",
            "title": "setIndex(index)"
        },
        {
            "location": "/reference/app-view/#getname",
            "text": "Get the name of the View.   Parameter  (none)  Return  Int?  Sample code   get the name of the View   Source code   let viewName = viewModel.getName()",
            "title": "getName()"
        },
        {
            "location": "/reference/app-view/#setnamename_1",
            "text": "Set the name of the View.   Parameter     Name  Type  Description      name  String?  The name of the View     Return  (none)  Sample code   set the name of the View   Source code   let viewModel = ViewModel()\nviewModel.setName(\"view_name\")",
            "title": "setName(name)"
        },
        {
            "location": "/reference/app-view/#getpager",
            "text": "Get the pagination settings that corresponded for Custom Views.   Parameter  (none)  Return  Bool?  Sample code   get the pagination settings that corresponded for Custom Views   Source code   let viewPager = viewModel.getPager()",
            "title": "getPager()"
        },
        {
            "location": "/reference/app-view/#setpagerpager",
            "text": "Set the pagination settings that corresponded for Custom Views.   Parameter     Name  Type  Description      pager  Bool?  The pagination settings that corresponded for Custom Views     Return  (none)  Sample code   set the pagination settings that corresponded for Custom Views   Source code   let viewModel = ViewModel()\nviewModel.setPager(false)",
            "title": "setPager(pager)"
        },
        {
            "location": "/reference/app-view/#getsort",
            "text": "Get the sort order as a query.   Parameter  (none)  Return  String?  Sample code   get the sort order as a query   Source code   let sortOrder = viewModel.getSort()",
            "title": "getSort()"
        },
        {
            "location": "/reference/app-view/#setsortsort",
            "text": "Set the sort order as a query.   Parameter     Name  Type  Description      sort  String?  The sort order as a query     Return  (none)  Sample code   set the sort order as a query   Source code   let viewModel = ViewModel()\nviewModel.setSort(\"field_code asc\")",
            "title": "setSort(sort)"
        },
        {
            "location": "/reference/app-view/#gettitle",
            "text": "Get the field code set for the Title Field that corresponded for Calendar Views.   Parameter  (none)  Return  String?  Sample code   get the field code set for the Title Field that corresponded for Calendar Views   Source code   let viewTitleField = viewModel.getTitle()",
            "title": "getTitle()"
        },
        {
            "location": "/reference/app-view/#settitletitle",
            "text": "Set the field code set for the Title Field that corresponded for Calendar Views.   Parameter     Name  Type  Description      title  String?  The field code set for the Title Field that corresponded for Calendar Views     Return  (none)  Sample code   set the field code set for the Title Field that corresponded for Calendar Views   Source code   let viewModel = ViewModel()\nviewModel.setTitle(\"field_code\")",
            "title": "setTitle(title)"
        },
        {
            "location": "/reference/app-view/#gettype",
            "text": "Get the type of View in type.   Parameter  (none)  Return  type ?   Sample code   get the type of View in type   Source code   let viewType = viewModel.getType()",
            "title": "getType()"
        },
        {
            "location": "/reference/app-view/#settypetype",
            "text": "Set the type of View in type.   Parameter     Name  Type  Description      title  type ?  The type of View in type     Return  (none)  Sample code   set the type of View in type   Source code   let viewModel = ViewModel()\nviewModel.setType(ViewModel.ViewType.CUSTOM)",
            "title": "setType(type)"
        },
        {
            "location": "/reference/kintone-api-exception/",
            "text": "kintoneAPIException\n\n\nHandle error responses from kintone Rest API\n\n\nMethods\n\n\ngetHttpErrorCode()\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nint?\n\n\nSample code\n\n\n\n\nGet http error code\n\n\n Source code \n\n\nlet recordManagement: Record = Record(connection)\ndo {\n    let response: GetRecordsResponse = (try recordManagement.getRecords(999999, nil nil))!\n} catch let error as kintoneAPIException {\n    let httpCode = error.getHttpErrorCode\n}\n\n\n\n\n\n\ngetErrorResponse()\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nErrorResponse\n?\n\n\nSample code\n\n\n\n\nGet apps with error response\n\n\n Source code \n\n\nlet recordManagement: Record = Record(connection)\ndo {\n    let response: GetRecordsResponse = (try recordManagement.getRecords(999999, nil nil))!\n} catch let error as kintoneAPIException {\n    let errorID = error.getErrorResponse().getId()\n    let errorMsg = error.getErrorResponse().getMessage()\n    let errorCode = error.getErrorResponse().getCode()\n}\n\n\n\n\n\n\n\ngetErrorResponses()\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nArray<\nErrorResponse\n>?\n\n\nSample code\n\n\n\n\nGet apps with error responses\n\n\n Source code \n\n\n// Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.addRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.updateRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.deleteRecords(/*[Args]*/)\n    response = try bulkRequestManager.execute()\n} catch let error as kintoneAPIException {\n    let errorResps = error.getErrorResponses()\n    let errorMsg = errorResps[0].getMessage()\n}",
            "title": "Kintone APIException"
        },
        {
            "location": "/reference/kintone-api-exception/#kintoneapiexception",
            "text": "Handle error responses from kintone Rest API",
            "title": "kintoneAPIException"
        },
        {
            "location": "/reference/kintone-api-exception/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/kintone-api-exception/#gethttperrorcode",
            "text": "Parameter  (none)  Return  int?  Sample code   Get http error code   Source code   let recordManagement: Record = Record(connection)\ndo {\n    let response: GetRecordsResponse = (try recordManagement.getRecords(999999, nil nil))!\n} catch let error as kintoneAPIException {\n    let httpCode = error.getHttpErrorCode\n}",
            "title": "getHttpErrorCode()"
        },
        {
            "location": "/reference/kintone-api-exception/#geterrorresponse",
            "text": "Parameter  (none)  Return  ErrorResponse ?  Sample code   Get apps with error response   Source code   let recordManagement: Record = Record(connection)\ndo {\n    let response: GetRecordsResponse = (try recordManagement.getRecords(999999, nil nil))!\n} catch let error as kintoneAPIException {\n    let errorID = error.getErrorResponse().getId()\n    let errorMsg = error.getErrorResponse().getMessage()\n    let errorCode = error.getErrorResponse().getCode()\n}",
            "title": "getErrorResponse()"
        },
        {
            "location": "/reference/kintone-api-exception/#geterrorresponses",
            "text": "Parameter  (none)  Return  Array< ErrorResponse >?  Sample code   Get apps with error responses   Source code   // Init Bulk request\nvar bulkRequestManager = BulkRequest(connection);\n\ndo {\n    bulkRequestManager = try bulkRequestManager.addRecord(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.addRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.updateRecords(/*[Args]*/)\n    bulkRequestManager = try bulkRequestManager.deleteRecords(/*[Args]*/)\n    response = try bulkRequestManager.execute()\n} catch let error as kintoneAPIException {\n    let errorResps = error.getErrorResponses()\n    let errorMsg = errorResps[0].getMessage()\n}",
            "title": "getErrorResponses()"
        },
        {
            "location": "/reference/file/",
            "text": "File\n\n\nProvide manipulate functions on file: file download & file upload in the kintone app.\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnection\n\n\nConnection\n\n\nyes\n\n\nThe connection module of this SDK.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInitial file class\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\nlet fileManagement = File(connection);\n\n\n\n\n\n\nMethods\n\n\nupload(filePath)\n\n\n\n\nUpload file kintone via Rest API\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilePath\n\n\nString\n\n\nyes\n\n\nThe full path of file on your environment\n\n\n\n\n\n\n\n\nReturn\n\n\nFileModel\n\n\nSample code\n\n\n\n\nGet app sample\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\n\ndo {\n    // execute upload file API\n    let bundle = Bundle(for: type(of: self))\n    let upload_file_path = bundle.url(forResource: \"test\", withExtension: \"txt\")\n    let fileModel = try fileManager.upload(upload_file_path!.absoluteString)\n    let fileKey = fileModel.getFileKey()\n\n    // update record\n    let fileParam = [\"fileKey\" : fileKey]\n    let fkeyList = [fileParam]\n    let fval = FieldValue()\n    fval.setValue(fkeyList)\n    let updateParam = [\"attachment1\" : fval]\n    let updRes: UpdateRecordResponse  = try recordManager.updateRecordByID(APP_ID, 1, updateParam, nil)\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\ndownload(fileKey, outPutFilePath)\n\n\n\n\nDownload file kintone via Rest API\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfileKey\n\n\nString\n\n\nyes\n\n\nThe file key of the uploaded file on kintone\n\n\n\n\n\n\noutPutFilePath\n\n\nString\n\n\nyes\n\n\nThe full path of output file on your environment\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nGet apps sample\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\ndo {\n    // get filekey\n    let appID = 1\n    let recordID = 1\n    let getResponse: GetRecordResponse? = try recordManager.getRecord(appID, recordID)\n    let recordVal = getResponse?.getRecord()\n    let fileVal = recordVal?[\"TempFile\"]\n    let fileList = fileVal?.getValue() as! [FileModel]\n\n    // execute download file API\n    for fileResult in fileList {\n        if let dowloadDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {\n            let pathFileName = dowloadDir.absoluteString + fileResult.getName()!\n            try fileManager.download(fileResult.getFileKey()!, pathFileName)\n        }\n    }\n} catch {\n    // Handle error\n}",
            "title": "File"
        },
        {
            "location": "/reference/file/#file",
            "text": "Provide manipulate functions on file: file download & file upload in the kintone app.",
            "title": "File"
        },
        {
            "location": "/reference/file/#constructor",
            "text": "Parameter     Name  Type  Required  Description      connection  Connection  yes  The connection module of this SDK.     Sample code   Initial file class   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\nlet fileManagement = File(connection);",
            "title": "Constructor"
        },
        {
            "location": "/reference/file/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/file/#uploadfilepath",
            "text": "Upload file kintone via Rest API   Parameter     Name  Type  Required  Description      filePath  String  yes  The full path of file on your environment     Return  FileModel  Sample code   Get app sample   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\n\ndo {\n    // execute upload file API\n    let bundle = Bundle(for: type(of: self))\n    let upload_file_path = bundle.url(forResource: \"test\", withExtension: \"txt\")\n    let fileModel = try fileManager.upload(upload_file_path!.absoluteString)\n    let fileKey = fileModel.getFileKey()\n\n    // update record\n    let fileParam = [\"fileKey\" : fileKey]\n    let fkeyList = [fileParam]\n    let fval = FieldValue()\n    fval.setValue(fkeyList)\n    let updateParam = [\"attachment1\" : fval]\n    let updRes: UpdateRecordResponse  = try recordManager.updateRecordByID(APP_ID, 1, updateParam, nil)\n} catch  {\n    // Handle error\n}",
            "title": "upload(filePath)"
        },
        {
            "location": "/reference/file/#downloadfilekey-outputfilepath",
            "text": "Download file kintone via Rest API   Parameter     Name  Type  Required  Description      fileKey  String  yes  The file key of the uploaded file on kintone    outPutFilePath  String  yes  The full path of output file on your environment     Return  (none)  Sample code   Get apps sample   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\ndo {\n    // get filekey\n    let appID = 1\n    let recordID = 1\n    let getResponse: GetRecordResponse? = try recordManager.getRecord(appID, recordID)\n    let recordVal = getResponse?.getRecord()\n    let fileVal = recordVal?[\"TempFile\"]\n    let fileList = fileVal?.getValue() as! [FileModel]\n\n    // execute download file API\n    for fileResult in fileList {\n        if let dowloadDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {\n            let pathFileName = dowloadDir.absoluteString + fileResult.getName()!\n            try fileManager.download(fileResult.getFileKey()!, pathFileName)\n        }\n    }\n} catch {\n    // Handle error\n}",
            "title": "download(fileKey, outPutFilePath)"
        },
        {
            "location": "/reference/file-model/",
            "text": "File Model\n\n\nHolds file information obtained from kintone.\n\n\nMethods\n\n\ngetFileKey()\n\n\n\n\nGet the file key of the uploaded file.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nGet the file key of the uploaded file\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\n\ndo {\n    // execute upload file API\n    let bundle = Bundle(for: type(of: self))\n    let upload_file_path = bundle.url(forResource: \"test\", withExtension: \"txt\")\n    let fileModel = try fileManager.upload(upload_file_path!.absoluteString)\n    let fileKey = fileModel.getFileKey()\n\n    // update record\n    let fileParam = [\"fileKey\" : fileKey]\n    let fkeyList = [fileParam]\n    let fval = FieldValue()\n    fval.setValue(fkeyList)\n    let updateParam = [\"attachment1\" : fval]\n    let updRes: UpdateRecordResponse  = try recordManager.updateRecordByID(APP_ID, 1, updateParam, nil)\n} catch  {\n    // Handle error\n}\n\n\n\n\n\n\n\ngetName()\n\n\n\n\nGet the name of the uploaded file.\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nGet the name of the uploaded file\n\n\n Source code \n\n\n// Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\ndo {\n    // get filekey\n    let appID = 1\n    let recordID = 1\n    let getResponse: GetRecordResponse? = try recordManager.getRecord(appID, recordID)\n    let recordVal = getResponse?.getRecord()\n    let fileVal = recordVal?[\"TempFile\"]\n    let fileList = fileVal?.getValue() as! [FileModel]\n\n    // execute download file API\n    for fileResult in fileList {\n        if let dowloadDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {\n            let pathFileName = dowloadDir.absoluteString + fileResult.getName()!\n            try fileManager.download(fileResult.getFileKey()!, pathFileName)\n        }\n    }\n} catch {\n    // Handle error\n}",
            "title": "FileModel"
        },
        {
            "location": "/reference/file-model/#file-model",
            "text": "Holds file information obtained from kintone.",
            "title": "File Model"
        },
        {
            "location": "/reference/file-model/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/file-model/#getfilekey",
            "text": "Get the file key of the uploaded file.   Parameter  (none)  Return  String  Sample code   Get the file key of the uploaded file   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\n\ndo {\n    // execute upload file API\n    let bundle = Bundle(for: type(of: self))\n    let upload_file_path = bundle.url(forResource: \"test\", withExtension: \"txt\")\n    let fileModel = try fileManager.upload(upload_file_path!.absoluteString)\n    let fileKey = fileModel.getFileKey()\n\n    // update record\n    let fileParam = [\"fileKey\" : fileKey]\n    let fkeyList = [fileParam]\n    let fval = FieldValue()\n    fval.setValue(fkeyList)\n    let updateParam = [\"attachment1\" : fval]\n    let updRes: UpdateRecordResponse  = try recordManager.updateRecordByID(APP_ID, 1, updateParam, nil)\n} catch  {\n    // Handle error\n}",
            "title": "getFileKey()"
        },
        {
            "location": "/reference/file-model/#getname",
            "text": "Get the name of the uploaded file.   Parameter  (none)  Return  String  Sample code   Get the name of the uploaded file   Source code   // Define Authentication object\nlet username: String = {your_user_name}\nlet password: String = {your_user_password}\nlet auth = Auth()\nauth.setPasswordAuth(username, password)\n\nlet myDomainName: String = {your_domain}\nlet connection = Connection(myDomainName, auth)\n\n// Init File Module\nlet fileManager = File(connection)\nlet recordManager = Record(connection)\ndo {\n    // get filekey\n    let appID = 1\n    let recordID = 1\n    let getResponse: GetRecordResponse? = try recordManager.getRecord(appID, recordID)\n    let recordVal = getResponse?.getRecord()\n    let fileVal = recordVal?[\"TempFile\"]\n    let fileList = fileVal?.getValue() as! [FileModel]\n\n    // execute download file API\n    for fileResult in fileList {\n        if let dowloadDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {\n            let pathFileName = dowloadDir.absoluteString + fileResult.getName()!\n            try fileManager.download(fileResult.getFileKey()!, pathFileName)\n        }\n    }\n} catch {\n    // Handle error\n}",
            "title": "getName()"
        },
        {
            "location": "/reference/member/",
            "text": "Member\n\n\nGeneral information of the member(user/group/organization) on the kintone application\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nString\n\n\nThe user/group/organization code.\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe user/group/organization name.\n\n\n\n\n\n\n\n\nSample code\n\n\n\n\nInitial member class\n\n\n Source code \n\n\nlet code: String = \"usercode\"\nlet name: String = \"username\"\n\nlet member = Member(code, name)\n\n\n\n\n\n\nMethods\n\n\ngetCode()\n\n\n\n\nGet the code of the user/group/organization\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nGet the code of the user/group/organization\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let member = resultData[\"fieldCode\"]?.getValue() as! Member\n    let usercode = member.getCode()\n    let userName = member.getName()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetCode()\n\n\n\n\nSet the code of the user/group/organization\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nString\n\n\nThe user/group/organization code.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nSet the code of the user/group/organization\n\n\n Source code \n\n\nlet member = new Member\nmember.setCode(\"usercode\");\nmember.setName(\"username\");\n\nRecord recordManagement = new Record(connection);\n\nInteger appID = 1;\nHashMap<String, FieldValue> addRecord = new HashMap<String, FieldValue>();\nFieldValue fv = new FieldValue();\nfv.setType(FieldType.USER_SELECT);\nfv.setValue(member);\naddRecord.put(\"user\", fv);\n\nAddRecordResponse response = recordManagerment.addRecord(appID, addRecord);\n\n\n\n\n\n\ngetName()\n\n\n\n\nGet the name of the user/group/organization\n\n\n\n\nParameter\n\n\n(none)\n\n\nReturn\n\n\nString\n\n\nSample code\n\n\n\n\nGet the name of the user/group/organization\n\n\n Source code \n\n\n// Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let member = resultData[\"fieldCode\"]?.getValue() as! Member\n    let usercode = member.getCode()\n    let userName = member.getName()\n} catch {\n    // error handle\n}\n\n\n\n\n\n\nsetName()\n\n\n\n\nSet the name of the user/group/organization\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe user/group/organization name.\n\n\n\n\n\n\n\n\nReturn\n\n\n(none)\n\n\nSample code\n\n\n\n\nSet the name of the user/group/organization\n\n\n Source code \n\n\nlet code: String = \"usercode\"\nlet name: String = \"username\"\n\nlet member = Member(code, name)\nmember.setCode(\"newUsercode\")\nmember.setName(\"newUserName\")",
            "title": "Member"
        },
        {
            "location": "/reference/member/#member",
            "text": "General information of the member(user/group/organization) on the kintone application",
            "title": "Member"
        },
        {
            "location": "/reference/member/#constructor",
            "text": "Parameter     Name  Type  Description      code  String  The user/group/organization code.    name  String  The user/group/organization name.     Sample code   Initial member class   Source code   let code: String = \"usercode\"\nlet name: String = \"username\"\n\nlet member = Member(code, name)",
            "title": "Constructor"
        },
        {
            "location": "/reference/member/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/reference/member/#getcode",
            "text": "Get the code of the user/group/organization   Parameter  (none)  Return  String  Sample code   Get the code of the user/group/organization   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let member = resultData[\"fieldCode\"]?.getValue() as! Member\n    let usercode = member.getCode()\n    let userName = member.getName()\n} catch {\n    // error handle\n}",
            "title": "getCode()"
        },
        {
            "location": "/reference/member/#setcode",
            "text": "Set the code of the user/group/organization   Parameter     Name  Type  Description      code  String  The user/group/organization code.     Return  (none)  Sample code   Set the code of the user/group/organization   Source code   let member = new Member\nmember.setCode(\"usercode\");\nmember.setName(\"username\");\n\nRecord recordManagement = new Record(connection);\n\nInteger appID = 1;\nHashMap<String, FieldValue> addRecord = new HashMap<String, FieldValue>();\nFieldValue fv = new FieldValue();\nfv.setType(FieldType.USER_SELECT);\nfv.setValue(member);\naddRecord.put(\"user\", fv);\n\nAddRecordResponse response = recordManagerment.addRecord(appID, addRecord);",
            "title": "setCode()"
        },
        {
            "location": "/reference/member/#getname",
            "text": "Get the name of the user/group/organization   Parameter  (none)  Return  String  Sample code   Get the name of the user/group/organization   Source code   // Init Record Module\nlet recordManagement = Record(connection)\n\n// execute get record API\nlet appID: Int = {your_app_id}\nlet recordID: Int = {your_record_id}\nvar response: GetRecordResponse? = nil\ndo {\n    response = try recordManagement.getRecord(appID, recordID)\n\n    let resultData = response!.getRecord()!\n    let member = resultData[\"fieldCode\"]?.getValue() as! Member\n    let usercode = member.getCode()\n    let userName = member.getName()\n} catch {\n    // error handle\n}",
            "title": "getName()"
        },
        {
            "location": "/reference/member/#setname",
            "text": "Set the name of the user/group/organization   Parameter     Name  Type  Description      name  String  The user/group/organization name.     Return  (none)  Sample code   Set the name of the user/group/organization   Source code   let code: String = \"usercode\"\nlet name: String = \"username\"\n\nlet member = Member(code, name)\nmember.setCode(\"newUsercode\")\nmember.setName(\"newUserName\")",
            "title": "setName()"
        }
    ]
}